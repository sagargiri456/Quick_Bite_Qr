
----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\create-table\route.ts -----

// File: app/api/create-table/route.ts
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    const { restaurantId, tableNumber } = await req.json();

    // Call your Supabase Edge Function
const res = await fetch(
  "https://melkeknoniqnnlanhobo.functions.supabase.co/generate-table-qr",
  {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`, 
      // or SUPABASE_SERVICE_ROLE_KEY if you want more power (be careful!)
    },
    body: JSON.stringify({ restaurantId, tableNumber }),
  }
);

    if (!res.ok) {
      const errorText = await res.text();
      return NextResponse.json(
        { error: `Supabase function failed: ${errorText}` },
        { status: res.status }
      );
    }

    const data = await res.json();

    return NextResponse.json({ success: true, ...data });
  } catch (err: any) {
    return NextResponse.json(
      { error: err.message || "Unknown error" },
      { status: 500 }
    );
  }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\uploadthing\core.ts -----

// src/app/api/uploadthing/core.ts
import { createUploadthing, type FileRouter } from "uploadthing/next";

const f = createUploadthing();

// This is a fake user ID - in a real app, you'd get this from your auth solution
const auth = (req: Request) => ({ id: "fake-user-id" }); 

// FileRouter for your app, can contain multiple FileRoutes
export const ourFileRouter = {
  // Define as many FileRoutes as you like, each with a unique route slug
  menuItemImage: f({ image: { maxFileSize: "4MB", maxFileCount: 1 } })
    // Set permissions and file types for this FileRoute
    .middleware(async ({ req }) => {
      // This code runs on your server before upload
      const user = await auth(req);
    

      // If you throw, the user will not be able to upload
      if (!user) throw new Error("Unauthorized");

      // Whatever is returned here is accessible in onUploadComplete
      return { userId: user.id };
    })
    .onUploadComplete(async ({ metadata, file }) => {
      // This code RUNS ON YOUR SERVER after upload
      console.log("Upload complete for userId:", metadata.userId);
      console.log("file url", file.url);
    }),
} satisfies FileRouter;

export type OurFileRouter = typeof ourFileRouter;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\uploadthing\route.ts -----

// src/app/api/uploadthing/route.ts
import { createRouteHandler } from "uploadthing/next"; // CHANGED: Correct import
import { ourFileRouter } from "./core";

// Export routes for Next App Router
export const { GET, POST } = createRouteHandler({ // CHANGED: Correct function name
  router: ourFileRouter,
});

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\PublicPagesComponents\Cart.tsx -----

'use client';

import { useState } from 'react';
// Corrected import path for your co-located store
import { useCartStore } from '@/app/customer-end-pages/store/cartStore';
import CartItem from './CartItem';
import { X, ShoppingCart, Loader2 } from 'lucide-react';
import { submitOrder } from '@/lib/api/orders'; // Import the new function

interface CartProps {
  isOpen: boolean;
  onClose: () => void;
  restaurantId: string;
  tableId: string;
}

const formatPrice = (price: number) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price);

export default function Cart({ isOpen, onClose, restaurantId, tableId }: CartProps) {
  const { items, totalPrice, clearCart } = useCartStore();
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [orderSuccess, setOrderSuccess] = useState(false);

  const handlePlaceOrder = async () => {
    setIsPlacingOrder(true);
    try {
      // This now calls your backend function to save the order
      await submitOrder(items, restaurantId, tableId, totalPrice());
      setOrderSuccess(true);
      clearCart();
    } catch (error) {
      alert("There was an error placing your order. Please try again.");
    } finally {
      setIsPlacingOrder(false);
    }
  };
  
  const handleClose = () => {
    onClose();
    // Reset the success message after a short delay to allow the closing animation to finish
    setTimeout(() => {
        setOrderSuccess(false);
    }, 300);
  }

  return (
    <>
      <div
        className={`fixed inset-0 bg-black transition-opacity duration-300 ${
          isOpen ? 'opacity-50' : 'opacity-0 pointer-events-none'
        }`}
        onClick={handleClose}
      />
      <div
        className={`fixed top-0 right-0 h-full w-full max-w-md bg-white shadow-2xl transform transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="flex flex-col h-full">
          <div className="flex justify-between items-center p-6 border-b">
            <h2 className="text-2xl font-bold text-gray-800">Your Cart</h2>
            <button onClick={handleClose} className="p-2 rounded-full hover:bg-gray-100">
              <X size={24} />
            </button>
          </div>

          {/* Conditionally render success message or cart items */}
          {orderSuccess ? (
             <div className="flex flex-col items-center justify-center h-full text-center text-gray-700 p-6">
                <h3 className="text-2xl font-bold text-green-600">Order Placed!</h3>
                <p className="mt-2">Your order has been sent to the kitchen. Thank you!</p>
             </div>
          ) : (
            <>
              <div className="flex-grow p-6 overflow-y-auto">
                {items.length === 0 ? (
                  <div className="flex flex-col items-center justify-center h-full text-center text-gray-500">
                    <ShoppingCart size={48} className="mb-4" />
                    <p className="font-semibold">Your cart is currently empty.</p>
                  </div>
                ) : (
                  <div className="divide-y">
                    {items.map(item => (
                      <CartItem key={item.id} item={item} />
                    ))}
                  </div>
                )}
              </div>
              {items.length > 0 && (
                <div className="p-6 border-t bg-gray-50">
                  <div className="flex justify-between items-center mb-4">
                    <span className="text-lg font-semibold text-gray-800">Subtotal</span>
                    <span className="text-xl font-bold text-gray-900">{formatPrice(totalPrice())}</span>
                  </div>
                  <button 
                      onClick={handlePlaceOrder}
                      disabled={isPlacingOrder}
                      className="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                  >
                    {isPlacingOrder && <Loader2 className="mr-2 h-5 w-5 animate-spin"/>}
                    {isPlacingOrder ? 'Placing Order...' : 'Place Order'}
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\PublicPagesComponents\CartItem.tsx -----

'use client';

import Image from 'next/image';
import { useCartStore, CartItem as CartItemType } from '@/app/customer-end-pages/store/cartStore';
import { Plus, Minus, X } from 'lucide-react';

interface CartItemProps {
  item: CartItemType;
}

const formatPrice = (price: number) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price);

export default function CartItem({ item }: CartItemProps) {
  const { addItem, removeItem } = useCartStore();

  return (
    <div className="flex items-center gap-4 py-4">
      <div className="relative h-16 w-16 rounded-lg overflow-hidden">
        {item.photo_url ? (
          <Image src={item.photo_url} alt={item.name} layout="fill" objectFit="cover" />
        ) : (
          <div className="bg-gray-200 h-full w-full"></div>
        )}
      </div>
      <div className="flex-grow">
        <p className="font-semibold text-gray-800">{item.name}</p>
        <p className="text-sm text-gray-600">{formatPrice(item.price)}</p>
      </div>
      <div className="flex items-center gap-2">
        <button onClick={() => removeItem(item.id)} className="p-1 rounded-full bg-gray-200 hover:bg-gray-300">
          {item.quantity > 1 ? <Minus size={14} /> : <X size={14} />}
        </button>
        <span className="font-bold w-6 text-center">{item.quantity}</span>
        <button onClick={() => addItem(item)} className="p-1 rounded-full bg-gray-200 hover:bg-gray-300">
          <Plus size={14} />
        </button>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\PublicPagesComponents\CustomerMenuItemCard.tsx -----

'use client';

import Image from 'next/image';
import { MenuItem } from '@/types/menu';
import { Plus } from 'lucide-react';
// CORRECTED: Import from the new co-located path
import { useCartStore } from '../store/cartStore'; 

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(price);
};

interface CustomerMenuItemCardProps {
  item: MenuItem;
}

export default function CustomerMenuItemCard({ item }: CustomerMenuItemCardProps) {
  const { addItem } = useCartStore();

  return (
    <div className="bg-white rounded-2xl shadow-lg overflow-hidden flex flex-col group transition-all duration-300 hover:shadow-2xl">
      <div className="relative h-48 w-full">
        {item.photo_url ? (
          <Image
            src={item.photo_url}
            alt={item.name}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-300 group-hover:scale-105"
          />
        ) : (
          <div className="bg-gray-100 h-full w-full flex items-center justify-center">
            <span className="text-gray-400">No Image</span>
          </div>
        )}
      </div>
      <div className="p-4 flex-grow flex flex-col">
        <h3 className="text-lg font-bold text-gray-800">{item.name}</h3>
        <p className="text-sm text-gray-600 mt-1 flex-grow">{item.description}</p>
        <div className="flex justify-between items-center mt-4">
          <p className="text-xl font-bold text-gray-900">{formatPrice(item.price)}</p>
          <button 
            onClick={() => addItem(item)}
            className="flex items-center gap-2 bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            <Plus size={16} />
            Add
          </button>
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\store\cartStore.ts -----

import { create } from 'zustand';
import { MenuItem } from '@/types/menu';

export interface CartItem extends MenuItem {
  quantity: number;
}

interface CartState {
  items: CartItem[];
  addItem: (item: MenuItem) => void;
  removeItem: (itemId: number) => void;
  clearCart: () => void;
  totalItems: () => number;
  totalPrice: () => number;
}

export const useCartStore = create<CartState>((set, get) => ({
  items: [],
  addItem: (item) => {
    const currentItems = get().items;
    const existingItem = currentItems.find((cartItem) => cartItem.id === item.id);
    if (existingItem) {
      const updatedItems = currentItems.map((cartItem) =>
        cartItem.id === item.id ? { ...cartItem, quantity: cartItem.quantity + 1 } : cartItem
      );
      set({ items: updatedItems });
    } else {
      set({ items: [...currentItems, { ...item, quantity: 1 }] });
    }
  },
  removeItem: (itemId) => {
    const currentItems = get().items;
    const existingItem = currentItems.find((cartItem) => cartItem.id === itemId);
    if (existingItem && existingItem.quantity > 1) {
      const updatedItems = currentItems.map((cartItem) =>
        cartItem.id === itemId ? { ...cartItem, quantity: cartItem.quantity - 1 } : cartItem
      );
      set({ items: updatedItems });
    } else {
      set({ items: currentItems.filter((cartItem) => cartItem.id !== itemId) });
    }
  },
  clearCart: () => set({ items: [] }),
  totalItems: () => get().items.reduce((total, item) => total + item.quantity, 0),
  totalPrice: () => get().items.reduce((total, item) => total + item.price * item.quantity, 0),
}));

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\[restaurantSlug]\[tableId]\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { getPublicMenuItems, getRestaurantDetails } from '@/lib/api/public';
import CustomerMenuItemCard from '@/app/customer-end-pages/PublicPagesComponents/CustomerMenuItemCard';
import Cart from '@/app/customer-end-pages/PublicPagesComponents/Cart';
import { useCartStore } from '@/app/customer-end-pages/store/cartStore';
import { MenuItem as BaseMenuItem, MenuCategory } from '@/types/menu';
import { ShoppingCart, Search, Loader2 } from 'lucide-react';

// Define a type for the restaurant details we expect to fetch
interface RestaurantDetails {
  id: string;
  restaurant_name: string;
}

// Define a local MenuItem type that includes the 'category' property used for grouping
interface MenuItem extends BaseMenuItem {
    category?: MenuCategory;
}

export default function CustomerMenuPage({ params }: { params: { restaurantSlug: string, tableId: string } }) {
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [restaurantDetails, setRestaurantDetails] = useState<RestaurantDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const { totalItems } = useCartStore();

  useEffect(() => {
    // FIX: Access params properties only inside the useEffect hook to avoid the warning.
    const { restaurantSlug } = params;

    const fetchData = async () => {
      if (!restaurantSlug) return; // Guard against running with no slug

      setIsLoading(true);
      try {
        const [items, details] = await Promise.all([
          getPublicMenuItems(restaurantSlug),
          getRestaurantDetails(restaurantSlug)
        ]);
        
        setMenuItems(items || []); // Ensure menuItems is always an array

        if (details) {
          setRestaurantDetails(details);
        }
      } catch (error) {
        console.error("Failed to fetch menu data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  // FIX: The dependency should be the entire params object.
  }, [params]);

  const groupedMenu = menuItems.reduce((acc, item) => {
    const category = item.category || 'mains';
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(item);
    return acc;
  }, {} as Record<MenuCategory, MenuItem[]>);


  const categoryOrder: MenuCategory[] = ['starters', 'mains', 'desserts', 'drinks'];

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Loader2 className="h-12 w-12 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-screen font-sans">
      <div className="max-w-7xl mx-auto pb-12">
        <header className="sticky top-0 bg-white/80 backdrop-blur-md z-10 p-4 shadow-sm">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">
              {restaurantDetails ? restaurantDetails.restaurant_name : 'Menu'}
            </h1>
            <button onClick={() => setIsCartOpen(true)} className="relative bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700">
              <ShoppingCart size={20} />
              {totalItems() > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                  {totalItems()}
                </span>
              )}
            </button>
          </div>
          <div className="relative mt-4">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
            <input 
              type="text" 
              placeholder="Search menu items..." 
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </header>

        <main className="p-4">
          {!restaurantDetails || menuItems.length === 0 ? (
            <div className="text-center mt-20">
              <p className="text-xl text-gray-600">This restaurant's menu is not available right now.</p>
            </div>
          ) : (
            <div className="space-y-12">
              {categoryOrder.map(category => (
                groupedMenu[category] && groupedMenu[category].length > 0 && (
                  <section key={category}>
                    <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 capitalize mb-6">{category}</h2>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                      {groupedMenu[category].map(item => (
                        <CustomerMenuItemCard key={item.id} item={item} />
                      ))}
                    </div>
                  </section>
                )
              ))}
            </div>
          )}
        </main>
      </div>
      
      {restaurantDetails && (
        <Cart 
          isOpen={isCartOpen} 
          onClose={() => setIsCartOpen(false)} 
          restaurantId={restaurantDetails.id}
          tableId={params.tableId}
        />
      )}
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\[restaurantSlug]\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { getPublicMenuItems, getRestaurantDetails } from '@/lib/api/public';
// CORRECTED: Import from the new co-located path
import CustomerMenuItemCard from '../PublicPagesComponents/CustomerMenuItemCard';
import Cart from '../PublicPagesComponents/Cart';
import { useCartStore } from '../store/cartStore';
import { MenuItem, MenuCategory } from '@/types/menu';
import { ShoppingCart, Search, Loader2 } from 'lucide-react';

export default function CustomerMenuPage({ params }: { params: { restaurantId: string } }) {
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [restaurantName, setRestaurantName] = useState('Menu');
  const [isLoading, setIsLoading] = useState(true);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const { totalItems } = useCartStore();

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      const [items, details] = await Promise.all([
        getPublicMenuItems(params.restaurantId),
        getRestaurantDetails(params.restaurantId)
      ]);
      setMenuItems(items);
      if (details) {
        setRestaurantName(details.restaurant_name);
      }
      setIsLoading(false);
    };
    fetchData();
  }, [params.restaurantId]);

  const groupedMenu = menuItems.reduce((acc, item) => {
    const category = item.category || 'mains';
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(item);
    return acc;
  }, {} as Record<MenuCategory, typeof menuItems>);

  const categoryOrder: MenuCategory[] = ['starters', 'mains', 'desserts', 'drinks'];

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Loader2 className="h-12 w-12 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-screen font-sans">
      <div className="max-w-7xl mx-auto pb-12">
        <header className="sticky top-0 bg-white/80 backdrop-blur-md z-10 p-4 shadow-sm">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">{restaurantName}</h1>
            <button onClick={() => setIsCartOpen(true)} className="relative bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700">
              <ShoppingCart size={20} />
              {totalItems() > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                  {totalItems()}
                </span>
              )}
            </button>
          </div>
          <div className="relative mt-4">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
            <input 
              type="text" 
              placeholder="Search menu items..." 
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </header>

        <main className="p-4">
          {menuItems.length === 0 ? (
            <div className="text-center mt-20">
              <p className="text-xl text-gray-600">This restaurant's menu is not available right now.</p>
            </div>
          ) : (
            <div className="space-y-12">
              {categoryOrder.map(category => (
                groupedMenu[category] && (
                  <section key={category}>
                    <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 capitalize mb-6">{category}</h2>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                      {groupedMenu[category].map(item => (
                        <CustomerMenuItemCard key={item.id} item={item} />
                      ))}
                    </div>
                  </section>
                )
              ))}
            </div>
          )}
        </main>
      </div>
      <Cart isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu\add\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useMenuItems } from '@/lib/hooks/useMenuItems';
import MenuItemForm from '@/components/menu/MenuItemForm';
import { getMyRestaurant } from '@/lib/api/restaurants';
import { Loader2 } from 'lucide-react';

export default function AddMenuItemPage() {
  const router = useRouter();
  const { addMenuItem } = useMenuItems();
  const [isSubmitting, setIsSubmitting] = useState(false);

  // State to hold the user's restaurant ID
  const [restaurantId, setRestaurantId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Fetch the restaurant ID when the page loads
  useEffect(() => {
    const loadRestaurant = async () => {
      const restaurant = await getMyRestaurant();
      if (restaurant) {
        setRestaurantId(restaurant.id);
      } else {
        console.error('No restaurant found for this user.');
        // You could redirect or show an error toast here.
      }
      setIsLoading(false);
    };
    loadRestaurant();
  }, []);

  // NOTE: photo_url matches DB; available will be defaulted here
  const handleSubmit = async (data: {
    name: string;
    description: string;
    price: number;
    photo_url?: string;
    available?: boolean; // allow coming from form later if you add a checkbox
  }) => {
    if (!restaurantId) {
      alert('Error: Could not find your restaurant ID. Please try logging in again.');
      return;
    }

    setIsSubmitting(true);
    try {
      const newItemData = {
        ...data,
        category: 'mains' as const, // Default category
        available: data.available ?? true, // <-- REQUIRED by NewMenuItem
      };

      // Pass both the form data and the fetched restaurantId to the hook
      await addMenuItem(newItemData, restaurantId);
      router.push('/dashboard/menu');
    } catch (error) {
      console.error('Failed to add menu item:', error);
      // Optionally, show an error toast/message to the user on the form
    } finally {
      setIsSubmitting(false);
    }
  };

  // Show a loading spinner while fetching the restaurant ID
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full p-8">
        <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
          <button
            onClick={() => router.back()}
            className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 transition-colors mr-4"
            aria-label="Go back"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Add New Menu Item</h1>
            <p className="text-gray-700">Create a new item for your restaurant menu.</p>
          </div>
        </div>

        <MenuItemForm
          onSubmit={handleSubmit}
          isSubmitting={isSubmitting}
          onCancel={() => router.push('/dashboard/menu')}
        />
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu\[id]\edit\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useMenuItems } from '@/lib/hooks/useMenuItems';
import MenuItemForm from '@/components/menu/MenuItemForm';
import { Loader2 } from 'lucide-react';
import { MenuItem } from '@/types/menu';

export default function EditMenuItemPage() {
  const params = useParams();
  const router = useRouter();
  // 1. Get the loading state from the hook
  const { menuItems, updateMenuItem, loading: menuItemsLoading } = useMenuItems();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [menuItem, setMenuItem] = useState<MenuItem | null>(null);
  const [isPageLoading, setIsPageLoading] = useState(true);

  const itemId = parseInt(params.id as string);

  // 2. This effect now waits for the data to finish loading
  useEffect(() => {
    // Only proceed if the main loading is done and we have items
    if (!menuItemsLoading && menuItems.length > 0) {
      const itemToEdit = menuItems.find(item => item.id === itemId);
      if (itemToEdit) {
        setMenuItem(itemToEdit);
      }
      // We are done with the page's initial load
      setIsPageLoading(false);
    } 
    // Handle the case where loading finishes but there are no items
    else if (!menuItemsLoading) {
      setIsPageLoading(false);
    }
  }, [menuItems, itemId, menuItemsLoading]); // Added menuItemsLoading as a dependency

  const handleSubmit = async (data: Omit<MenuItem, 'id' | 'restaurant_id' | 'created_at'>) => {
    if (!menuItem) return;

    setIsSubmitting(true);
    try {
      await updateMenuItem(menuItem.id, data);
      router.push('/dashboard/menu');
    } catch (error) {
      console.error('Failed to update menu item:', error);
      setIsSubmitting(false);
    }
  };

  // 3. Show a loading spinner while the page is figuring things out
  if (isPageLoading) {
    return (
      <div className="flex items-center justify-center h-full p-8">
        <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
      </div>
    );
  }

  // 4. This "not found" message will now only show after everything has loaded
  if (!menuItem) {
    return <div className="p-8 text-center text-xl text-gray-700">Menu item not found.</div>;
  }

  return (
    <div className="p-4 md:p-8">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
            <button
              onClick={() => router.back()}
              className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 transition-colors mr-4"
              aria-label="Go back"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Edit Menu Item</h1>
              <p className="text-gray-700">Update the details for this menu item.</p>
            </div>
        </div>

        <MenuItemForm
          initialData={menuItem}
          onSubmit={handleSubmit}
          isSubmitting={isSubmitting}
          onCancel={() => router.push('/dashboard/menu')}
        />
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu\page.tsx -----

// src/app/dashboard/menu/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useMenuItems } from '@/lib/hooks/useMenuItems';
import { MenuItem } from '@/types/menu';
import MenuItemCard from '@/components/menu/MenuItemCard';
import DeleteConfirmation from '@/components/menu/DeleteConfirmation';

export default function MenuPage() {
    const { menuItems, loading, error, deleteMenuItem } = useMenuItems();
    const [itemToDelete, setItemToDelete] = useState<MenuItem | null>(null);
    const [searchQuery, setSearchQuery] = useState('');

    const searchedItems = menuItems.filter(item =>
        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.description.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const handleDelete = async () => {
        if (itemToDelete) {
            await deleteMenuItem(itemToDelete.id);
            setItemToDelete(null);
        }
    };
    const averagePrice = menuItems.length > 0
        ? (menuItems.reduce((sum, item) => sum + item.price, 0) / menuItems.length).toFixed(2)
        : '0.00';

    // **FIX**: The actual JSX for the loading state is now included.
    if (loading) return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-teal-100 p-8 flex items-center justify-center">
            <div className="text-center">
                <div className="w-16 h-16 border-4 border-indigo-500 border-l-transparent rounded-full animate-spin mx-auto mb-4"></div>
                <p className="text-indigo-800">Loading menu items...</p>
            </div>
        </div>
    );

    // **FIX**: The actual JSX for the error state is now included.
    if (error) return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-teal-100 p-8 flex items-center justify-center">
            <div className="bg-white rounded-xl p-6 shadow-lg max-w-md w-full text-center">
                <div className="text-red-500 text-5xl mb-4">âš ï¸</div>
                <h2 className="text-xl font-bold text-gray-800 mb-2">Error Loading Menu</h2>
                <p className="text-gray-600 mb-4">{error}</p>
                <button
                    onClick={() => window.location.reload()}
                    className="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors"
                >
                    Try Again
                </button>
            </div>
        </div>
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-teal-100 p-4 md:p-8">
            <div className="max-w-7xl mx-auto">
                <div className="bg-white rounded-2xl shadow-md p-6 mb-8">
                    <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                        <div>
                            <h1 className="text-3xl font-bold text-gray-800">Menu Management</h1>
                            <p className="text-gray-600 mt-1">Manage your restaurant menu items</p>
                        </div>
                        <Link
                            href="/dashboard/menu/add"
                            className="flex items-center bg-gradient-to-r from-indigo-500 to-blue-500 text-white px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 transition-all shadow-lg hover:shadow-xl"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" /></svg>
                            Add New Item
                        </Link>
                    </div>
                </div>

                <div className="bg-white rounded-2xl shadow-md p-6 mb-8">
                    <div className="relative">
                        <input
                            type="text" placeholder="Search menu items..."
                            value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)}
                            className="w-full px-4 py-3 pl-12 bg-gray-100 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        />
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 absolute left-4 top-3 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
                    </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-5 mb-8">
                    <div className="bg-white rounded-2xl shadow-md p-5 flex items-center">
                        <div className="rounded-xl bg-indigo-100 p-3 mr-4"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg></div>
                        <div><p className="text-sm text-gray-500">Total Items</p><p className="text-2xl font-bold text-gray-800">{menuItems.length}</p></div>
                    </div>
                    <div className="bg-white rounded-2xl shadow-md p-5 flex items-center">
                        <div className="rounded-xl bg-emerald-100 p-3 mr-4"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-emerald-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg></div>
                        <div><p className="text-sm text-gray-500">Avg. Price</p><p className="text-2xl font-bold text-gray-800">${averagePrice}</p></div>
                    </div>
                </div>

                <div>
                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">Menu Items</h2>
                        <p className="text-gray-600">Showing {searchedItems.length} of {menuItems.length} items</p>
                    </div>
                    {searchedItems.length === 0 ? (
                        <div className="bg-white rounded-2xl shadow-md p-12 text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                            <h3 className="text-xl font-medium text-gray-700 mb-2">No menu items found</h3>
                            <p className="text-gray-500 mb-6">{searchQuery ? 'Try a different search term' : 'Get started by adding your first menu item'}</p>
                            <Link href="/dashboard/menu/add" className="inline-flex items-center bg-gradient-to-r from-indigo-500 to-blue-500 text-white px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 transition-all"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" /></svg> Add New Item</Link>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {searchedItems.map(item => (
                                <MenuItemCard
                                    key={item.id}
                                    item={item}
                                    onEdit={`/dashboard/menu/${item.id}/edit`}
                                    onDelete={() => setItemToDelete(item)}
                                />
                            ))}
                        </div>
                    )}
                </div>
            </div>

            <DeleteConfirmation
                isOpen={!!itemToDelete}
                onClose={() => setItemToDelete(null)}
                onConfirm={handleDelete}
                itemName={itemToDelete?.name || ''}
            />
        </div>
    );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\orders\LiveOrders.tsx -----

'use client'
import React, { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import LiveOrdersComponent from '@/components/LiveOrdersComponent';
import { Clock, ChefHat, CheckCircle, XCircle } from 'lucide-react';

export type OrderItemStatus =
  | 'Pending'
  | 'Confirm'
  | 'Preparing'
  | 'Ready'
  | 'Complete'
  | 'Cancelled'
  | 'Rejected'
  | 'Refunded';

// Export the interface so it can be reused
export interface OrderItem {
  id: string;
  quantity: number;
  price: number;
  status: OrderItemStatus | null;
  created_at: string;
  order: {
    id: string;
    table_id: string | null;
    table_number: string | null;
    restaurant: {
      id: string;
      name: string;
      user_id: string;
    };
  };
  menu_item: {
    id: string;
    name: string;
  };
}

const LiveOrders = () => {
  const [loading, setLoading] = useState<boolean>(true);
  const [refreshing, setRefreshing] = useState<boolean>(false);
  const [liveOrders, setLiveOrders] = useState<OrderItem[] | null>(null);
  const [filteredOrders, setFilteredOrders] = useState<OrderItem[] | null>(null);
  const [activeStatus, setActiveStatus] = useState<OrderItemStatus | 'All'>('All');

  useEffect(() => {
    fetchLiveOrders();
  }, []);

  useEffect(() => {
    if (activeStatus === 'All') {
      setFilteredOrders(liveOrders);
    } else {
      setFilteredOrders(liveOrders?.filter(order => order.status === activeStatus) || null);
    }
  }, [liveOrders, activeStatus]);

 const fetchLiveOrders = async () => {
  setRefreshing(true);

  const { data: { user }, error: authError } = await supabase.auth.getUser();

  if (authError || !user) {
    console.log("Restaurant owner not found!");
    setLoading(false);
    setRefreshing(false);
    return;
  }

  const { data, error } = await supabase
    .from('order_items')
    .select(`
      id,
      quantity,
      price,
      status,
      created_at,
      order:orders (
        id,
        table_id,
        table:tables(
          id,
          table_number
        ),
        restaurant:restaurants (
          id,
          restaurant_name,
          owner_name,
          user_id
        )
      ),
      menu_item:menu_items (
        id,
        name
      )
    `)
    .eq('order.restaurant.user_id', user.id)
    .not('status', 'in', '(Complete,Rejected,Cancelled,Refunded)')
    .order('created_at', { ascending: false });

  if (error) {
    console.log('Error in fetching live orders', error);
  } else {
    // âœ… Fixed normalization with correct property mapping
    const normalized: OrderItem[] = (data || []).map((item: any) => ({
      id: item.id,
      quantity: item.quantity,
      price: item.price,
      status: item.status,
      created_at: item.created_at,
      order: {
        id: item.order?.id || '',
        table_id: item.order?.table_id || null,
        table_number: item.order?.table?.table_number || null,
        restaurant: item.order?.restaurant ? {
          id: item.order.restaurant.id,
          name: item.order.restaurant.restaurant_name, // âœ… Fixed: use restaurant_name
          user_id: item.order.restaurant.user_id,
        } : { id: '', name: '', user_id: '' },
      },
      menu_item: {
        id: item.menu_item?.id || '',
        name: item.menu_item?.name || '',
      }
    }));

    setLiveOrders(normalized);
  }

  setLoading(false);
  setRefreshing(false);
};

  const getStatusIcon = (status: OrderItemStatus | null) => {
    switch (status) {
      case 'Pending': return <Clock className="h-4 w-4" />;
      case 'Confirm': return <CheckCircle className="h-4 w-4" />;
      case 'Preparing': return <ChefHat className="h-4 w-4" />;
      case 'Ready': return <CheckCircle className="h-4 w-4" />;
      case 'Cancelled':
      case 'Rejected':
      case 'Refunded': return <XCircle className="h-4 w-4" />;
      default: return <Clock className="h-4 w-4" />;
    }
  };

  const getStatusVariant = (status: OrderItemStatus | null) => {
    switch (status) {
      case 'Cancelled':
      case 'Rejected':
      case 'Refunded':
        return 'destructive';
      case 'Confirm':
      case 'Preparing':
      case 'Ready':
        return 'default';
      case 'Pending':
      default:
        return 'secondary';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const getTotalPrice = (orders: OrderItem[] | null) => {
    if (!orders) return 0;
    return orders.reduce((total, order) => total + (order.price * order.quantity), 0);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <LiveOrdersComponent
      liveOrders={liveOrders}
      filteredOrders={filteredOrders}
      refreshing={refreshing}
      fetchLiveOrders={fetchLiveOrders}
      activeStatus={activeStatus}
      setActiveStatus={setActiveStatus}
      getStatusIcon={getStatusIcon}
      getStatusVariant={getStatusVariant}
      formatDate={formatDate}
      getTotalPrice={getTotalPrice}
    />
  );
};

export default LiveOrders;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\orders\OrderHistory.tsx -----

import React from 'react'

const OrderHistory = () => {
  return (
    <div>OrderHistory</div>
  )
}

export default OrderHistory

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\orders\page.tsx -----

import React from 'react'
import LiveOrders from './LiveOrders'
import OrderHistory from './OrderHistory'

const Orders = () => {
  return (
    <div>
        <div className='flex justify-around'>
            <div className='border-2 border-red-600'>
                <LiveOrders></LiveOrders>
            </div>
            <div className='border-2 border-red-600'>
                <OrderHistory></OrderHistory>
            </div>
        </div>
    </div>
  )
}

export default Orders

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\profile\page.tsx -----

'use client'
import  {supabase}  from '@/lib/supabase/client';
import React, { useEffect, useState } from 'react';
import {Skeleton} from '@/components/ui/skeleton'

//step3: Implemented Type Restaurant = {}.
type Restaurant = {
  id: string;
  owner_name: string;
  restaurant_name: string;
  email: string;
  phone: string;
  address: string;
  upi_id: string;
  logo_url: string | null;
  qr_url: string;
  created_at: Date | null;
  user_id: string;
};

//Step1: created rafce RestaurantProfilePage.
export default function RestaurantProfilePage() {
  //Step2: create a useState hook to update the state after fetching data.
  //Step3: since using typescript i will have to create a type for this state so that type safety is assured.
  console.log("Inside the RestaurantProfilePage.");
  const [restaurant,setRestaurant] = useState<Restaurant | null>(null);
  //Since during fetching nothing no data will be available we will show loading for that we will use
  //this state loading.
  const [loading,setLoading] = useState<Boolean>(true);

  
  const [editingField, setEditingField] = useState<string | null>(null);


  
  const [formData,setFormData] = useState<Restaurant>({
  id: "", 
  owner_name: "",
  restaurant_name: "",
  email: "",
  phone: "",
  address: "",
  upi_id: "",
  logo_url: null,
  qr_url: "",
  created_at: null,
  user_id: "",
})
  console.log("before useEffect")
  useEffect(()=>{
    const fetchRestaurant = async() => {
      //getting the details of the current user form the supabase
      const {data:{user},error:authError} = await supabase.auth.getUser();
      if(authError || !user){
        console.log("User not found!");
        setLoading(false)
        return
      }
      console.log(user)
      //getting the details of the restaurant using the user_id fetched above.
  const { data, error } = await supabase
    .from('restaurants') 
    .select('*')
    .eq('user_id', user.id)
    .single();
        if(error){
          console.log('error in fetching the restaurants data')
        }else{
          setRestaurant(data);
          setLoading(false);
          console.log(data);
        }
      }
      fetchRestaurant()
    },[])  
    console.log("after useEffect")
    //if loading we have a shadcn component which we will show while loadin is going on...
    if(loading) return <Skeleton className="h-32 w-full" />
    if (!restaurant) return <p className="text-muted">No restaurant profile found.</p>


    //

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleUpdate = async () => {
    const { error } = await supabase
      .from("restaurants")
      .update(formData)
      .eq("id", restaurant.id);

    if (error) {
      console.error("Update failed:", error.message);
    } else {
      alert("Restaurant updated successfully!");
      setEditingField(null);
      setRestaurant(formData); // optional: update local state
    }
};



return (
  <div className="space-y-6">
    {formData.logo_url && (
      <img
        src={formData.logo_url}
        alt={`${formData.restaurant_name} Logo`}
        className="h-24 w-24 rounded-full object-cover"
      />
    )}

    <div>
      <strong>Restaurant Name:</strong>{restaurant.restaurant_name}
      {editingField === "restaurant_name" ? (
        <input
          type="text"
          name="restaurant_name"
          value={formData.restaurant_name}
          onChange={handleChange}
          className="input"
        />
      ) : (
        <>
          {formData.restaurant_name}
          <button onClick={() => setEditingField("restaurant_name")} className="ml-2 text-blue-500">Edit</button>
        </>
      )}
    </div>

    <div>
      <strong>Owner:</strong>{restaurant.owner_name}
      {editingField === "owner_name" ? (
        <input
          type="text"
          name="owner_name"
          value={formData.owner_name}
          onChange={handleChange}
          className="input"
        />
      ) : (
        <>
          {formData.owner_name}
          <button onClick={() => setEditingField("owner_name")} className="ml-2 text-blue-500">Edit</button>
        </>
      )}
    </div>

    <div>
      <strong>Email:</strong>{restaurant.email}
      {editingField === "email" ? (
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          className="input"
        />
      ) : (
        <>
          {formData.email}
          <button onClick={() => setEditingField("email")} className="ml-2 text-blue-500">Edit</button>
        </>
      )}
    </div>

    <div>
      <strong>Phone:</strong>{restaurant.phone}
      {editingField === "phone" ? (
        <input
          type="text"
          name="phone"
          value={formData.phone}
          onChange={handleChange}
          className="input"
        />
      ) : (
        <>
          {formData.phone}
          <button onClick={() => setEditingField("phone")} className="ml-2 text-blue-500">Edit</button>
        </>
      )}
    </div>

    <div>
      <strong>Address:</strong>{restaurant.address}
      {editingField === "address" ? (
        <input
          type="text"
          name="address"
          value={formData.address}
          onChange={handleChange}
          className="input"
        />
      ) : (
        <>
          {formData.address}
          <button onClick={() => setEditingField("address")} className="ml-2 text-blue-500">Edit</button>
        </>
      )}
    </div>

    <div>
      <strong>UPI ID:</strong>{restaurant.upi_id}
      {editingField === "upi_id" ? (
        <input
          type="text"
          name="upi_id"
          value={formData.upi_id}
          onChange={handleChange}
          className="input"
        />
      ) : (
        <>
          {formData.upi_id}
          <button onClick={() => setEditingField("upi_id")} className="ml-2 text-blue-500">Edit</button>
        </>
      )}
    </div>

    <div>
      <strong>QR Code:</strong><br />
      {formData.qr_url!="" && (
         <img
        src={formData.qr_url}
        alt="Restaurant QR Code"
        className="h-32 w-32 mt-2"
      /> 
      )}
    </div>

    {restaurant.created_at && (
      <p className="text-sm text-muted">
        Profile created on: {new Date(restaurant.created_at).toLocaleDateString()}
      </p>
    )}

    <button onClick={handleUpdate} className="btn btn-primary mt-4">
      Save Changes
    </button>
  </div>
);

}


----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\tables\add\page.tsx -----

'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
// import { useTables } from '@/lib/hooks/useTables';
import { generateQR } from '@/lib/api/generateQR';
import {supabase} from '@/lib/supabase/client'
import { Skeleton } from '@/components/ui/skeleton';
type Restaurant = {
  id: string;
  owner_name: string;
  restaurant_name: string;
  email: string;
  phone: string;
  address: string;
  upi_id: string;
  logo_url: string | null;
  qr_url: string;
  created_at: Date | null;
  user_id: string;
};

export default function AddTablePage() {
  const [isSubmitting,setIsSubmitting] =useState<boolean>();
  const router = useRouter();
  const [loading,setLoading] = useState<boolean>(true);
  const [restaurant,setRestaurant] = useState<Restaurant | null>(null);
  const [tableNumber, setTableNumber] = useState<number>();
  const [url, setUrl] = useState<string>();
  
  useEffect(()=>{
      const fetchRestaurant = async() => {
        //getting the details of the current user form the supabase
        const {data:{user},error:authError} = await supabase.auth.getUser();
        if(authError || !user){
          setLoading(false)
          return
        }
        console.log("user is below"); 
        console.log(user)
        //getting the details of the restaurant using the user_id fetched above.
    const { data, error } = await supabase
      .from('restaurants') 
      .select('*')
      .eq('user_id', user.id)
      .single();
          if(error){
            console.log('error in fetching the restaurants data')
          }else{
            setRestaurant(data);
            setLoading(false);
            console.log(data);
          }
        }
        fetchRestaurant()
      },[]) 


    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      const form = e.currentTarget; 
      const formData = new FormData(form);
      const tableNumberRaw = formData.get('tableNumber') as string;
      console.log(tableNumberRaw);
      const tableNumber = Number(tableNumberRaw);
      console.log(`table number is ${tableNumber}`)
      setTableNumber(tableNumber);

        const restaurantId = restaurant?.id;
        console.log(restaurantId);
    
        const createTable = async (restaurantId:string,tableNumber:number)=>{
        const qrUrl = await generateQR(restaurantId, tableNumber);
        console.log(qrUrl);
        setUrl(qrUrl);
        const { data, error } = await supabase.rpc("create_table_with_qr", {
        restaurant_uuid: restaurantId,
        table_num: tableNumber,
        qr_url: qrUrl,
    });
    if (error) throw error;
    console.log("Table created:", data);
      }
      restaurantId && createTable(restaurantId,tableNumber);
    };

const handleDownloadQR = (url: string) => {
  const link = document.createElement("a");
  link.href = url;
  link.download = `table-${tableNumber}.png`;
  link.click();
};

  
    if(loading) return <Skeleton className="h-32 w-full" />
    // if (!restaurant) return <p className="text-black-500  ">No restaurant profile found.</p>
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-4 sm:p-8 flex items-center justify-center">
      <div className="max-w-lg w-full">
        
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
            {/* This is the blue back button */}
            <button
              onClick={() => router.back()}
              className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 transition-colors mr-4"
              aria-label="Go back"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-3xl font-bold text-gray-800">Add New Table</h1>
              <p className="text-gray-600 mt-1">Create a new table and generate its QR code.</p>
            </div>
        </div>

        <form onSubmit={handleSubmit} className="bg-white p-8 rounded-2xl shadow-md space-y-6">
          <div>
            <label htmlFor="name" className="block text-lg font-semibold text-gray-700 mb-2">
              Table Name
            </label>
            <input
  id="tableNumber"
  type="text"
  name="tableNumber"
  value={tableNumber ?? ""}
  onChange={(e) => setTableNumber(Number(e.target.value))}
  className="w-full text-lg p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
  placeholder="e.g., Patio Table 4"
  required
/>

          </div>
          <div className="flex justify-end gap-4 pt-4 border-t border-gray-200">
              <button 
                type="button" 
                onClick={() => router.back()} 
                className="px-6 py-3 border-2 border-gray-300 rounded-xl text-gray-700 font-semibold hover:bg-gray-100 hover:border-gray-400 transition-all"
              >
                  Cancel
              </button>
              <button 
                
                type="submit" 
                disabled={isSubmitting} 
                className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
              >
                  {isSubmitting ? 'Saving...' : 'Save Table'}
              </button>
          </div>
        </form>
        <button
                onClick={()=>url && handleDownloadQR(url)}
              >
                Download QR
              </button>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\tables\[id]\edit\page.tsx -----


----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\tables\page.tsx -----

'use client';

import Link from 'next/link';
import { useTables } from '@/lib/hooks/useTables';
import QrCodeDisplay from '@/components/tables/QrCodeDisplay';
import { Plus, Trash2, Edit } from 'lucide-react';

export default function TablesPage() {
  const { tables, loading, deleteTable } = useTables();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="w-12 h-12 border-4 border-indigo-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Table Management</h1>
            <p className="text-gray-600 mt-1">Add, view, and manage your restaurant's tables and QR codes.</p>
          </div>
          <Link 
            href="/dashboard/tables/add" 
            className="flex items-center gap-2 bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 transition-all shadow-md hover:shadow-lg"
          >
            <Plus size={20} />
            Add New Table
          </Link>
        </div>
        
        {tables.length === 0 ? (
          <div className="text-center bg-white p-12 rounded-2xl shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              <h2 className="mt-4 text-2xl font-semibold text-gray-800">No tables found</h2>
              <p className="text-gray-500 mt-2">Get started by adding your first table to generate a QR code.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {tables.map(table => (
              <div key={table.id} className="bg-white p-6 rounded-2xl shadow-md flex flex-col justify-between transition-all hover:shadow-xl hover:-translate-y-1">
                <h2 className="text-xl font-bold text-center text-gray-800 mb-4">{table.table_number}</h2>
                {table.qr_code_url && table.qr_code_url !== 'generating...' ? (
                  <QrCodeDisplay url={table.qr_code_url} tableName={table.table_number} />
                ) : (
                  <div className="flex items-center justify-center h-40 text-gray-500">
                    <div className="w-6 h-6 border-2 border-gray-300 border-t-transparent rounded-full animate-spin"></div>
                  </div>
                )}
                 <div className="flex justify-between items-center mt-4 pt-4 border-t">
                    <Link href={`/dashboard/tables/${table.id}/edit`} className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium transition-colors">
                        <Edit size={14} />
                        Edit
                    </Link>
                    <button onClick={() => deleteTable(table.id)} className="flex items-center gap-2 text-red-500 hover:text-red-700 font-medium transition-colors">
                        <Trash2 size={14} />
                        Delete
                    </button>
                 </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\layout.tsx -----

'use client';

import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { Home, UtensilsCrossed, SquareKanban, LogOut } from 'lucide-react';
import { logout } from '@/lib/auth/logout';

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const pathname = usePathname();
  const router = useRouter();

  const handleLogout = async () => {
    await logout();
    router.push('/signup/login');
  };

  const navItems = [
    { href: '/dashboard', label: 'Home', icon: Home },
    { href: '/dashboard/menu', label: 'Menu', icon: UtensilsCrossed },
    { href: '/dashboard/tables', label: 'Tables', icon: SquareKanban },
  ];

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Sidebar */}
      <aside className="w-64 bg-white shadow-md flex flex-col">
        <div className="p-6 text-2xl font-bold text-indigo-600 border-b">
          QuickBite QR
        </div>
        <nav className="flex-1 p-4 space-y-2">
          {navItems.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-all text-lg font-medium ${
                pathname === item.href
                  ? 'bg-indigo-600 text-white shadow-md'
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
            >
              <item.icon size={24} />
              {item.label}
            </Link>
          ))}
        </nav>
        <div className="p-4 border-t">
          <button
            onClick={handleLogout}
            className="flex items-center gap-3 w-full px-4 py-3 rounded-lg text-lg font-medium text-red-500 hover:bg-red-50"
          >
            <LogOut size={24} />
            Log Out
          </button>
        </div>
      </aside>

      {/* Main Content Area */}
      <main className="flex-1 p-8 overflow-auto">
        {children}
      </main>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\page.tsx -----

'use client';

import { useMenuItems } from '@/lib/hooks/useMenuItems';
import { useTables } from '@/lib/hooks/useTables';
import { useProtectedRoute } from '@/lib/hooks/useProtectedRoute';
import { UtensilsCrossed, SquareKanban, Loader2 } from 'lucide-react';

const StatCard = ({ title, value, icon: Icon, loading }: { title: string, value: number, icon: React.ElementType, loading: boolean }) => (
  <div className="bg-white p-6 rounded-2xl shadow-md flex items-center gap-6 transition-all hover:shadow-xl hover:-translate-y-1">
    <div className="bg-indigo-100 p-4 rounded-xl">
      <Icon className="h-8 w-8 text-indigo-600" />
    </div>
    <div>
      <p className="text-lg text-gray-600">{title}</p>
      {loading ? (
        <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
      ) : (
        <p className="text-4xl font-bold text-gray-800">{value}</p>
      )}
    </div>
  </div>
);

export default function DashboardHomePage() {
  const { loading: authLoading } = useProtectedRoute();
  const { menuItems, loading: menuLoading } = useMenuItems();
  const { tables, loading: tablesLoading } = useTables();

  // You would fetch the real restaurant name after setting up user profiles
  const restaurantName = "Your Restaurant"; 

  if (authLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
      </div>
    );
  }

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-4xl font-bold text-gray-800">Welcome to {restaurantName}!</h1>
        <p className="text-gray-600 mt-2 text-lg">Here's a summary of your restaurant's activity.</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <StatCard 
          title="Total Menu Items" 
          value={menuItems.length} 
          icon={UtensilsCrossed} 
          loading={menuLoading} 
        />
        <StatCard 
          title="Total Tables" 
          value={tables.length} 
          icon={SquareKanban} 
          loading={tablesLoading} 
        />
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\login\page.tsx -----

'use client'
import { useState } from 'react'
import { loginWithEmail } from '@/lib/auth/login'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { Loader2 } from 'lucide-react'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)
    setIsSubmitting(true)
    
    const { error } = await loginWithEmail(email, password)
    if (error) {
      setError(error.message)
      setIsSubmitting(false)
    } else {
      router.push('/dashboard')
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-4 sm:p-8 flex items-center justify-center">
      <div className="max-w-md w-full">
        <div className="bg-white rounded-2xl shadow-md p-8">
          <h1 className="text-3xl font-bold text-gray-800 text-center">Welcome Back!</h1>
          <p className="text-gray-600 mt-2 text-center">Log in to manage your restaurant.</p>

          <form onSubmit={handleLogin} className="mt-8 space-y-6">
            {/* --- MODIFICATION: Added 'text-gray-900' --- */}
            <input
              className="w-full p-3 border-2 rounded-lg text-gray-900"
              placeholder="Email"
              type="email"
              value={email}
              onChange={e => setEmail(e.target.value)}
              required
            />
            {/* --- MODIFICATION: Added 'text-gray-900' --- */}
            <input
              className="w-full p-3 border-2 rounded-lg text-gray-900"
              placeholder="Password"
              type="password"
              value={password}
              onChange={e => setPassword(e.target.value)}
              required
            />

            {error && <p className="text-red-500 text-center">{error}</p>}

            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold p-3 rounded-lg flex items-center justify-center disabled:opacity-50"
            >
              {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
              {isSubmitting ? 'Logging In...' : 'Log In'}
            </button>
            <p className="text-center text-gray-600">
              Don't have an account?{' '}
              <Link href="/signup" className="font-semibold text-indigo-600 hover:underline">
                Sign Up
              </Link>
            </p>
          </form>
        </div>
      </div>
    </div>
  )
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\signup\page.tsx -----

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { signUpWithRestaurant, SignUpData } from '@/lib/auth/signup';
import { Loader2 } from 'lucide-react';

export default function SignUpPage() {
  const [formData, setFormData] = useState<SignUpData>({
    email: '',
    password: '',
    owner_name: '',
    restaurant_name: '',
    phone: '',
    address: '',
    upi_id: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const router = useRouter();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setIsSubmitting(true);

    try {
      await signUpWithRestaurant(formData);
      setSuccess(true);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-4 sm:p-8 flex items-center justify-center">
      <div className="max-w-2xl w-full">
        <div className="bg-white rounded-2xl shadow-md p-8">
          <h1 className="text-3xl font-bold text-gray-800 text-center">Create Your Account</h1>
          <p className="text-gray-600 mt-2 text-center">Set up your restaurant profile to get started.</p>

          {success ? (
            <div className="text-center py-12">
              <h2 className="text-2xl font-semibold text-green-600">Registration Successful!</h2>
              <p className="mt-2 text-gray-700">Please check your email to confirm your account before logging in.</p>
              <Link href="/login" className="mt-6 inline-block bg-indigo-600 text-white font-semibold px-6 py-3 rounded-lg">
                Go to Login
              </Link>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="mt-8 space-y-6">
              {/* --- MODIFICATION: Added 'text-gray-900' to all inputs --- */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <input name="owner_name" type="text" placeholder="Owner's Name" value={formData.owner_name} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
                <input name="restaurant_name" type="text" placeholder="Restaurant Name" value={formData.restaurant_name} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
                <input name="email" type="email" placeholder="Email Address" value={formData.email} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
                <input name="password" type="password" placeholder="Password" value={formData.password} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
                <input name="phone" type="tel" placeholder="Phone Number" value={formData.phone} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
                <input name="address" type="text" placeholder="Address" value={formData.address} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
              </div>
              <input name="upi_id" type="text" placeholder="UPI ID (for payments)" value={formData.upi_id} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" />
              
              {error && <p className="text-red-500 text-center">{error}</p>}

              <button type="submit" disabled={isSubmitting} className="w-full bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold p-3 rounded-lg flex items-center justify-center disabled:opacity-50">
                {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                {isSubmitting ? 'Registering...' : 'Create Account'}
              </button>
              <p className="text-center text-gray-600">
                Already have an account?{' '}
                <Link href="/login" className="font-semibold text-indigo-600 hover:underline">
                  Log In
                </Link>
              </p>
            </form>
          )}
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\test\page.tsx -----

import { supabase } from '@/lib/supabase/client'

export default async function TestPage() {
  const { data, error } = await supabase.from('restaurants').select('*').limit(1)

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold">Supabase Test</h1>
      {error && <p>Error: {error.message}</p>}
      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
    </div>
  )
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\layout.tsx -----

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

// âœ… Mark AuthListener as a client component if it uses browser APIs
import AuthListener from "@/components/AuthListener";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body

      >
        {/* âœ… Wrap client-only logic in a dedicated client component */}
        <AuthListener />
        {children}
      </body>
    </html>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\middleware.ts -----

// middleware.ts
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });
  await supabase.auth.getSession();
  return res;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\page.tsx -----

import Image from "next/image";

export default function Home() {
  return (
    <h1>QuickBiteQR</h1>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\DeleteConfirmation.tsx -----

// src/components/menu/DeleteConfirmation.tsx
interface DeleteConfirmationProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  itemName: string;
}

export default function DeleteConfirmation({
  isOpen,
  onClose,
  onConfirm,
  itemName
}: DeleteConfirmationProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-2xl p-6 max-w-md w-full">
        <div className="text-center mb-4">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </div>
        </div>
        <h3 className="text-lg font-semibold text-gray-800 text-center mb-2">Confirm Deletion</h3>
        <p className="text-gray-600 text-center mb-6">
          Are you sure you want to delete &quot;{itemName}&quot;? This action cannot be undone.
        </p>
        <div className="flex justify-center space-x-4">
          <button
            onClick={onClose}
            className="px-5 py-2 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-100 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="px-5 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\ImageUpload.tsx -----

'use client';

import { useState, useCallback } from 'react';
import Image from "next/image";
import { useDropzone } from "react-dropzone";
import { useUploadThing } from "@/lib/uploadthing";
import { compressImage } from '@/lib/utils/image-compressor'; // 1. Import the new function
import { X, UploadCloud, Loader2, AlertTriangle } from "lucide-react";

interface ImageUploadProps {
  onChange: (url?: string) => void;
  value?: string;
}

export default function ImageUpload({ onChange, value }: ImageUploadProps) {
  const [preview, setPreview] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);

  const { startUpload } = useUploadThing(
    "menuItemImage",
    {
      onClientUploadComplete: (res:{url:string}[]) => {
        setIsUploading(false);
        setUploadError(null);
        onChange(res?.[0].url);
        setPreview(null);
      },
      onUploadError: (error: Error) => {
        setIsUploading(false);
        setPreview(null);
        setUploadError("Upload failed. Please try again.");
        console.error("Upload failed:", error);
      },
    }
  );

  // 2. Simplify the onDrop handler
  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    setUploadError(null);
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0];
      
      setPreview(URL.createObjectURL(file));
      setIsUploading(true);

      try {
        // Use the utility function to compress the image
        const compressedFile = await compressImage(file);
        
        // Upload the compressed file
        await startUpload([compressedFile]);

      } catch (error: any) {
        setUploadError(error.message || 'Compression failed.');
        setIsUploading(false);
        setPreview(null);
      }
    }
  }, [startUpload]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { 'image/*': ['.jpeg', '.jpg', '.png'] },
    multiple: false,
  });

  // The rest of the component's JSX remains unchanged...
  if (value) {
    return (
      <div className="relative h-48 w-full md:w-96">
        <Image
          fill
          src={value}
          alt="Uploaded Image"
          className="rounded-lg object-cover"
        />
        <button
          onClick={() => onChange()}
          className="bg-red-500 text-white p-1 rounded-full absolute -top-2 -right-2 shadow-sm"
          type="button"
        >
          <X className="h-4 w-4" />
        </button>
      </div>
    );
  }

  if (isUploading || preview) {
    return (
      <div className="relative h-48 w-full md:w-96">
        {preview && (
          <Image
            fill
            src={preview}
            alt="Image Preview"
            className="rounded-lg object-cover"
            onLoad={() => {
              if (preview) URL.revokeObjectURL(preview);
            }}
          />
        )}
        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded-lg">
          <Loader2 className="h-8 w-8 text-white animate-spin" />
        </div>
      </div>
    );
  }

  return (
    <div
      {...getRootProps()}
      className={`
        w-full md:w-96 h-48 border-2 border-dashed rounded-lg flex items-center justify-center text-center cursor-pointer
        ${isDragActive ? 'border-indigo-600 bg-indigo-50' : 'border-gray-300'}
        ${uploadError ? 'border-red-500 bg-red-50' : ''}
      `}
    >
      <input {...getInputProps()} />
      <div className="text-gray-500">
        {uploadError ? (
          <div className="text-red-600">
            <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
            <p className="text-sm font-semibold">{uploadError}</p>
          </div>
        ) : (
          <>
            <UploadCloud className="h-8 w-8 mx-auto mb-2" />
            <p className="text-sm">{isDragActive ? 'Drop the image here' : 'Click or drag to upload'}</p>
          </>
        )}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\MenuItemCard.tsx -----

import Image from 'next/image';
import Link from 'next/link';
import { MenuItem } from '@/types/menu'; // Ensure this path is correct

interface MenuItemCardProps {
  item: MenuItem;
  onEdit: string;
  onDelete: () => void;
}

// Helper to format price
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(price);
};

export default function MenuItemCard({ item, onEdit, onDelete }: MenuItemCardProps) {
  return (
    <div className="bg-white rounded-2xl shadow-md overflow-hidden transition-all hover:shadow-xl hover:-translate-y-1 flex flex-col">
      {/* Image Section */}
      <div className="relative h-40 w-full bg-gray-100">
        {item.photo_url ? (
          <Image
            src={item.photo_url}
            alt={item.name}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-300 group-hover:scale-105"
          />
        ) : (
          // Placeholder for items without an image
          <div className="flex items-center justify-center h-full">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
        )}
      </div>

      {/* Content Section */}
      <div className="p-4 flex-grow">
        <h3 className="text-lg font-bold text-gray-800 truncate">{item.name}</h3>
        <p className="text-sm text-gray-600 mt-1 h-10 overflow-hidden">{item.description}</p>
        <p className="text-xl font-bold text-indigo-600 mt-3">{formatPrice(item.price)}</p>
      </div>

      {/* Actions Section */}
      <div className="p-3 bg-gray-50 border-t flex justify-end gap-2">
        <Link href={onEdit} className="px-4 py-1.5 rounded-md text-sm font-semibold text-gray-700 bg-white border border-gray-300 hover:bg-gray-100 transition-colors">
          Edit
        </Link>
        <button
          onClick={onDelete}
          className="px-4 py-1.5 rounded-md text-sm font-semibold text-white bg-red-500 hover:bg-red-600 transition-colors"
        >
          Delete
        </button>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\MenuItemForm.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { MenuItem } from '@/types/menu';
import ImageUpload from './ImageUpload';

interface MenuItemFormProps {
  initialData?: MenuItem;
  onSubmit: (data: Omit<MenuItem, 'id' | 'restaurant_id' | 'created_at'>) => void;
  isSubmitting: boolean;
  onCancel: () => void;
}

export default function MenuItemForm({
  initialData,
  onSubmit,
  isSubmitting,
  onCancel
}: MenuItemFormProps) {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    photo_url: '',
    available: true,
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (initialData) {
      setFormData({
        name: initialData.name,
        description: initialData.description,
        price: String(initialData.price),
        photo_url: initialData.photo_url || '',
        available: initialData.available ?? true,
      });
    }
  }, [initialData]);
  
  const validate = () => {
    const newErrors: { [key: string]: string } = {};
    if (!formData.name.trim()) newErrors.name = 'Name is required.';
    if (!formData.description.trim()) newErrors.description = 'Description is required.';
    if (!formData.price) newErrors.price = 'Price is required.';
    const priceValue = parseFloat(formData.price);
    if (isNaN(priceValue) || priceValue <= 0) {
      newErrors.price = 'Please enter a valid, positive price.';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const { checked } = e.target as HTMLInputElement;
      setFormData(prev => ({ ...prev, [name]: checked }));
      return;
    }
    
    if (name === 'price') {
      const numericValue = value.replace(/[^0-9.]/g, '');
      const decimalCount = (numericValue.match(/\./g) || []).length;
      const sanitizedValue = decimalCount > 1 ? numericValue.substring(0, numericValue.lastIndexOf('.')) : numericValue;
      setFormData(prev => ({ ...prev, [name]: sanitizedValue }));
      return;
    }
    
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validate()) {
      onSubmit({
        ...formData,
        price: parseFloat(formData.price),
      });
    }
  };

  return (
    <div className="bg-white rounded-2xl shadow-md overflow-hidden">
      <form onSubmit={handleSubmit} className="p-6 md:p-8 space-y-6">
        {/* Image Upload */}
        <div className="flex flex-col items-center">
          <label className="w-full text-lg font-semibold text-gray-800 mb-2">Item Image</label>
          <ImageUpload
            value={formData.photo_url}
            onChange={(url) => setFormData(prev => ({ ...prev, photo_url: url || '' }))}
          />
        </div>
        
        {/* Name */}
        <div>
          <label htmlFor="name" className="block text-lg font-semibold text-gray-800 mb-2">Name *</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="w-full p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
          />
          {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
        </div>

        {/* Description */}
        <div>
          <label htmlFor="description" className="block text-lg font-semibold text-gray-800 mb-2">Description *</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            rows={4}
            className="w-full p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
          />
          {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Price */}
          <div>
            <label htmlFor="price" className="block text-lg font-semibold text-gray-800 mb-2">Price ($) *</label>
            <input
              type="text"
              id="price"
              name="price"
              value={formData.price}
              onChange={handleChange}
              className="w-full p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
              placeholder="0.00"
              inputMode="decimal"
            />
            {errors.price && <p className="text-red-500 text-sm mt-1">{errors.price}</p>}
          </div>
        </div>
            
        {/* Available Toggle */}
        <div className="flex items-center justify-between bg-gray-50 p-4 rounded-xl border-2 border-gray-200">
          <label htmlFor="available" className="text-lg font-semibold text-gray-800">Item Available</label>
          <label className="relative inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              id="available"
              name="available"
              checked={formData.available}
              onChange={handleChange}
              className="sr-only peer"
            />
            <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-indigo-300 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600"></div>
          </label>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
          <button
            type="button"
            onClick={onCancel}
            className="px-6 py-3 border-2 border-gray-300 rounded-xl font-semibold text-gray-700 hover:bg-gray-100 transition-all"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-6 py-3 bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold rounded-xl hover:from-indigo-600 hover:to-blue-600 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
          >
            {isSubmitting ? 'Saving...' : 'Save Item'}
          </button>
        </div>
      </form>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\tables\QrCodeDisplay.tsx -----

'use client';

import Image from 'next/image'; // Use the Next.js Image component

interface QrCodeDisplayProps {
  url: string;
  tableName: string;
}

export default function QrCodeDisplay({ url, tableName }: QrCodeDisplayProps) {
  // This function now simply creates a link to the image URL for downloading
  const downloadQRCode = () => {
    const link = document.createElement('a');
    link.href = url;
    // Add the 'download' attribute to prompt a download
    link.setAttribute('download', `${tableName.replace(/\s+/g, '-')}-qr-code.png`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="flex flex-col items-center gap-4 p-4 border rounded-lg bg-gray-50">
      {/* Display the QR code using a standard Image component */}
      <div className="relative h-32 w-32">
        <Image 
          src={url} 
          alt={`QR Code for ${tableName}`} 
          layout="fill" 
          objectFit="contain" 
        />
      </div>
      <button
        onClick={downloadQRCode}
        className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 w-full font-semibold transition-colors"
      >
        Download
      </button>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\alert.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\avatar.tsx -----

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\badge.tsx -----

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\button.tsx -----

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\card.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\input.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\label.tsx -----

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\separator.tsx -----

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\skeleton.tsx -----

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\tabs.tsx -----

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\textarea.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\AuthListener.tsx -----

'use client'
import { useEffect } from 'react'
import { supabase }  from '@/lib/supabase/client'
import { useRouter } from 'next/navigation'

export default function AuthListener() {
  const router = useRouter()

  useEffect(() => {
    const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('Auth event:', event)

      if (event === 'SIGNED_IN') {
        router.push('/dashboard') // or wherever you want
      }

      if (event === 'SIGNED_OUT') {
        router.push('/login')
      }

      // You can also handle TOKEN_REFRESHED, USER_UPDATED, etc.
    })

    return () => {
      authListener?.subscription.unsubscribe()
    }
  }, [])

  return null
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\LiveOrdersComponent.tsx -----

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { RefreshCw, Clock } from 'lucide-react';
import { OrderItem, OrderItemStatus } from '@/app/dashboard/orders/LiveOrders';

interface LiveOrdersComponentProps {
  fetchLiveOrders: () => Promise<void>;
  refreshing: boolean;
  liveOrders: OrderItem[] | null;
  filteredOrders: OrderItem[] | null;
  activeStatus: OrderItemStatus | 'All';
  setActiveStatus: (status: OrderItemStatus | 'All') => void;
  getStatusIcon: (status: OrderItemStatus | null) => React.ReactNode;
  getStatusVariant: (status: OrderItemStatus | null) => 'default' | 'secondary' | 'destructive';
  formatDate: (dateString: string) => string;
  getTotalPrice: (orders: OrderItem[] | null) => number;
}

const LiveOrdersComponent: React.FC<LiveOrdersComponentProps> = ({
  fetchLiveOrders,
  refreshing,
  liveOrders,
  filteredOrders,
  activeStatus,
  setActiveStatus,
  getStatusIcon,
  getStatusVariant,
  formatDate,
  getTotalPrice
}) => {
  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Live Orders</h1>
          <p className="text-muted-foreground">Manage and track your active orders in real-time</p>
        </div>
        <Button
          onClick={fetchLiveOrders}
          disabled={refreshing}
          variant="outline"
          className="flex items-center gap-2"
        >
          <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
          Refresh
        </Button>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Total Orders</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{liveOrders?.length || 0}</div>
            <p className="text-xs text-muted-foreground">Active orders</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Pending Orders</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {liveOrders?.filter(order => order.status === 'Pending').length || 0}
            </div>
            <p className="text-xs text-muted-foreground">Awaiting confirmation</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Total Value</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${getTotalPrice(liveOrders).toFixed(2)}</div>
            <p className="text-xs text-muted-foreground">From active orders</p>
          </CardContent>
        </Card>
      </div>

      {/* Status Tabs */}
      <Tabs value={activeStatus} onValueChange={(value) => setActiveStatus(value as OrderItemStatus | 'All')}>
        <TabsList className="grid w-full grid-cols-5 md:grid-cols-9 mb-6">
          <TabsTrigger value="All">All</TabsTrigger>
          <TabsTrigger value="Pending">Pending</TabsTrigger>
          <TabsTrigger value="Confirm">Confirmed</TabsTrigger>
          <TabsTrigger value="Preparing">Preparing</TabsTrigger>
          <TabsTrigger value="Ready">Ready</TabsTrigger>
        </TabsList>

        <div className="mt-0">
          {filteredOrders && filteredOrders.length > 0 ? (
            <div className="grid grid-cols-1 gap-4">
              {filteredOrders.map((order) => (
                <Card key={order.id} className="overflow-hidden">
                  <CardHeader className="bg-muted/50 py-3">
                    <div className="flex justify-between items-center">
                      <div>
                        <CardTitle className="text-lg">
                          Order #{order.order.id.slice(-6)}
                          {/* âœ… Updated to use table_number instead of table_id for display */}
                          {order.order.table_number && ` â€¢ Table ${order.order.table_number}`}
                        </CardTitle>
                        <CardDescription>
                          {order.order.restaurant.name} â€¢ Placed at {formatDate(order.created_at)}
                        </CardDescription>
                      </div>
                      <Badge variant={getStatusVariant(order.status)} className="flex items-center gap-1">
                        {getStatusIcon(order.status)}
                        {order.status}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="py-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-semibold">{order.menu_item?.name || 'Menu Item'}</h3>
                        <p className="text-sm text-muted-foreground">Quantity: {order.quantity}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold">${(order.price * order.quantity).toFixed(2)}</p>
                        <p className="text-sm text-muted-foreground">${order.price.toFixed(2)} each</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="bg-muted rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <Clock className="h-8 w-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium mb-2">No orders found</h3>
              <p className="text-muted-foreground">
                {activeStatus === 'All'
                  ? "You don't have any active orders at the moment."
                  : `You don't have any orders with status "${activeStatus}".`}
              </p>
            </div>
          )}
        </div>
      </Tabs>
    </div>
  );
};

export default LiveOrdersComponent;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\RestaurantProfile.tsx -----

'use client';
import React, { useState } from 'react';
import { MapPin, Phone, Mail, User, Calendar, QrCode, CreditCard, Edit, Save, X, Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Restaurant, ValidationErrors, RestaurantProfileProps } from '@/lib/types/types';
import {formatDate, getInitials}  from '@/lib/types/utils';


const RestaurantProfile: React.FC<RestaurantProfileProps> = ({ restaurant, onUpdate }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [notification, setNotification] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  const [formData, setFormData] = useState({
    owner_name: restaurant.owner_name,
    restaurant_name: restaurant.restaurant_name,
    email: restaurant.email,
    phone: restaurant.phone,
    address: restaurant.address,
    upi_id: restaurant.upi_id,
    logo_url: restaurant.logo_url || "",
  });

  const [errors, setErrors] = useState<ValidationErrors>({});

  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };
  const validatePhone = (phone: string): boolean => {
    const phoneRegex = /^\+?[1-9]\d{9,14}$/;
    return phoneRegex.test(phone);
  };
  const validateUpiId = (upiId: string): boolean => {
    const upiRegex = /^[\w.-]+@[\w.-]+$/;
    return upiRegex.test(upiId);
  };
  const validateUrl = (url: string): boolean => {
    if (!url) return true;
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };
  const validateForm = (): boolean => {
    const newErrors: ValidationErrors = {};
    if (formData.owner_name.length < 2) {
      newErrors.owner_name = "Owner name must be at least 2 characters";
    }
    if (formData.restaurant_name.length < 2) {
      newErrors.restaurant_name = "Restaurant name must be at least 2 characters";
    }
    if (!validateEmail(formData.email)) {
      newErrors.email = "Invalid email address";
    }
    if (!validatePhone(formData.phone)) {
      newErrors.phone = "Invalid phone number";
    }
    if (formData.address.length < 10) {
      newErrors.address = "Address must be at least 10 characters";
    }
    if (!validateUpiId(formData.upi_id)) {
      newErrors.upi_id = "Invalid UPI ID format";
    }
    if (formData.logo_url && !validateUrl(formData.logo_url)) {
      newErrors.logo_url = "Invalid logo URL";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const showNotification = (type: 'success' | 'error', message: string) => {
    setNotification({ type, message });
    setTimeout(() => setNotification(null), 5000);
  };
  const handleEdit = () => {
    setIsEditing(true);
    setFormData({
      owner_name: restaurant.owner_name,
      restaurant_name: restaurant.restaurant_name,
      email: restaurant.email,
      phone: restaurant.phone,
      address: restaurant.address,
      upi_id: restaurant.upi_id,
      logo_url: restaurant.logo_url || "",
    });
    setErrors({});
    setNotification(null);
  };
  const handleCancel = () => {
    setIsEditing(false);
    setFormData({
      owner_name: restaurant.owner_name,
      restaurant_name: restaurant.restaurant_name,
      email: restaurant.email,
      phone: restaurant.phone,
      address: restaurant.address,
      upi_id: restaurant.upi_id,
      logo_url: restaurant.logo_url || "",
    });
    setErrors({});
    setNotification(null);
  };
  const handleInputChange = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      showNotification('error', 'Please fix the validation errors before submitting.');
      return;
    }
    if (!onUpdate) return;

    setIsLoading(true);
    try {
      const qr_url = formData.upi_id !== restaurant.upi_id
         ? `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=upi://pay?pa=${encodeURIComponent(formData.upi_id)}&pn=${encodeURIComponent(formData.restaurant_name)}`
        : restaurant.qr_url;
      await onUpdate({
        ...formData,
        qr_url,
        logo_url: formData.logo_url || null,
      });
      setIsEditing(false);
      showNotification('success', 'Your restaurant profile has been successfully updated.');
    } catch (error) {
      showNotification('error', 'There was an error updating your profile. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50 p-4 sm:p-6">
      <div className="mx-auto max-w-6xl space-y-6">
        {notification && (
          <Alert className={notification.type === 'success' ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>
            {notification.type === 'success' ? (
              <CheckCircle className="h-4 w-4 text-green-600" />
            ) : (
              <AlertCircle className="h-4 w-4 text-red-600" />
            )}
            <AlertDescription className={notification.type === 'success' ? 'text-green-800' : 'text-red-800'}>
              {notification.message}
            </AlertDescription>
          </Alert>
        )}
        <Card className="overflow-hidden border-0 shadow-xl">
          <div className="bg-gradient-to-r from-orange-500 to-red-500 p-6 text-white">
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <Avatar className="h-20 w-20 border-4 border-white shadow-lg">
                  <AvatarImage src={restaurant.logo_url || ""} alt={restaurant.restaurant_name} />
                  <AvatarFallback className="text-orange-500 text-lg font-bold">
                    {getInitials(restaurant.restaurant_name)}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">{restaurant.restaurant_name}</h1>
                  <p className="text-orange-100 text-lg">Owner: {restaurant.owner_name}</p>
                  <Badge variant="secondary" className="mt-2">
                    <Calendar className="mr-1 h-3 w-3" />
                    Since {formatDate(restaurant.created_at)}
                  </Badge>
                </div>
              </div>
              <Button
                variant="secondary"
                size="sm"
                onClick={isEditing ? handleCancel : handleEdit}
                className="bg-white/20 hover:bg-white/30 border-0"
                disabled={isLoading}
              >
                {isEditing ? (
                  <>
                    <X className="mr-2 h-4 w-4" />
                    Cancel
                  </>
                ) : (
                  <>
                    <Edit className="mr-2 h-4 w-4" />
                    Edit Profile
                  </>
                )}
              </Button>
            </div>
          </div>
        </Card>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5 text-orange-500" />
                  Restaurant Information
                </CardTitle>
                <CardDescription>
                  {isEditing ? "Update your restaurant details below" : "Your current restaurant information"}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isEditing ? (
                  <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Restaurant Name</label>
                        <Input
                          placeholder="Enter restaurant name"
                          value={formData.restaurant_name}
                          onChange={(e) => handleInputChange('restaurant_name', e.target.value)}
                          className={errors.restaurant_name ? 'border-red-500' : ''}
                        />
                        {errors.restaurant_name && (
                          <p className="text-sm text-red-500">{errors.restaurant_name}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Owner Name</label>
                        <Input
                          placeholder="Enter owner name"
                          value={formData.owner_name}
                          onChange={(e) => handleInputChange('owner_name', e.target.value)}
                          className={errors.owner_name ? 'border-red-500' : ''}
                        />
                        {errors.owner_name && (
                          <p className="text-sm text-red-500">{errors.owner_name}</p>
                        )}
                      </div>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Email Address</label>
                        <Input
                          type="email"
                          placeholder="Enter email address"
                          value={formData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          className={errors.email ? 'border-red-500' : ''}
                        />
                        {errors.email && (
                          <p className="text-sm text-red-500">{errors.email}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Phone Number</label>
                        <Input
                          placeholder="Enter phone number"
                          value={formData.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          className={errors.phone ? 'border-red-500' : ''}
                        />
                        {errors.phone && (
                          <p className="text-sm text-red-500">{errors.phone}</p>
                        )}
                      </div>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Restaurant Address</label>
                      <Textarea
                         placeholder="Enter complete restaurant address"
                         className={`resize-none ${errors.address ? 'border-red-500' : ''}`}
                        value={formData.address}
                        onChange={(e) => handleInputChange('address', e.target.value)}
                      />
                      {errors.address && (
                        <p className="text-sm text-red-500">{errors.address}</p>
                      )}
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">UPI ID</label>
                        <Input
                          placeholder="yourname@paytm"
                          value={formData.upi_id}
                          onChange={(e) => handleInputChange('upi_id', e.target.value)}
                          className={errors.upi_id ? 'border-red-500' : ''}
                        />
                        {errors.upi_id && (
                          <p className="text-sm text-red-500">{errors.upi_id}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Logo URL (Optional)</label>
                        <Input
                          placeholder="https://example.com/logo.png"
                          value={formData.logo_url}
                          onChange={(e) => handleInputChange('logo_url', e.target.value)}
                          className={errors.logo_url ? 'border-red-500' : ''}
                        />
                        {errors.logo_url && (
                          <p className="text-sm text-red-500">{errors.logo_url}</p>
                        )}
                      </div>
                    </div>
                    <Separator />
                    <div className="flex justify-end gap-3">
                      <Button
                        type="button"
                        variant="outline"
                        onClick={handleCancel}
                        disabled={isLoading}
                      >
                        Cancel
                      </Button>
                      <Button
                         type="submit"
                         disabled={isLoading}
                         className="bg-orange-500 hover:bg-orange-600"
                      >
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          <>
                            <Save className="mr-2 h-4 w-4" />
                            Save Changes
                          </>
                        )}
                      </Button>
                    </div>
                  </form>
                ) : (
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <User className="h-4 w-4" />
                          Owner Name
                        </div>
                        <p className="font-medium">{restaurant.owner_name}</p>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Phone className="h-4 w-4" />
                          Phone
                        </div>
                        <p className="font-medium">
                          <a href={`tel:${restaurant.phone}`} className="hover:text-orange-500 transition-colors">
                            {restaurant.phone}
                          </a>
                        </p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Mail className="h-4 w-4" />
                        Email Address
                      </div>
                      <p className="font-medium">
                        <a href={`mailto:${restaurant.email}`} className="hover:text-orange-500 transition-colors">
                          {restaurant.email}
                        </a>
                      </p>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <MapPin className="h-4 w-4" />
                        Restaurant Address
                      </div>
                      <p className="font-medium leading-relaxed">{restaurant.address}</p>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <CreditCard className="h-4 w-4" />
                        UPI ID
                      </div>
                      <Badge variant="outline" className="font-mono">
                        {restaurant.upi_id}
                      </Badge>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
          <div className="space-y-6">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <QrCode className="h-5 w-5 text-orange-500" />
                  Payment QR Code
                </CardTitle>
                <CardDescription>
                  Customers can scan this QR to pay via UPI
                </CardDescription>
              </CardHeader>
              <CardContent className="text-center">
                <div className="inline-block p-4 bg-gray-50 rounded-lg">
                  <img
                     src={restaurant.qr_url}
                     alt="Payment QR Code"
                     className="w-40 h-40 mx-auto"
                  />
                </div>
                <div className="mt-4 space-y-2">
                  <Badge variant="outline" className="font-mono text-xs">
                    {restaurant.upi_id}
                  </Badge>
                  <p className="text-sm text-muted-foreground">
                    UPI Payment Gateway
                  </p>
                </div>
              </CardContent>
            </Card>
            <Card className="shadow-lg bg-gradient-to-br from-orange-500 to-red-500 text-white border-0">
              <CardHeader>
                <CardTitle>Restaurant ID</CardTitle>
                <CardDescription className="text-orange-100">
                  Unique identifier for your restaurant
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <Badge variant="secondary" className="font-mono text-xs break-all bg-white/20 hover:bg-white/30">
                    {restaurant.id}
                  </Badge>
                  <div className="text-center pt-2">
                    <div className="text-lg font-bold">{restaurant.restaurant_name}</div>
                    <div className="text-orange-100 text-sm">Digital Profile</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};
export default RestaurantProfile;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\generateQR.ts -----

// lib/api.ts
export const generateQR = async (restaurantId: string, tableNumber: number) => {
  const res = await fetch("/api/create-table", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ restaurantId, tableNumber }),
  });

  if (!res.ok) {
  const errorText = await res.text();
  console.error("Supabase function failed:", res.status, errorText);
  throw new Error(`Failed to generate QR: ${errorText}`);
}

  const { url } = await res.json();
  return url;
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\menu.ts -----

import { supabase } from '@/lib/supabase/client';
import { MenuItem as MenuItemType } from '@/types/menu';

// Extend the base MenuItem type to include the required restaurant_id
export interface MenuItem extends MenuItemType {
  restaurant_id: string;
}

// Define the type for creating a new menu item
export type NewMenuItem = Omit<MenuItem, 'id'>;

// READ: Fetches menu items (will be automatically filtered by RLS)
export const getMenuItems = async (): Promise<MenuItem[]> => {
  const { data, error } = await supabase.from('menu_items').select('*');
  if (error) throw new Error(error.message);
  return data || [];
};

// CREATE: Adds a new menu item to the database
export const addMenuItem = async (itemData: NewMenuItem): Promise<MenuItem> => {
  const { data, error } = await supabase.from('menu_items').insert([itemData]).select().single();
  if (error) throw new Error(error.message);
  return data;
};

// UPDATE: Updates an existing menu item
export const updateMenuItem = async (id: number, updates: Partial<MenuItem>): Promise<MenuItem> => {
    const { data, error } = await supabase.from('menu_items').update(updates).eq('id', id).select().single();
    if (error) throw new Error(error.message);
    return data;
};

// DELETE: Deletes a menu item
export const deleteMenuItem = async (id: number): Promise<void> => {
    const { error } = await supabase.from('menu_items').delete().eq('id', id);
    if (error) throw new Error(error.message);
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\orders.ts -----

import { supabase } from '@/lib/supabase/client';
// Corrected import path for your co-located store
import { CartItem } from '@/app/customer-end-pages/store/cartStore'; 

/**
 * Submits a new order to the database.
 * @param cartItems The items in the shopping cart.
 * @param restaurantId The ID of the restaurant.
 * @param tableId The ID of the table where the order is placed.
 * @param totalAmount The total price of the order.
 */
export const submitOrder = async (
  cartItems: CartItem[],
  restaurantId: string,
  tableId: string,
  totalAmount: number
) => {
  // Step 1: Create the main order record to get an order ID
  const { data: orderData, error: orderError } = await supabase
    .from('orders')
    .insert({
      restaurant_id: restaurantId,
      table_id: tableId,
      total_amount: totalAmount,
      status: 'pending', // Initial status
    })
    .select('id')
    .single();

  if (orderError) {
    console.error('Error creating order:', orderError);
    throw new Error('Could not create the order.');
  }

  const orderId = orderData.id;

  // Step 2: Prepare the list of items for that order
  const itemsToInsert = cartItems.map(item => ({
    order_id: orderId,
    menu_item: item.id,
    quantity: item.quantity,
    price: item.price,
  }));

  // Step 3: Insert all the order items
  const { error: itemsError } = await supabase
    .from('order_items')
    .insert(itemsToInsert);

  if (itemsError) {
    console.error('Error inserting order items:', itemsError);
    // In a real app, you might want to delete the order record if this step fails
    throw new Error('Could not save the items for the order.');
  }

  return { success: true, orderId };
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\public.ts -----

import { supabase } from "@/lib/supabase/client";
import { MenuItem } from "@/types/menu";
import { Restaurant } from "@/types/restaurant";

/**
 * Fetch basic restaurant details by slug
 */
export async function getRestaurantBySlug(
  slug: string
): Promise<{ id: string; restaurant_name: string; slug: string } | null> {
  const { data, error } = await supabase
    .from("restaurants")
    // FIX: Select 'restaurant_name' to match your database schema
    .select("id, restaurant_name, slug")
    .eq("slug", slug)
    .single();

  if (error) {
    console.error("Error fetching restaurant by slug:", error.message);
    return null;
  }

  return data;
}

/**
 * ADDED: A new function to get all details for the cart and page header.
 * This was missing and causing a runtime error.
 */
export async function getRestaurantDetails(slug: string): Promise<Restaurant | null> {
    const { data, error } = await supabase
        .from('restaurants')
        .select('*') // Select all details
        .eq('slug', slug)
        .single();

    if (error) {
        console.error("Error fetching full restaurant details:", error.message);
        return null;
    }
    return data;
}


/**
 * Fetch available menu items for a restaurant by slug
 */
export async function getPublicMenuItems(slug: string): Promise<MenuItem[]> {
  const restaurant = await getRestaurantBySlug(slug);
  if (!restaurant) return [];

  const { data, error } = await supabase
    .from("menu_items")
    .select("*")
    .eq("restaurant_id", restaurant.id)
    .eq("available", true);

  if (error) {
    console.error("Error fetching public menu items:", error.message);
    return [];
  }

  return data || [];
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\restaurants.ts -----

import { supabase } from '@/lib/supabase/client';

/**
 * Fetches the restaurant record for the currently logged-in user.
 * @returns A promise that resolves to an object with the restaurant's id and slug, or null if not found.
 */
export const getMyRestaurant = async (): Promise<{ id: string; slug: string } | null> => {
  // 1. Get the current user's session
  const { data: { session } } = await supabase.auth.getSession();
  if (!session?.user) {
    console.error("No user session found.");
    return null;
  }

  // 2. Use the user's ID to find their restaurant and select both id and slug
  const { data, error } = await supabase
    .from('restaurants')
    .select('id, slug') // Fetch both the id and the new slug column
    .eq('user_id', session.user.id)
    .single(); // We expect only one restaurant per user

  if (error) {
    console.error('Error fetching restaurant:', error.message);
    return null;
  }

  return data;
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\tables.ts -----

import { supabase } from '@/lib/supabase/client';

export interface Table {
  id: number;
  table_number: string;
  qr_code_url: string;
  restaurant_id: string;
}

export type NewTableData = {
  table_number: string;
  qr_code_url: string;
  restaurant_id: string;
};

// ADD 'export' HERE
export const getTables = async (): Promise<Table[]> => {
  const { data, error } = await supabase.from('tables').select('*').order('id');
  if (error) throw new Error(error.message);
  return data || [];
};

// ADD 'export' HERE
export const addTable = async (tableData: NewTableData): Promise<Table> => {
  const { data, error } = await supabase.from('tables').insert([tableData]).select().single();
  if (error) throw new Error(error.message);
  return data;
};

// ADD 'export' HERE
export const updateTable = async (id: number, updates: Partial<Table>): Promise<Table> => {
  const { data, error } = await supabase.from('tables').update(updates).eq('id', id).select().single();
  if (error) throw new Error(error.message);
  return data;
};

// ADD 'export' HERE
export const deleteTable = async (id: number): Promise<void> => {
  const { error } = await supabase.from('tables').delete().eq('id', id);
  if (error) throw new Error(error.message);
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\login.ts -----

import {supabase} from "../supabase/client"

const loginWithEmail = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  })
  return { data, error }
}

export { loginWithEmail }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\logout.ts -----

import { supabase } from '../supabase/client'

export const logout = async () => {
  const { error } = await supabase.auth.signOut()
  return error
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\magiclink.ts -----

import {supabase} from "../supabase/client"

const sendMagicLink = async (email: string) => {
  const { data, error } = await supabase.auth.signInWithOtp({
    email,
    options: {
      shouldCreateUser: true,
      emailRedirectTo: 'https://yourdomain.com/dashboard',
    },
  })
  return { data, error }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\queries.ts -----

import { createServerClient } from '@supabase/ssr';

export async function getRestaurantDetails(cookies: any) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    { cookies }
  );

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) return null;

  const { data: restaurant, error } = await supabase
    .from('restaurants')
    .select('*')
    .eq('id', user.id)
    .single();

  if (error) {
    console.error('Error fetching restaurant:', error.message);
    return null;
  }

  return restaurant;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\session.ts -----

import { supabase } from '../supabase/client'

export const getSession = async () => {
  const { data, error } = await supabase.auth.getSession()
  return { session: data?.session, error }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\signup.ts -----

import { supabase } from '../supabase/client';

export interface SignUpData {
  email:          string;
  password:       string;
  owner_name:     string;
  restaurant_name: string;
  phone:          string;
  address:        string;
  upi_id:         string;
}

/**
 * Signs up a new user. The restaurant profile is created automatically by a database trigger.
 * @param formData The user and restaurant details.
 */
export const signUpWithRestaurant = async (formData: SignUpData) => {
  const { data, error } = await supabase.auth.signUp({
    email: formData.email,
    password: formData.password,
    // Pass the restaurant details as metadata. The trigger will use this.
    options: {
      data: {
        owner_name: formData.owner_name,
        restaurant_name: formData.restaurant_name,
        phone: formData.phone,
        address: formData.address,
        upi_id: formData.upi_id,
      }
    }
  });

  if (error) {
    console.error("Error signing up user:", error.message);
    throw new Error(`Could not sign up: ${error.message}`);
  }

  return data.user;
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useMenuItems.ts -----

'use client';

import { useState, useEffect, useCallback } from 'react';
import * as menuApi from '@/lib/api/menu';

export function useMenuItems() {
  const [menuItems, setMenuItems] = useState<menuApi.MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchMenuItems = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await menuApi.getMenuItems();
      setMenuItems(data);
    } catch (err) {
      setError('Could not load menu. Please try refreshing the page.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchMenuItems();
  }, [fetchMenuItems]);

  /**
   * Adds a new menu item for a specific restaurant.
   * @param newItemData The data from the form (name, price, etc.).
   * @param restaurantId The UUID of the restaurant this item belongs to.
   */
  const addMenuItem = async (newItemData: Omit<menuApi.NewMenuItem, 'restaurant_id'>, restaurantId: string) => {
    try {
      // Combine the form data with the restaurant ID to create a complete object
      const completeItemData = { ...newItemData, restaurant_id: restaurantId };
      const newItem = await menuApi.addMenuItem(completeItemData);
      setMenuItems(prev => [...prev, newItem]);
    } catch (err) {
      console.error("Failed to add item:", err);
      throw err; // Re-throw the error for the page to handle
    }
  };

  const updateMenuItem = async (id: number, updatedItemData: Partial<menuApi.MenuItem>) => {
    try {
      const updatedItem = await menuApi.updateMenuItem(id, updatedItemData);
      setMenuItems(prev => prev.map(item => (item.id === id ? updatedItem : item)));
    } catch (err) {
      console.error("Failed to update item:", err);
      throw err;
    }
  };

  const deleteMenuItem = async (id: number) => {
    try {
      await menuApi.deleteMenuItem(id);
      setMenuItems(prev => prev.filter(item => item.id !== id));
    } catch (err) {
      console.error("Failed to delete item:", err);
    }
  };

  return { menuItems, loading, error, addMenuItem, updateMenuItem, deleteMenuItem };
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useProtectedRoute.ts -----

'use client'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { getSession } from '@/lib/auth/session'

export const useProtectedRoute = () => {
  const [loading, setLoading] = useState(true)
  const router = useRouter()

  useEffect(() => {
    const checkAuth = async () => {
      const { session } = await getSession()
      if (!session) {
        // CORRECTED: Redirect to the actual login page
        router.replace('/login') 
      } else {
        setLoading(false)
      }
    }
    checkAuth()
  }, [router]) // Added router to dependency array

  return { loading }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useTables.ts -----

'use client';

import { useState, useEffect, useCallback } from 'react';
import * as tableApi from '@/lib/api/tables';
import { supabase } from '@/lib/supabase/client'; // Import the Supabase client

export function useTables() {
  const [tables, setTables] = useState<tableApi.Table[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchTables = useCallback(async () => {
    try {
      setLoading(true);
      const data = await tableApi.getTables();
      setTables(data);
    } catch (error) {
      console.error("Failed to fetch tables", error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchTables();
  }, [fetchTables]);

  // This function now calls your Edge Function to create the table and QR code
  const addTable = async (name: string, restaurantId: string) => {
    // CORRECTED: The function name is 'generate-table-qr'
    const { data: newTable, error } = await supabase.functions.invoke('generate-table-qr', {
      body: { restaurantId, tableNumber: name },
    });

    if (error) {
      console.error("Error calling generate-table-qr Edge Function:", error);
      throw error;
    }

    // Update the local state with the new table returned from the function
    setTables(prev => [...prev, newTable]);
    return newTable;
  };

  const deleteTable = async (id: number) => {
    await tableApi.deleteTable(id);
    setTables(prev => prev.filter(table => table.id !== id));
  };

  return { tables, loading, addTable, deleteTable };
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\supabase\client.ts -----

import { createClient } from '@supabase/supabase-js'

// Use "export const" on this line
export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)


----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\supabase\server.ts -----

import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
export async function createClient() {
  const cookieStore = await cookies()
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options })
        },
        remove(name: string, options: any) {
          cookieStore.set({ name, value: '', ...options })
        },
      },
    }
  )
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\types\types.ts -----

export interface Restaurant {
  id: string;
  owner_name: string;
  restaurant_name: string;
  email: string;
  phone: string;
  address: string;
  upi_id: string;
  logo_url: string | null;
  qr_url: string;
  created_at: string;
}

export interface ValidationErrors {
  owner_name?: string;
  restaurant_name?: string;
  email?: string;
  phone?: string;
  address?: string;
  upi_id?: string;
  logo_url?: string;
}

export interface RestaurantProfileProps {
  restaurant: Restaurant;
  onUpdate?: (updatedData: Partial<Restaurant>) => Promise<void>;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\types\utils.ts -----

// lib/utils.ts
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString("en-IN", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

export const getInitials = (name: string): string => {
  return name
    .split(" ")
    .map((word) => word.charAt(0))
    .join("")
    .toUpperCase()
    .slice(0, 2);
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\utils\image-compressor.ts -----

// src/lib/utils/image-compressor.ts

import imageCompression from 'browser-image-compression';

/**
 * Compresses an image file in the browser.
 * @param file The image file to compress.
 * @returns A promise that resolves with the compressed file.
 */
export const compressImage = async (file: File): Promise<File> => {
  const options = {
    maxSizeMB: 1,          // Max file size in MB
    maxWidthOrHeight: 1024,  // Max width or height
    useWebWorker: true,    // Use web worker for better performance
  };

  try {
    console.log(`Original file size: ${(file.size / 1024 / 1024).toFixed(2)} MB`);
    
    const compressedFile = await imageCompression(file, options);
    
    console.log(`Compressed file size: ${(compressedFile.size / 1024 / 1024).toFixed(2)} MB`);
    
    return compressedFile;
  } catch (error) {
    console.error('Image compression failed:', error);
    // Re-throw the error to be handled by the calling function
    throw new Error('Could not compress the selected image.');
  }
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\uploadthing.ts -----

// src/lib/uploadthing.ts

import { generateReactHelpers } from "@uploadthing/react";
import type { OurFileRouter } from "@/app/api/uploadthing/core";

export const { useUploadThing, uploadFiles } = generateReactHelpers<OurFileRouter>();

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\utils.ts -----

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\types\menu.ts -----

export type MenuCategory = 'starters' | 'mains' | 'desserts' | 'drinks';

export interface MenuItem {
  id: number;
  name: string;
  description: string;
  price: number;
  // category: MenuCategory;
  photo_url?: string;
  // ADDED: Make sure this property exists
  available: boolean; 
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\next.config.ts -----

/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'uploadthing.com',
      },
      {
        protocol: 'https',
        hostname: 'utfs.io',
      },
    ],
    // This is the part that fixes the preview
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    unoptimized: true, // Add this line
  },
};

module.exports = nextConfig;
