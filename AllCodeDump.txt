
----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\auth\route.ts -----

import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function POST(req: Request) {
  const { event, session } = await req.json();

  const cookieStore = cookies();

  if (session) {
    // âœ… Save access_token in cookies
    (await
          // âœ… Save access_token in cookies
          cookieStore).set('sb-access-token', session.access_token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      path: '/',
    });

    (await cookieStore).set('sb-refresh-token', session.refresh_token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      path: '/',
    });
  } else {
    // âœ… Clear cookies on logout
    (await
          // âœ… Clear cookies on logout
          cookieStore).set('sb-access-token', '', { maxAge: 0, path: '/' });
    (await cookieStore).set('sb-refresh-token', '', { maxAge: 0, path: '/' });
  }

  return NextResponse.json({ success: true });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\create-table\route.ts -----

// File: app/api/create-table/route.ts
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    const { restaurantId, tableNumber } = await req.json();

    // Call your Supabase Edge Function
const res = await fetch(
  "https://melkeknoniqnnlanhobo.functions.supabase.co/generate-table-qr",
  {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`, 
      // or SUPABASE_SERVICE_ROLE_KEY if you want more power (be careful!)
    },
    body: JSON.stringify({ restaurantId, tableNumber }),
  }
);

    if (!res.ok) {
      const errorText = await res.text();
      return NextResponse.json(
        { error: `Supabase function failed: ${errorText}` },
        { status: res.status }
      );
    }

    const data = await res.json();

    return NextResponse.json({ success: true, ...data });
  } catch (err: any) {
    return NextResponse.json(
      { error: err.message || "Unknown error" },
      { status: 500 }
    );
  }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\menu\[id]\route.ts -----

// src/app/api/menu/[id]/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

// Helper function to verify ownership
async function verifyOwnership(supabase: any, menuItemId: string): Promise<boolean> {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return false;

  const { data: menuItem, error } = await supabase
    .from("menu_items")
    .select("restaurant_id")
    .eq("id", menuItemId)
    .single();

  if (error || !menuItem) return false;

  // Assumes restaurant_id in menu_items corresponds to the user's ID
  // A better approach would be to join with the restaurants table to check user_id.
  const { data: restaurant } = await supabase
    .from('restaurants')
    .select('id')
    .eq('user_id', user.id)
    .single();

  if (!restaurant) return false;

  return menuItem.restaurant_id === restaurant.id;
}


// GET one menu item (no auth needed for public viewing, but can be added if required)
export async function GET(
  req: Request,
  { params }: { params: { id: string } }
) {
  const supabase = createServerClient(); // FIXED: Removed await

  const { data, error } = await supabase
    .from("menu_items")
    .select("*")
    .eq("id", params.id)
    .single();

  if (error) {
    return NextResponse.json({ error: "Menu item not found." }, { status: 404 });
  }

  return NextResponse.json(data);
}

// UPDATE one menu item
export async function PUT(
  req: Request,
  { params }: { params: { id: string } }
) {
  const supabase = createServerClient(); // FIXED: Removed await
  
  // Authorization check
  const isOwner = await verifyOwnership(supabase, params.id);
  if (!isOwner) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }

  const body = await req.json();
  const { data, error } = await supabase
    .from("menu_items")
    .update({
      name: body.name,
      description: body.description,
      price: body.price,
      category: body.category,
      available: body.available,
      photo_url: body.photo_url,
      updated_at: new Date().toISOString(),
    })
    .eq("id", params.id)
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 400 });
  }

  return NextResponse.json(data);
}

// DELETE one menu item
export async function DELETE(
  req: Request,
  { params }: { params: { id: string } }
) {
  const supabase = createServerClient(); // FIXED: Removed await

  // Authorization check
  const isOwner = await verifyOwnership(supabase, params.id);
  if (!isOwner) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }

  const { error } = await supabase
    .from("menu_items")
    .delete()
    .eq("id", params.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 400 });
  }

  return NextResponse.json({ success: true });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\menu\route.ts -----

// src/app/api/menu/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

export async function POST(req: Request) {
  const supabase = createServerClient(); // FIXED: Removed await
  const body = await req.json();

  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  // Find restaurant for this user to get the correct restaurant_id
  const { data: restaurant, error: restaurantError } = await supabase
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
      return NextResponse.json({ error: "Restaurant not found for user" }, { status: 404 });
  }

  const { data, error } = await supabase
    .from("menu_items")
    .insert([
      {
        restaurant_id: restaurant.id, // Use the fetched restaurant ID
        name: body.name,
        description: body.description,
        price: body.price,
        category: body.category ?? "mains",
        available: body.available ?? true,
        photo_url: body.photo_url ?? null,
      },
    ])
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 400 });
  }

  return NextResponse.json(data, { status: 201 });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\menus\route.ts -----

// src/app/api/menus/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

// GET all menu items for the logged-in restaurant
export async function GET() {
  const supabase = createServerClient(); // FIXED: Removed await

  const {
    data: { user },
  } = await (await supabase).auth.getUser();
  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  
  // Find the restaurant for this user
  const { data: restaurant, error: restaurantError } = await (await supabase)
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
    return NextResponse.json({ error: "Restaurant not found for this user" }, { status: 404 });
  }

  const { data, error } = await (await supabase)
    .from("menu_items")
    .select("*")
    .eq("restaurant_id", restaurant.id) // Filter by restaurant_id
    .order("created_at", { ascending: false });

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\orders\recent\route.ts -----

// src/app/api/orders/recent/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

export async function GET() {
  const supabase = createServerClient(); // FIXED: Removed await

  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  
  // Find the restaurant for this user
  const { data: restaurant, error: restaurantError } = await supabase
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
    return NextResponse.json({ error: "Restaurant not found for this user" }, { status: 404 });
  }

  const { data, error } = await supabase
    .from("orders")
    .select("id, status, total_amount, created_at, track_code")
    .eq("restaurant_id", restaurant.id) // FIXED: Filter by restaurant_id
    .order("created_at", { ascending: false })
    .limit(10);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\orders\[id]\items\routes.ts -----

// src/app/api/orders/[id]/items/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

export async function GET(
  req: Request,
  { params }: { params: { id: string } }
) {
  const supabase = createServerClient(); // FIXED: Removed await

  // Authorization check to ensure the order belongs to the user or is public
  const { data: { user } } = await supabase.auth.getUser();
  if (user) { // If a dashboard user is logged in, verify ownership
    const { data: restaurant } = await supabase
        .from('restaurants')
        .select('id')
        .eq('user_id', user.id)
        .single();

    if (restaurant) {
        const { count } = await supabase
          .from('orders')
          .select('*', { count: 'exact', head: true })
          .eq('id', params.id)
          .eq('restaurant_id', restaurant.id);
        
        // If the order does not belong to the restaurant, deny access.
        if (count === 0) {
            return NextResponse.json({ error: "Order not found or unauthorized" }, { status: 404 });
        }
    }
  }

  const { data, error } = await supabase
    .from("order_items")
    .select("*, menu_items(name, price)") // Joined query to get item details
    .eq("order_id", params.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\orders\[id]\status\route.ts -----

// src/app/api/orders/[id]/status/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

export async function PUT(req: Request, { params }: { params: { id: string } }) {
  const supabase = createServerClient(); // FIXED: Removed await
  
  // Authorization check
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  // Find restaurant for this user
  const { data: restaurant, error: restaurantError } = await supabase
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
      return NextResponse.json({ error: "Restaurant not found for user" }, { status: 404 });
  }

  const { count, error: checkError } = await supabase
    .from('orders')
    .select('*', { count: 'exact', head: true })
    .eq('id', params.id)
    .eq('restaurant_id', restaurant.id);
  
  if (checkError || count === 0) {
      return NextResponse.json({ error: "Order not found or you do not have permission to modify it." }, { status: 404 });
  }
  
  const body = await req.json();
  const { status, note, etaMinutes } = body;

  if (!status) {
    return NextResponse.json({ error: "Missing status" }, { status: 400 });
  }

  // Update order status
  const { data: order, error } = await supabase
    .from("orders")
    .update({
      status,
      estimated_time: etaMinutes ?? null,
      status_updated_at: new Date().toISOString(),
    })
    .eq("id", params.id)
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  // Insert status event
  await supabase.from("order_status_events").insert({
    order_id: params.id,
    status,
    note,
  });

  // Trigger push notification
  await fetch(`${process.env.NEXT_PUBLIC_SITE_URL}/api/push/notify`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      orderId: params.id,
      title: `Order Status: ${status}`,
      message: note || `Your order is now ${status}`,
    }),
  });

  return NextResponse.json(order);
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\orders\[id]\route.ts -----

// src/app/api/orders/[id]/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

export async function PUT(req: Request, { params }: { params: { id: string } }) {
  const supabase = createServerClient(); // FIXED: Removed await
  const { status, note, etaMinutes } = await req.json();
  const orderId = params.id;

  // FIXED: Added Authorization check
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  
  // Find restaurant for this user
  const { data: restaurant, error: restaurantError } = await supabase
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
      return NextResponse.json({ error: "Restaurant not found for user" }, { status: 404 });
  }
  
  // Verify the order belongs to this restaurant
  const { count, error: checkError } = await supabase
    .from('orders')
    .select('*', { count: 'exact', head: true })
    .eq('id', orderId)
    .eq('restaurant_id', restaurant.id);

  if (checkError || count === 0) {
    return NextResponse.json({ error: "Order not found or permission denied." }, { status: 404 });
  }

  // 1. Update order status
  const { error: updateError } = await supabase
    .from("orders")
    .update({ status, estimated_time: etaMinutes, status_updated_at: new Date().toISOString() })
    .eq("id", orderId);

  if (updateError) {
    console.error("Order update failed:", updateError.message);
    return NextResponse.json({ error: updateError.message }, { status: 500 });
  }

  // 2. Insert into order_status_events
  await supabase.from("order_status_events").insert({
    order_id: orderId,
    status,
    note,
  });

  // 3. Send notification
  try {
    await fetch(`${process.env.NEXT_PUBLIC_SITE_URL}/api/push/notify`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        orderId,
        title: `Order ${status}`,
        message: note || `Your order status changed to ${status}`,
      }),
    });
  } catch (err) {
    console.error("Failed to send push notification:", err);
  }

  return NextResponse.json({ success: true });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\orders\route.ts -----

// src/app/api/orders/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

// GET all orders for logged-in restaurant
export async function GET() {
  const supabase = createServerClient(); // FIXED: Removed await

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  
  // Find restaurant for this user
  const { data: restaurant, error: restaurantError } = await supabase
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
      return NextResponse.json({ error: "Restaurant not found for user" }, { status: 404 });
  }

  const { data, error } = await supabase
    .from("orders")
    .select("*, order_items(*, menu_items(name)), restaurants(restaurant_name, slug), tables(table_number)")
    .eq("restaurant_id", restaurant.id) // FIXED: filter by restaurant ID
    .order("created_at", { ascending: false });

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data || []);
}

// POST create a new order (public endpoint for customers)
export async function POST(req: Request) {
  const supabase = createServerClient(); // FIXED: Removed await
  const body = await req.json();
  
  const { restaurantId, tableId, totalAmount, cartItems } = body;

  if (!restaurantId || !tableId || !totalAmount || !Array.isArray(cartItems)) {
    return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
  }

  const { data: order, error } = await supabase
    .from("orders")
    .insert({
      restaurant_id: restaurantId,
      table_id: tableId,
      total_amount: totalAmount,
      status: "pending",
    })
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  if (cartItems.length > 0) {
    const itemsPayload = cartItems.map((i: any) => ({
      order_id: order.id,
      menu_item_id: i.id,
      quantity: i.quantity,
      price: i.price,
    }));

    const { error: itemsError } = await supabase.from("order_items").insert(itemsPayload);
    if(itemsError) {
        // Rollback order creation if items fail to insert
        await supabase.from('orders').delete().eq('id', order.id);
        return NextResponse.json({ error: `Could not save order items: ${itemsError.message}` }, { status: 500 });
    }
  }

  const { data: restaurant } = await supabase
    .from('restaurants')
    .select('slug')
    .eq('id', restaurantId)
    .single();

  return NextResponse.json({ 
    success: true, 
    trackCode: order.track_code, 
    restaurantSlug: restaurant?.slug 
  }, { status: 201 });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\profile\route.ts -----

// src/app/api/profile/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

// GET restaurant profile for current user
export async function GET() {
  const supabase = createServerClient(); // FIXED: Removed await

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { data, error } = await supabase
    .from("restaurants")
    .select("*")
    .eq("user_id", user.id)
    .single();

  if (error) {
    return NextResponse.json({ error: "Profile not found for this user." }, { status: 404 });
  }

  return NextResponse.json(data);
}

// PUT update restaurant profile
export async function PUT(req: Request) {
  const supabase = createServerClient(); // FIXED: Removed await
  const body = await req.json();

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { restaurant_name, phone, address, upi_id, logo_url, banner_url, description } = body;

  const { data, error } = await supabase
    .from("restaurants")
    .update({
      restaurant_name,
      phone,
      address,
      upi_id,
      logo_url,
      banner_url,
      description,
      updated_at: new Date().toISOString(),
    })
    .eq("user_id", user.id)
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\push\notify\route.ts -----

// src/app/api/push/notify/route.ts

import { NextResponse } from 'next/server';
import webpush from 'web-push';
import { createServerClient } from '@/lib/supabase/server';

const VAPID_PUBLIC_KEY = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!;
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY!;
const VAPID_SUBJECT = process.env.VAPID_SUBJECT || 'mailto:admin@example.com';

webpush.setVapidDetails(VAPID_SUBJECT, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY);

export async function POST(req: Request) {
  try {
    const { orderId, title, message, url } = await req.json(); // Changed 'body' to 'message' for clarity
    if (!orderId) return NextResponse.json({ error: 'orderId required' }, { status: 400 });

    const supabase = createServerClient(); // FIXED: Removed await
    const { data: subs, error } = await supabase
      .from('web_push_subscriptions')
      .select('*')
      .eq('order_id', orderId);

    if (error) return NextResponse.json({ error: error.message }, { status: 500 });
    if (!subs || subs.length === 0) {
        return NextResponse.json({ ok: true, message: "No subscriptions found for this order." });
    }

    const payload = JSON.stringify({ title: title || 'Order update', body: message || '', data: { url } });

    const results = await Promise.allSettled(
      subs.map(async (s) => {
        const subscription = {
          endpoint: s.endpoint,
          keys: { p256dh: s.p256dh, auth: s.auth }
        } as webpush.PushSubscription;
        try {
          await webpush.sendNotification(subscription, payload);
          return { ok: true, endpoint: s.endpoint };
        } catch (err: any) {
          // If subscription is gone, delete it from the DB
          if (err.statusCode === 404 || err.statusCode === 410) {
            await supabase.from('web_push_subscriptions').delete().eq('endpoint', s.endpoint);
          }
          return { ok: false, error: err?.message, endpoint: s.endpoint };
        }
      })
    );

    return NextResponse.json({ ok: true, results });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || 'Unknown error' }, { status: 500 });
  }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\push\subscribe\route.ts -----

// src/app/api/push/subscribe/route.ts

import { NextResponse } from 'next/server';
import { createServerClient } from '@/lib/supabase/server';

export async function POST(req: Request) {
  try {
    const { orderId, subscription } = await req.json();
    if (!orderId || !subscription?.endpoint) {
      return NextResponse.json({ error: 'Invalid payload' }, { status: 400 });
    }

    const p256dh = subscription.keys?.p256dh;
    const auth = subscription.keys?.auth;

    if (!p256dh || !auth) {
        return NextResponse.json({ error: 'Subscription is missing keys' }, { status: 400 });
    }

    const supabase = createServerClient(); // FIXED: Removed await
    // Upsert by endpoint to avoid duplicates and update order_id if needed
    const { error } = await supabase
      .from('web_push_subscriptions')
      .upsert({
        order_id: orderId,
        endpoint: subscription.endpoint,
        p256dh, auth
      }, { onConflict: 'endpoint' });

    if (error) {
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    return NextResponse.json({ ok: true });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || 'Unknown error' }, { status: 500 });
  }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\tables\[id]\route.ts -----

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

// Helper function to verify ownership
async function verifyOwnership(supabase: any, tableId: string): Promise<boolean> {
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) return false;

  const { data: restaurant } = await supabase
    .from('restaurants')
    .select('id')
    .eq('user_id', user.id)
    .single();
  
  if(!restaurant) return false;

  const { data: table, error } = await supabase
    .from("tables")
    .select("restaurant_id")
    .eq("id", tableId)
    .single();

  if (error || !table) return false;

  return table.restaurant_id === restaurant.id;
}


// GET single table details
export async function GET(_: Request, { params }: { params: { id: string } }) {
  const supabase = createServerClient(); // FIXED: Removed await

  const { data, error } = await (await supabase)
    .from("tables")
    .select("*")
    .eq("id", params.id)
    .single();

  if (error) {
    return NextResponse.json({ error: "Table not found." }, { status: 404 });
  }

  return NextResponse.json(data);
}

// PUT update table info
export async function PUT(req: Request, { params }: { params: { id: string } }) {
  const supabase = createServerClient(); // FIXED: Removed await

  const isOwner = await verifyOwnership(supabase, params.id);
  if (!isOwner) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }

  const body = await req.json();
  const { table_number } = body;

  const { data, error } = await (await supabase)
    .from("tables")
    .update({ table_number })
    .eq("id", params.id)
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data);
}

// DELETE single table
export async function DELETE(_: Request, { params }: { params: { id: string } }) {
  const supabase = createServerClient(); // FIXED: Removed await

  const isOwner = await verifyOwnership(supabase, params.id);
  if (!isOwner) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }

  const { error } = await (await supabase).from("tables").delete().eq("id", params.id);

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json({ success: true });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\tables\route.ts -----

// src/app/api/tables/route.ts

import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/server";

// GET all tables for the current restaurant
export async function GET() {
  const supabase = createServerClient(); // FIXED: Removed await

  // 1. Get the logged in user
  const {
    data: { user },
  } = await (await supabase).auth.getUser();

  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  // 2. Find the restaurant for this user
  const { data: restaurant, error: restaurantError } = await (await supabase)
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
    return NextResponse.json(
      { error: "Restaurant not found for this user" },
      { status: 404 }
    );
  }

  // 3. Get tables for that restaurant
  const { data, error } = await (await supabase)
    .from("tables")
    .select("id, table_number, qr_code_url, created_at")
    .eq("restaurant_id", restaurant.id)
    .order("created_at", { ascending: false });

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data || []);
}

// POST create a new table
export async function POST(req: Request) {
  const supabase = createServerClient(); // FIXED: Removed await
  const body = await req.json();

  const {
    data: { user },
  } = await (await supabase).auth.getUser();

  if (!user) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  // Find restaurant for this user
  const { data: restaurant, error: restaurantError } = await (await supabase)
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
    return NextResponse.json(
      { error: "Restaurant not found for this user" },
      { status: 404 }
    );
  }

  const { table_number, qr_code_url } = body;

  if (!table_number) {
    return NextResponse.json(
      { error: "Missing table_number" },
      { status: 400 }
    );
  }

  const { data, error } = await (await supabase)
    .from("tables")
    .insert({
      restaurant_id: restaurant.id,
      table_number,
      qr_code_url: qr_code_url || null,
    })
    .select()
    .single();

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }

  return NextResponse.json(data, { status: 201 });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\uploadthing\core.ts -----

// src/app/api/uploadthing/core.ts
import { createUploadthing, type FileRouter } from "uploadthing/next";

const f = createUploadthing();

// This is a fake user ID - in a real app, you'd get this from your auth solution
const auth = (req: Request) => ({ id: "fake-user-id" }); 

// FileRouter for your app, can contain multiple FileRoutes
export const ourFileRouter = {
  // Define as many FileRoutes as you like, each with a unique route slug
  menuItemImage: f({ image: { maxFileSize: "4MB", maxFileCount: 1 } })
    // Set permissions and file types for this FileRoute
    .middleware(async ({ req }) => {
      // This code runs on your server before upload
      const user = await auth(req);
    

      // If you throw, the user will not be able to upload
      if (!user) throw new Error("Unauthorized");

      // Whatever is returned here is accessible in onUploadComplete
      return { userId: user.id };
    })
    .onUploadComplete(async ({ metadata, file }) => {
      // This code RUNS ON YOUR SERVER after upload
      console.log("Upload complete for userId:", metadata.userId);
      console.log("file url", file.url);
    }),
} satisfies FileRouter;

export type OurFileRouter = typeof ourFileRouter;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\api\uploadthing\route.ts -----

// src/app/api/uploadthing/route.ts
import { createRouteHandler } from "uploadthing/next"; // CHANGED: Correct import
import { ourFileRouter } from "./core";

// Export routes for Next App Router
export const { GET, POST } = createRouteHandler({ // CHANGED: Correct function name
  router: ourFileRouter,
});

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\PublicPagesComponents\Cart.tsx -----

'use client';

import { useState } from 'react';
import { useCartStore } from '@/app/customer-end-pages/store/cartStore';
import CartItem from './CartItem';
import { X, ShoppingCart, Loader2 } from 'lucide-react';
import { submitOrder } from '@/lib/api/orders';
import { useRouter } from 'next/navigation';

interface CartProps {
  isOpen: boolean;
  onClose: () => void;
  restaurantId: string;
  tableId: string;
  restaurantSlug: string; // needed for redirect
}

const formatPrice = (price: number) =>
  new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price);

export default function Cart({ isOpen, onClose, restaurantId, tableId, restaurantSlug }: CartProps) {
  const router = useRouter();
  const { items, totalPrice, clearCart } = useCartStore();
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [orderSuccess, setOrderSuccess] = useState(false);

  const handlePlaceOrder = async () => {
    setIsPlacingOrder(true);
    try {
      const total = totalPrice();
      const { success, orderId } = await submitOrder(items, restaurantId, String(tableId), total);

      if (success && orderId) {
        setOrderSuccess(true);
        clearCart();
        router.push(`/customer-end-pages/${restaurantSlug}/orders/${orderId}`);
        return;
      }

      alert('Order could not be placed. Please try again.');
    } catch (error) {
      console.error(error);
      alert('There was an error placing your order. Please try again.');
    } finally {
      setIsPlacingOrder(false);
    }
  };

  const handleClose = () => {
    onClose();
    setTimeout(() => setOrderSuccess(false), 300);
  };

  return (
    <>
      {/* Backdrop */}
      <div
        className={`fixed inset-0 bg-black transition-opacity duration-300 ${
          isOpen ? 'opacity-50' : 'opacity-0 pointer-events-none'
        } z-[1190]`}
        onClick={handleClose}
      />

      {/* Drawer */}
      <div
        className={`fixed top-0 right-0 h-full w-full max-w-md bg-white shadow-2xl transform transition-transform duration-300 ease-in-out ${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        } z-[1200]`}
      >
        <div className="flex flex-col h-full">
          <div className="flex justify-between items-center p-6 border-b">
            <h2 className="text-2xl font-bold text-gray-800">Your Cart</h2>
            <button onClick={handleClose} className="p-2 rounded-full hover:bg-gray-100">
              <X size={24} />
            </button>
          </div>

          {/* Content */}
          {orderSuccess ? (
            <div className="flex flex-col items-center justify-center h-full text-center text-gray-700 p-6">
              <h3 className="text-2xl font-bold text-green-600">Order Placed!</h3>
              <p className="mt-2">Redirecting to tracking pageâ€¦</p>
            </div>
          ) : (
            <>
              <div className="flex-grow p-6 overflow-y-auto">
                {items.length === 0 ? (
                  <div className="flex flex-col items-center justify-center h-full text-center text-gray-500">
                    <ShoppingCart size={48} className="mb-4" />
                    <p className="font-semibold">Your cart is currently empty.</p>
                  </div>
                ) : (
                  <div className="divide-y">
                    {items.map((item) => (
                      <CartItem key={item.id} item={item} />
                    ))}
                  </div>
                )}
              </div>

              {items.length > 0 && (
                <div className="p-6 border-t bg-gray-50">
                  <div className="flex justify-between items-center mb-4">
                    <span className="text-lg font-semibold text-gray-800">Subtotal</span>
                    <span className="text-xl font-bold text-gray-900">
                      {formatPrice(totalPrice())}
                    </span>
                  </div>
                  <button
                    onClick={handlePlaceOrder}
                    disabled={isPlacingOrder}
                    className="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                  >
                    {isPlacingOrder && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                    {isPlacingOrder ? 'Placing Order...' : 'Place Order'}
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\PublicPagesComponents\CartItem.tsx -----

'use client';

import Image from 'next/image';
import { useCartStore, CartItem as CartItemType } from '@/app/customer-end-pages/store/cartStore';
import { Plus, Minus, X } from 'lucide-react';

interface CartItemProps {
  item: CartItemType;
}

const formatPrice = (price: number) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(price);

export default function CartItem({ item }: CartItemProps) {
  const { addItem, removeItem } = useCartStore();

  return (
    <div className="flex items-center gap-4 py-4">
      <div className="relative h-16 w-16 rounded-lg overflow-hidden">
        {item.photo_url ? (
          <Image src={item.photo_url} alt={item.name} layout="fill" objectFit="cover" />
        ) : (
          <div className="bg-gray-200 h-full w-full"></div>
        )}
      </div>
      <div className="flex-grow">
        <p className="font-semibold text-gray-800">{item.name}</p>
        <p className="text-sm text-gray-600">{formatPrice(item.price)}</p>
      </div>
      <div className="flex items-center gap-2">
        <button onClick={() => removeItem(item.id)} className="p-1 rounded-full bg-gray-200 hover:bg-gray-300">
          {item.quantity > 1 ? <Minus size={14} /> : <X size={14} />}
        </button>
        <span className="font-bold w-6 text-center">{item.quantity}</span>
        <button onClick={() => addItem(item)} className="p-1 rounded-full bg-gray-200 hover:bg-gray-300">
          <Plus size={14} />
        </button>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\PublicPagesComponents\CustomerMenuItemCard.tsx -----

'use client';

import Image from 'next/image';
import { MenuItem } from '@/types/menu';
import { Plus } from 'lucide-react';
// CORRECTED: Import from the new co-located path
import { useCartStore } from '../store/cartStore'; 

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(price);
};

interface CustomerMenuItemCardProps {
  item: MenuItem;
}

export default function CustomerMenuItemCard({ item }: CustomerMenuItemCardProps) {
  const { addItem } = useCartStore();

  return (
    <div className="bg-white rounded-2xl shadow-lg overflow-hidden flex flex-col group transition-all duration-300 hover:shadow-2xl">
      <div className="relative h-48 w-full">
        {item.photo_url ? (
          <Image
            src={item.photo_url}
            alt={item.name}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-300 group-hover:scale-105"
          />
        ) : (
          <div className="bg-gray-100 h-full w-full flex items-center justify-center">
            <span className="text-gray-400">No Image</span>
          </div>
        )}
      </div>
      <div className="p-4 flex-grow flex flex-col">
        <h3 className="text-lg font-bold text-gray-800">{item.name}</h3>
        <p className="text-sm text-gray-600 mt-1 flex-grow">{item.description}</p>
        <div className="flex justify-between items-center mt-4">
          <p className="text-xl font-bold text-gray-900">{formatPrice(item.price)}</p>
          <button 
            onClick={() => addItem(item)}
            className="flex items-center gap-2 bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            <Plus size={16} />
            Add
          </button>
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\store\cartStore.ts -----

import { create } from 'zustand';
import { MenuItem } from '@/types/menu';

export interface CartItem extends MenuItem {
  quantity: number;
}

interface CartState {
  items: CartItem[];
  addItem: (item: MenuItem) => void;
  removeItem: (itemId: number) => void;
  clearCart: () => void;
  totalItems: () => number;
  totalPrice: () => number;
}

export const useCartStore = create<CartState>((set, get) => ({
  items: [],
  addItem: (item) => {
    const currentItems = get().items;
    const existingItem = currentItems.find((cartItem) => cartItem.id === item.id);
    if (existingItem) {
      const updatedItems = currentItems.map((cartItem) =>
        cartItem.id === item.id ? { ...cartItem, quantity: cartItem.quantity + 1 } : cartItem
      );
      set({ items: updatedItems });
    } else {
      set({ items: [...currentItems, { ...item, quantity: 1 }] });
    }
  },
  removeItem: (itemId) => {
    const currentItems = get().items;
    const existingItem = currentItems.find((cartItem) => cartItem.id === itemId);
    if (existingItem && existingItem.quantity > 1) {
      const updatedItems = currentItems.map((cartItem) =>
        cartItem.id === itemId ? { ...cartItem, quantity: cartItem.quantity - 1 } : cartItem
      );
      set({ items: updatedItems });
    } else {
      set({ items: currentItems.filter((cartItem) => cartItem.id !== itemId) });
    }
  },
  clearCart: () => set({ items: [] }),
  totalItems: () => get().items.reduce((total, item) => total + item.quantity, 0),
  totalPrice: () => get().items.reduce((total, item) => total + item.price * item.quantity, 0),
}));

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\[restaurantSlug]\orders\[code]\page.tsx -----

import { createServerClient } from '@/lib/supabase/server';
import StatusClient from './StatusClient';
import { notFound } from 'next/navigation';

type PageProps = {
  params: {
    restaurantSlug: string;
    // FIX: This must be lowercase to match the folder name '[code]'
    code: string;
  };
};

export default async function OrderTrackPage({ params }: PageProps) {
  // FIX: Destructuring is now simple and direct
  const { restaurantSlug, code } = params;
  const supabase = await createServerClient();

  // Step 1: Fetch order by tracking code
  const { data: order, error: orderError } = await supabase
    .from('orders')
    .select('id, track_code, status, estimated_time, created_at, restaurant_id')
    .eq('track_code', code)
    .single();

  if (orderError || !order) {
    console.log(`Order not found for code: ${code}.`);
    notFound();
  }

  // Step 2: Fetch the associated restaurant
  if (!order.restaurant_id) {
    console.error(`CRITICAL: Order ${order.id} is missing a restaurant_id.`);
    return <div className="p-8 text-center text-red-600">Error: Order data is corrupted.</div>;
  }

  const { data: restaurant, error: restaurantError } = await supabase
    .from('restaurants')
    .select('restaurant_name, slug')
    .eq('id', order.restaurant_id)
    .single();

  if (restaurantError || !restaurant) {
    console.error(`CRITICAL: Restaurant not found for id: ${order.restaurant_id}.`);
    return <div className="p-8 text-center text-red-600">Error: Could not find restaurant information.</div>;
  }

  // Step 3: Validate the URL slug
  if (restaurant.slug !== restaurantSlug) {
    console.warn(`Slug mismatch. URL: "${restaurantSlug}", DB: "${restaurant.slug}"`);
    notFound();
  }

  // All data is valid, now render the client component with the correct props.
  return (
    <StatusClient
      trackCode={order.track_code}
      restaurantName={restaurant.restaurant_name}
      orderId={order.id} // Re-added orderId for push notifications
      initialStatus={order.status}
      initialEta={order.estimated_time}
      createdAt={order.created_at}
    />
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\[restaurantSlug]\orders\[code]\StatusClient.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import OrderStatusTimeline from '@/components/orders/OrderStatusTimeline';
import StatusBadge from '@/components/orders/StatusBadge';
import ETA from '@/components/orders/ETA';
import FormattedDate from '@/components/FormattedDate';
import { registerPushForOrder } from '@/lib/utils/notifications'; // 1. Import the notification utility

// Defines the props this component receives from the page
type StatusClientProps = {
  trackCode: string;
  restaurantName: string;
  orderId: string; // 2. Ensure orderId is received for the subscription
  initialStatus: string;
  initialEta: number | null;
  createdAt: string;
};

const dbToUiStatus = (dbStatus: string): 'Pending' | 'Confirmed' | 'Preparing' | 'Ready' | 'Complete' | 'Cancelled' => {
  const statusMap = {
    pending: 'Pending', confirmed: 'Confirmed', preparing: 'Preparing',
    ready: 'Ready', complete: 'Complete', cancelled: 'Cancelled',
  } as const;
  return statusMap[dbStatus as keyof typeof statusMap] || 'Pending';
};

export default function StatusClient({
  trackCode,
  restaurantName,
  orderId, // Receive orderId
  initialStatus,
  initialEta,
  createdAt,
}: StatusClientProps) {
  const [status, setStatus] = useState(dbToUiStatus(initialStatus));
  const [eta, setEta] = useState<number | null>(initialEta);

  // 3. ADD THIS EFFECT TO TRIGGER PUSH SUBSCRIPTION
  useEffect(() => {
    // When the component first loads, ask for permission and register
    // for push notifications for this specific order.
    registerPushForOrder(orderId);
  }, [orderId]);

  // This effect handles real-time page updates via Supabase channels
  useEffect(() => {
    const channel = supabase
      .channel(`order-${trackCode}`)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE', schema: 'public', table: 'orders',
          filter: `track_code=eq.${trackCode}`,
        },
        (payload) => {
          const row = payload.new as any;
          if (row?.status) setStatus(dbToUiStatus(row.status));
          if ('estimated_time' in row) setEta(row.estimated_time);
        }
      )
      .subscribe();

    return () => { supabase.removeChannel(channel); };
  }, [trackCode]);

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <div className="text-center mb-6">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Order Status</h1>
            <p className="text-gray-600">Track your order in real-time</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div className="space-y-3">
              <div>
                <span className="text-sm font-medium text-gray-500">Tracking Code</span>
                <p className="text-lg font-semibold text-gray-900">{trackCode}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Restaurant</span>
                <p className="text-lg font-semibold text-gray-900 capitalize">{restaurantName}</p>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Order Placed</span>
                <p className="text-lg font-semibold text-gray-900">
                  <FormattedDate dateString={createdAt} />
                </p>
              </div>
            </div>

            <div className="space-y-3">
              <div>
                <span className="text-sm font-medium text-gray-500">Current Status</span>
                <div className="mt-1">
                  <StatusBadge status={status} />
                </div>
              </div>
              <div>
                <span className="text-sm font-medium text-gray-500">Estimated Time</span>
                <ETA
                  currentStatus={status}
                  etaMinutes={eta}
                />
              </div>
            </div>
          </div>
          <OrderStatusTimeline currentStatus={status} />
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\[restaurantSlug]\[tableId]\page.tsx -----

'use client';

import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';

// API functions
import { getPublicMenuItems, getRestaurantDetails } from '@/lib/api/public';

// Components
import CustomerMenuItemCard from '@/app/customer-end-pages/PublicPagesComponents/CustomerMenuItemCard';
import Cart from '@/app/customer-end-pages/PublicPagesComponents/Cart';

// Store
import { useCartStore } from '@/app/customer-end-pages/store/cartStore';

// Types
import { MenuItem as BaseMenuItem, MenuCategory } from '@/types/menu';

// Icons
import { ShoppingCart, Search, Loader2 } from 'lucide-react';

interface RestaurantDetails {
  id: string;
  restaurant_name: string;
}

interface MenuItem extends BaseMenuItem {
  category?: MenuCategory;
}

export default function CustomerMenuPage() {
  const { restaurantSlug, tableId } = useParams<{ restaurantSlug: string; tableId: string }>();

  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [restaurantDetails, setRestaurantDetails] = useState<RestaurantDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  const { totalItems } = useCartStore();

  useEffect(() => {
    if (!restaurantSlug) return;

    const fetchData = async () => {
      setIsLoading(true);
      try {
        const [items, details] = await Promise.all([
          getPublicMenuItems(restaurantSlug),
          getRestaurantDetails(restaurantSlug),
        ]);

        setMenuItems(items || []);
        if (details) setRestaurantDetails(details);
      } catch (error) {
        console.error('Failed to fetch menu data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [restaurantSlug]);

  const filteredItems = menuItems.filter(
    (item) => item.name && item.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const groupedMenu = filteredItems.reduce((acc, item) => {
    const category = (item.category as MenuCategory) || 'mains';
    if (!acc[category]) acc[category] = [];
    acc[category].push(item);
    return acc;
  }, {} as Record<MenuCategory, MenuItem[]>);

  const categoryOrder: MenuCategory[] = ['starters', 'mains', 'desserts', 'drinks'];

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Loader2 className="h-12 w-12 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-screen font-sans">
      <div className="max-w-7xl mx-auto pb-12">
        <header className="sticky top-0 bg-white/80 backdrop-blur-md z-50 p-4 shadow-sm">
          <div className="flex justify-between items-center mb-4">
            <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">
              {restaurantDetails ? restaurantDetails.restaurant_name : 'Menu'}
            </h1>
            <button
              onClick={() => setIsCartOpen(true)}
              className="relative bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700 transition-colors duration-200"
            >
              <ShoppingCart size={20} />
              {totalItems() > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5  flex items-center justify-center animate-bounce">
                  {totalItems()}
                </span>
              )}
            </button>
          </div>

          <div className="relative">
            <Search
              className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"
              size={20}
            />
            <input
              type="text"
              placeholder="Search menu items..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow duration-200"
            />
          </div>
        </header>

        <main className="p-4">
          {!restaurantDetails || filteredItems.length === 0 ? (
            <div className="text-center mt-20">
              <p className="text-xl text-gray-600">
                {searchQuery
                  ? `No menu items found for "${searchQuery}".`
                  : "This restaurant's menu is not available right now."}
              </p>
            </div>
          ) : (
            <div className="space-y-12">
              {categoryOrder.map(
                (category) =>
                  groupedMenu[category] &&
                  groupedMenu[category].length > 0 && (
                    <section key={category}>
                      <h2 className="text-2xl sm:text-3xl font-bold text-gray-800 capitalize mb-6 ">
                        {category}
                      </h2>
                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl-grid-cols-4 gap-6">
                        {groupedMenu[category].map((item) => (
                          <CustomerMenuItemCard key={item.id} item={item} />
                        ))}
                      </div>
                    </section>
                  )
              )}
            </div>
          )}
        </main>
      </div>

      {restaurantDetails && (
        <>
          {/* pass slug so Cart can redirect to /orders/[orderId] */}
          <Cart
            isOpen={isCartOpen}
            onClose={() => setIsCartOpen(false)}
            restaurantId={restaurantDetails.id}
            tableId={String(tableId)}
            restaurantSlug={String(restaurantSlug)}
          />
        </>
      )}
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\customer-end-pages\[restaurantSlug]\page.tsx -----

// src/app/customer-end-pages/[restaurantSlug]/page.tsx

import { getRestaurantBySlug } from "@/lib/api/public";
import { Scan } from 'lucide-react';
import Link from "next/link";

// This page now serves as a guide for users who land on the restaurant slug URL without a table ID.
export default async function RestaurantLandingPage({ params }: { params: { restaurantSlug: string } }) {

  const restaurant = await getRestaurantBySlug(params.restaurantSlug);

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="max-w-md w-full text-center bg-white p-8 rounded-2xl shadow-lg">
        <Scan size={60} className="mx-auto text-blue-500 mb-6" />
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          Welcome to {restaurant?.restaurant_name || 'Our Restaurant'}!
        </h1>
        <p className="text-gray-600 text-lg mb-8">
          To view the menu and place an order, please scan the QR code located at your table.
        </p>
        <div className="bg-blue-50 p-4 rounded-lg">
          <p className="font-semibold text-blue-800">
            Looking for the dashboard?
          </p>
          <Link href="/login" className="text-blue-600 hover:underline">
            Restaurant Login
          </Link>
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu\add\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useMenuItems } from '@/lib/hooks/useMenuItems';
import MenuItemForm from '@/components/menu/MenuItemForm';
import { getMyRestaurant } from '@/lib/api/restaurants';
import { Loader2 } from 'lucide-react';

export default function AddMenuItemPage() {
  const router = useRouter();
  const { addMenuItem } = useMenuItems();
  const [isSubmitting, setIsSubmitting] = useState(false);

  // State to hold the user's restaurant ID
  const [restaurantId, setRestaurantId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Fetch the restaurant ID when the page loads
  useEffect(() => {
    const loadRestaurant = async () => {
      const restaurant = await getMyRestaurant();
      if (restaurant) {
        setRestaurantId(restaurant.id);
      } else {
        console.error('No restaurant found for this user.');
        // You could redirect or show an error toast here.
      }
      setIsLoading(false);
    };
    loadRestaurant();
  }, []);

  // NOTE: photo_url matches DB; available will be defaulted here
  const handleSubmit = async (data: {
    name: string;
    description: string;
    price: number;
    photo_url?: string;
    available?: boolean; // allow coming from form later if you add a checkbox
  }) => {
    if (!restaurantId) {
      alert('Error: Could not find your restaurant ID. Please try logging in again.');
      return;
    }

    setIsSubmitting(true);
    try {
      const newItemData = {
        ...data,
        category: 'mains' as const, // Default category
        available: data.available ?? true, // <-- REQUIRED by NewMenuItem
      };

      // Pass both the form data and the fetched restaurantId to the hook
      await addMenuItem(newItemData, restaurantId);
      router.push('/dashboard/menu');
    } catch (error) {
      console.error('Failed to add menu item:', error);
      // Optionally, show an error toast/message to the user on the form
    } finally {
      setIsSubmitting(false);
    }
  };

  // Show a loading spinner while fetching the restaurant ID
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full p-8">
        <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
          <button
            onClick={() => router.back()}
            className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 transition-colors mr-4"
            aria-label="Go back"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Add New Menu Item</h1>
            <p className="text-gray-700">Create a new item for your restaurant menu.</p>
          </div>
        </div>

        <MenuItemForm
          onSubmit={handleSubmit}
          isSubmitting={isSubmitting}
          onCancel={() => router.push('/dashboard/menu')}
        />
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu\[id]\edit\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useMenuItems } from '@/lib/hooks/useMenuItems';
import MenuItemForm from '@/components/menu/MenuItemForm';
import { Loader2 } from 'lucide-react';
import { MenuItem } from '@/types/menu';

export default function EditMenuItemPage() {
  const params = useParams();
  const router = useRouter();
  // 1. Get the loading state from the hook
  const { menuItems, updateMenuItem, loading: menuItemsLoading } = useMenuItems();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [menuItem, setMenuItem] = useState<MenuItem | null>(null);
  const [isPageLoading, setIsPageLoading] = useState(true);

  const itemId = parseInt(params.id as string);

  // 2. This effect now waits for the data to finish loading
  useEffect(() => {
    // Only proceed if the main loading is done and we have items
    if (!menuItemsLoading && menuItems.length > 0) {
      const itemToEdit = menuItems.find(item => item.id === itemId);
      if (itemToEdit) {
        setMenuItem(itemToEdit);
      }
      // We are done with the page's initial load
      setIsPageLoading(false);
    } 
    // Handle the case where loading finishes but there are no items
    else if (!menuItemsLoading) {
      setIsPageLoading(false);
    }
  }, [menuItems, itemId, menuItemsLoading]); // Added menuItemsLoading as a dependency

  const handleSubmit = async (data: Omit<MenuItem, 'id' | 'restaurant_id' | 'created_at'>) => {
    if (!menuItem) return;

    setIsSubmitting(true);
    try {
      await updateMenuItem(menuItem.id, data);
      router.push('/dashboard/menu');
    } catch (error) {
      console.error('Failed to update menu item:', error);
      setIsSubmitting(false);
    }
  };

  // 3. Show a loading spinner while the page is figuring things out
  if (isPageLoading) {
    return (
      <div className="flex items-center justify-center h-full p-8">
        <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
      </div>
    );
  }

  // 4. This "not found" message will now only show after everything has loaded
  if (!menuItem) {
    return <div className="p-8 text-center text-xl text-gray-700">Menu item not found.</div>;
  }

  return (
    <div className="p-4 md:p-8">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
            <button
              onClick={() => router.back()}
              className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 transition-colors mr-4"
              aria-label="Go back"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Edit Menu Item</h1>
              <p className="text-gray-700">Update the details for this menu item.</p>
            </div>
        </div>

        <MenuItemForm
          initialData={menuItem}
          onSubmit={handleSubmit}
          isSubmitting={isSubmitting}
          onCancel={() => router.push('/dashboard/menu')}
        />
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu\page.tsx -----

// src/app/dashboard/menu/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useMenuItems } from '@/lib/hooks/useMenuItems';
import { MenuItem } from '@/types/menu';
import MenuItemCard from '@/components/menu/MenuItemCard';
import DeleteConfirmation from '@/components/menu/DeleteConfirmation';

export default function MenuPage() {
    const { menuItems, loading, error, deleteMenuItem } = useMenuItems();
    const [itemToDelete, setItemToDelete] = useState<MenuItem | null>(null);
    const [searchQuery, setSearchQuery] = useState('');

    const searchedItems = menuItems.filter(item =>
        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.description.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const handleDelete = async () => {
        if (itemToDelete) {
            await deleteMenuItem(itemToDelete.id);
            setItemToDelete(null);
        }
    };
    const averagePrice = menuItems.length > 0
        ? (menuItems.reduce((sum, item) => sum + item.price, 0) / menuItems.length).toFixed(2)
        : '0.00';

    // **FIX**: The actual JSX for the loading state is now included.
    if (loading) return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-teal-100 p-8 flex items-center justify-center">
            <div className="text-center">
                <div className="w-16 h-16 border-4 border-indigo-500 border-l-transparent rounded-full animate-spin mx-auto mb-4"></div>
                <p className="text-indigo-800">Loading menu items...</p>
            </div>
        </div>
    );

    // **FIX**: The actual JSX for the error state is now included.
    if (error) return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-teal-100 p-8 flex items-center justify-center">
            <div className="bg-white rounded-xl p-6 shadow-lg max-w-md w-full text-center">
                <div className="text-red-500 text-5xl mb-4">âš ï¸</div>
                <h2 className="text-xl font-bold text-gray-800 mb-2">Error Loading Menu</h2>
                <p className="text-gray-600 mb-4">{error}</p>
                <button
                    onClick={() => window.location.reload()}
                    className="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors"
                >
                    Try Again
                </button>
            </div>
        </div>
    );

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-teal-100 p-4 md:p-8">
            <div className="max-w-7xl mx-auto">
                <div className="bg-white rounded-2xl shadow-md p-6 mb-8">
                    <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                        <div>
                            <h1 className="text-3xl font-bold text-gray-800">Menu Management</h1>
                            <p className="text-gray-600 mt-1">Manage your restaurant menu items</p>
                        </div>
                        <Link
                            href="/dashboard/menu/add"
                            className="flex items-center bg-gradient-to-r from-indigo-500 to-blue-500 text-white px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 transition-all shadow-lg hover:shadow-xl"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" /></svg>
                            Add New Item
                        </Link>
                    </div>
                </div>

                <div className="bg-white rounded-2xl shadow-md p-6 mb-8">
                    <div className="relative">
                        <input
                            type="text" placeholder="Search menu items..."
                            value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)}
                            className="w-full px-4 py-3 pl-12 bg-gray-100 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        />
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 absolute left-4 top-3 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
                    </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-5 mb-8">
                    <div className="bg-white rounded-2xl shadow-md p-5 flex items-center">
                        <div className="rounded-xl bg-indigo-100 p-3 mr-4"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg></div>
                        <div><p className="text-sm text-gray-500">Total Items</p><p className="text-2xl font-bold text-gray-800">{menuItems.length}</p></div>
                    </div>
                    <div className="bg-white rounded-2xl shadow-md p-5 flex items-center">
                        <div className="rounded-xl bg-emerald-100 p-3 mr-4"><svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-emerald-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg></div>
                        <div><p className="text-sm text-gray-500">Avg. Price</p><p className="text-2xl font-bold text-gray-800">${averagePrice}</p></div>
                    </div>
                </div>

                <div>
                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">Menu Items</h2>
                        <p className="text-gray-600">Showing {searchedItems.length} of {menuItems.length} items</p>
                    </div>
                    {searchedItems.length === 0 ? (
                        <div className="bg-white rounded-2xl shadow-md p-12 text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                            <h3 className="text-xl font-medium text-gray-700 mb-2">No menu items found</h3>
                            <p className="text-gray-500 mb-6">{searchQuery ? 'Try a different search term' : 'Get started by adding your first menu item'}</p>
                            <Link href="/dashboard/menu/add" className="inline-flex items-center bg-gradient-to-r from-indigo-500 to-blue-500 text-white px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 transition-all"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" /></svg> Add New Item</Link>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {searchedItems.map(item => (
                                <MenuItemCard
                                    key={item.id}
                                    item={item}
                                    onEdit={`/dashboard/menu/${item.id}/edit`}
                                    onDelete={() => setItemToDelete(item)}
                                />
                            ))}
                        </div>
                    )}
                </div>
            </div>

            <DeleteConfirmation
                isOpen={!!itemToDelete}
                onClose={() => setItemToDelete(null)}
                onConfirm={handleDelete}
                itemName={itemToDelete?.name || ''}
            />
        </div>
    );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\menu_items\page.tsx -----

// src/app/dashboard/menu_items/page.tsx
"use client";

import { useState, useMemo } from "react";
import Link from "next/link";
import { useMenuItems } from "@/lib/hooks/useMenuItems";
import MenuItemCard from "@/components/menu/MenuItemCard";
import DeleteConfirmation from "@/components/menu/DeleteConfirmation";
import { toast } from "sonner";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Plus, Loader2 } from "lucide-react";
import { MenuItem } from "@/types/menu";

// NOTE: This component seems redundant with /dashboard/menu/page.tsx
// Consider consolidating into one to simplify maintenance.

export default function MenuItemsPage() {
  const { menuItems, loading, error, deleteMenuItem } = useMenuItems();
  const [searchTerm, setSearchTerm] = useState("");
  const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<MenuItem | null>(null);

  const filteredItems = useMemo(() => {
    return menuItems.filter((item) =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm, menuItems]);

  const handleDeleteClick = (item: MenuItem) => {
    setItemToDelete(item);
    setDeleteModalOpen(true);
  };

  const confirmDelete = async () => {
    if (!itemToDelete) return;
    try {
      await deleteMenuItem(itemToDelete.id);
      toast.success(`"${itemToDelete.name}" was deleted successfully.`);
    } catch (err) {
      toast.error("Failed to delete the item.");
    } finally {
      setDeleteModalOpen(false);
      setItemToDelete(null);
    }
  };

  return (
    <>
      <div className="min-h-[80vh] px-4 sm:px-6 lg:px-8 py-8">
        <div className="max-w-7xl mx-auto space-y-6">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-slate-800">All Menu Items</h1>
            <Link href="/dashboard/menu/add">
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                Add New Item
              </Button>
            </Link>
          </div>

          <Card>
            <CardContent className="p-4">
              <div className="relative flex-1 max-w-md">
                <Search className="w-4 h-4 text-slate-400 absolute left-3 top-1/2 -translate-y-1/2" />
                <Input placeholder="Search menu items..." className="pl-9" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
              </div>
            </CardContent>
          </Card>

          {loading ? (
            <div className="flex justify-center items-center h-64"><Loader2 className="w-8 h-8 animate-spin text-slate-500" /></div>
          ) : error ? (
            <div className="text-red-500 bg-red-50 p-4 rounded-lg">{error}</div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {filteredItems.map((item) => (
                // FIXED: Corrected the onEdit link to match the actual file structure
                <MenuItemCard key={item.id} item={item} onEdit={`/dashboard/menu/${item.id}/edit`} onDelete={() => handleDeleteClick(item)} />
              ))}
            </div>
          )}
        </div>
      </div>
      <DeleteConfirmation isOpen={isDeleteModalOpen} onClose={() => setDeleteModalOpen(false)} onConfirm={confirmDelete} itemName={itemToDelete?.name || ""} />
    </>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\orders\LiveOrders.tsx -----

'use client';

import React, { useEffect, useMemo, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import LiveOrdersComponent from '@/components/LiveOrdersComponent';
import { Input } from '@/components/ui/input';
import { AlertTriangle } from 'lucide-react';

export type OrderItemStatus = 'Pending' | 'Confirmed' | 'Preparing' | 'Ready' | 'Cancelled';

export interface OrderItem {
  id: string;
  quantity: number;
  price: number;
  status: OrderItemStatus | null;
  created_at: string;
  order: {
    id: string;
    track_code: string | null;
    table_id: string | null;
    table_number: string | null;
    restaurant: { id: string; name: string; user_id: string };
  };
  menu_item: { id: string; name: string };
}

const LiveOrders = () => {
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  const [liveOrders, setLiveOrders] = useState<OrderItem[]>([]);
  const [restaurantIds, setRestaurantIds] = useState<string[]>([]);
  const [activeStatus, setActiveStatus] = useState<OrderItemStatus | 'All'>('All');
  const [search, setSearch] = useState('');

  // ===== helpers =====
  const dbToUiStatus = (db: string | null): OrderItemStatus | null => {
    switch (db) {
      case 'pending': return 'Pending';
      case 'confirmed': return 'Confirmed';
      case 'preparing': return 'Preparing';
      case 'ready': return 'Ready';
      case 'cancelled': return 'Cancelled';
      default: return null;
    }
  };

  const formatDate = (iso: string) =>
    new Date(iso).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

  const getTotalPrice = (orders: OrderItem[] | null) =>
    (orders ?? []).reduce((sum, o) => sum + o.price * o.quantity, 0);

  // ===== fetch all orders for restaurants owned by the logged-in user =====
  const fetchLiveOrders = async () => {
    setRefreshing(true);
    try {
      // 1) current user
      const { data: { user }, error: authErr } = await supabase.auth.getUser();
      if (authErr) throw authErr;
      if (!user) throw new Error('Not authenticated');

      // 2) restaurants owned by this user
      const { data: restaurants, error: restErr } = await supabase
        .from('restaurants')
        .select('id, restaurant_name, user_id')
        .eq('user_id', user.id);

      if (restErr) throw restErr;

      const ids = (restaurants ?? []).map(r => r.id);
      setRestaurantIds(ids);

      if (ids.length === 0) {
        setLiveOrders([]);
        setErrorMsg('âš ï¸ No restaurants found for your account.');
        return;
      }

      // 3) orders that belong only to those restaurants
      const { data, error } = await supabase
        .from('orders')
        .select(`
          id, track_code, status, created_at,
          table:tables ( id, table_number ),
          restaurant:restaurants ( id, restaurant_name, user_id ),
          order_items (
            id, quantity, price,
            menu_item:menu_items ( id, name )
          )
        `)
        .in('restaurant_id', ids)
        .in('status', ['pending','confirmed','preparing','ready','cancelled'])
        .order('created_at', { ascending: false });

      if (error) throw error;

      // 4) normalize â†’ one card per order item
      const normalized: OrderItem[] = (data || []).flatMap((order: any) =>
        (order.order_items || []).map((item: any) => ({
          id: item.id,
          quantity: item.quantity,
          price: item.price,
          status: dbToUiStatus(order.status),
          created_at: order.created_at,
          order: {
            id: order.id,
            track_code: order.track_code ?? null,
            table_id: order.table?.id ? String(order.table.id) : null,
            table_number: order.table?.table_number ?? null,
            restaurant: {
              id: order.restaurant?.id ?? '',
              name: order.restaurant?.restaurant_name ?? '',
              user_id: order.restaurant?.user_id ?? '',
            },
          },
          menu_item: {
            id: item.menu_item?.id ?? '',
            name: item.menu_item?.name ?? '',
          },
        }))
      );

      setLiveOrders(normalized);
      setErrorMsg(null);
    } catch (e: any) {
      console.error('[LiveOrders.fetch]', e);
      setErrorMsg(e?.message || 'Failed to load orders');
      setLiveOrders([]);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // initial load
  useEffect(() => { fetchLiveOrders(); }, []);

  // realtime: refresh when any order changes for the ownerâ€™s restaurants
  useEffect(() => {
    if (!restaurantIds.length) return;

    const channels = restaurantIds.map((rid) =>
      supabase
        .channel(`orders-${rid}`)
        .on(
          'postgres_changes',
          { event: '*', schema: 'public', table: 'orders', filter: `restaurant_id=eq.${rid}` },
          () => fetchLiveOrders()
        )
        .subscribe()
    );

    return () => {
      channels.forEach((ch) => supabase.removeChannel(ch));
    };
  }, [restaurantIds]);

  // status + search filter
  const filteredOrders = useMemo(() => {
    let orders = [...liveOrders];

    if (activeStatus !== 'All') {
      orders = orders.filter((o) => o.status === activeStatus);
    }

    if (search.trim()) {
      const q = search.toLowerCase();
      orders = orders.filter((o) =>
        (o.order.track_code || '').toLowerCase().includes(q) ||
        (o.order.table_number || '').toLowerCase().includes(q) ||
        (o.menu_item.name || '').toLowerCase().includes(q) ||
        (o.order.restaurant.name || '').toLowerCase().includes(q) ||
        (o.status || '').toLowerCase().includes(q)
      );
    }
    return orders;
  }, [liveOrders, activeStatus, search]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
      </div>
    );
  }

  return (
    <div>
      {/* Header + Search */}
      <div className="mb-4 flex flex-col sm:flex-row gap-3 sm:items-center sm:justify-between">
        <div>
          <h2 className="text-xl font-semibold">Live Orders</h2>
          {errorMsg && (
            <div className="mt-2 flex items-center gap-2 bg-red-100 border border-red-300 text-red-700 px-3 py-2 rounded-md text-sm">
              <AlertTriangle className="h-4 w-4" />
              <span>{errorMsg}</span>
            </div>
          )}
        </div>
        <Input
          placeholder="Search by track code, table, item, or status..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="max-w-md"
        />
      </div>

      <LiveOrdersComponent
        liveOrders={liveOrders}
        filteredOrders={filteredOrders}
        refreshing={refreshing}
        fetchLiveOrders={fetchLiveOrders}
        activeStatus={activeStatus}
        setActiveStatus={setActiveStatus}
        formatDate={formatDate}
        getTotalPrice={(orders) => getTotalPrice(orders)}
        errorMsg={errorMsg}
      />
    </div>
  );
};

export default LiveOrders;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\orders\OrderHistory.tsx -----

// src/app/dashboard/orderhistory/page.tsx

import React from 'react';
import { createServerClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Clock, Tag, CircleDollarSign, AlertCircle } from 'lucide-react';

// Define the type for our orders directly in this file
type HistoricalOrder = {
  id: string;
  track_code: string;
  created_at: string;
  status: 'pending' | 'confirmed' | 'preparing' | 'ready' | 'complete' | 'cancelled';
  total_amount: number;
};

// Helper functions can be defined at the top level
const formatTime = (isoString: string) => {
    return new Date(isoString).toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
    });
};

const getStatusVariant = (status: string) => {
    switch (status) {
        case 'complete': return 'default';
        case 'cancelled': return 'destructive';
        default: return 'secondary';
    }
};

// This is an async Server Component
export default async function OrderHistoryPage() {
  const supabase = createServerClient();

  // 1. Get the authenticated user (server-side)
  const { data: { user } } = await (await supabase).auth.getUser();
  if (!user) {
    redirect('/login'); // Redirect if not logged in
  }

  // 2. Find the user's restaurant
  const { data: restaurant, error: restaurantError } = await (await supabase)
    .from("restaurants")
    .select("id")
    .eq("user_id", user.id)
    .single();

  if (restaurantError || !restaurant) {
    return (
        <div className="bg-red-50 text-red-700 p-4 rounded-lg m-4">
            <AlertCircle className="inline-block mr-2" />
            Error: Could not find a restaurant associated with your account.
        </div>
    );
  }

  // 3. Fetch all orders
  const { data: orders, error: ordersError } = await (await supabase)
    .from("orders")
    .select("id, status, total_amount, created_at, track_code")
    .eq("restaurant_id", restaurant.id)
    .order("created_at", { ascending: false });

  if (ordersError) {
     return (
        <div className="bg-red-50 text-red-700 p-4 rounded-lg m-4">
            <AlertCircle className="inline-block mr-2" />
            Error: {ordersError.message}
        </div>
    );
  }
  
  // 4. Render the UI
  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-4xl mx-auto">
      <div className="mb-6">
          <h1 className="text-2xl font-bold text-slate-800">Order History</h1>
          <p className="text-slate-500">Showing all completed or cancelled orders.</p>
      </div>
      {orders && orders.length > 0 ? (
        <div className="space-y-4">
          {(orders as HistoricalOrder[]).map((order) => (
            <Card key={order.id} className="shadow-sm hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                       <Tag className="h-4 w-4 text-slate-500" />
                       <span className="font-mono text-sm font-semibold text-slate-800">{order.track_code}</span>
                    </div>
                     <div className="flex items-center gap-2 text-sm text-slate-500">
                        <Clock className="h-4 w-4" />
                        <span>{formatTime(order.created_at)}</span>
                     </div>
                  </div>
                  <Badge variant={getStatusVariant(order.status)} className="capitalize">{order.status}</Badge>
                </div>
                <div className="border-t my-3"></div>
                <div className="flex justify-between items-center">
                     <span className="text-sm font-medium text-slate-600">Total</span>
                     <div className="flex items-center gap-2 font-semibold text-slate-800">
                        <CircleDollarSign className="h-4 w-4 text-green-600" />
                        <span>{order.total_amount.toFixed(2)}</span>
                     </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="bg-slate-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
            <Clock className="h-8 w-8 text-slate-500" />
          </div>
          <h3 className="text-lg font-medium mb-2 text-slate-800">No Orders Found</h3>
          <p className="text-slate-500">There are no orders in your history yet.</p>
        </div>
      )}
    </div>
  );
};


----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\orders\page.tsx -----

// src/app/dashboard/orders/page.tsx
import React from 'react';
import LiveOrders from './LiveOrders';
import OrderHistory from './OrderHistory';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';

export default function Orders() {
  return (
    <div className="mx-auto max-w-7xl px-4 py-6 md:px-6 lg:px-8">
      {/* Page header */}
      <div className="mb-6">
        <h1 className="text-2xl font-semibold tracking-tight">Orders</h1>
        <p className="text-sm text-muted-foreground">
          Monitor live orders and browse historical activity.
        </p>
      </div>

      <Separator className="mb-6" />

      {/* Content grid */}
      <div className="grid grid-cols-1 gap-6 xl:grid-cols-2">
        {/* Live Orders */}
        <Card className="shadow-sm">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg">Live Orders</CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            {/* Make inner content scroll on small screens while keeping the card tidy */}
            <div className="max-h-[70vh] overflow-auto px-4 pb-4">
              <LiveOrders />
            </div>
          </CardContent>
        </Card>

        {/* Order History */}
        <Card className="shadow-sm">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg">Order History</CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <div className="max-h-[70vh] overflow-auto px-4 pb-4">
              <OrderHistory />
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\profile\page.tsx -----

// src/app/dashboard/profile/page.tsx
'use client';

import React, { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import { updateProfile } from '@/lib/api/profile';
import RestaurantProfile from '@/components/RestaurantProfile';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { AlertCircle } from 'lucide-react';
import type { Restaurant } from '@/lib/types/types';

export default function RestaurantProfilePage() {
Â  const [restaurant, setRestaurant] = useState<Restaurant | null>(null);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState<string | null>(null);

Â  useEffect(() => {
Â  Â  const fetchRestaurant = async () => {
Â  Â  Â  setLoading(true);
Â  Â  Â  setError(null);
Â  Â  Â  try {
Â  Â  Â  Â  const { data: { user }, error: authError } = await supabase.auth.getUser();
Â  Â  Â  Â  if (authError || !user) {
Â  Â  Â  Â  Â  throw new Error('You must be logged in to view this page.');
Â  Â  Â  Â  }

Â  Â  Â  Â  const { data, error: dbError } = await supabase
Â  Â  Â  Â  Â  .from('restaurants')
Â  Â  Â  Â  Â  .select('*')
Â  Â  Â  Â  Â  .eq('user_id', user.id)
Â  Â  Â  Â  Â  .single();

Â  Â  Â  Â  if (dbError) {
Â  Â  Â  Â  Â  throw new Error('Could not fetch your restaurant profile. Please try again.');
Â  Â  Â  Â  }

Â  Â  Â  Â  if (data) {
Â  Â  Â  Â  Â  setRestaurant(data);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  throw new Error('No restaurant profile found for your account.');
Â  Â  Â  Â  }
Â  Â  Â  } catch (e: any) {
Â  Â  Â  Â  setError(e.message);
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchRestaurant();
Â  }, []);

Â  const handleUpdateProfile = async (updatedData: Partial<Restaurant>) => {
Â  Â  if (!restaurant) throw new Error("No restaurant to update.");
Â  Â  
Â  Â  const data = await updateProfile(updatedData);
Â  Â  setRestaurant(data as Restaurant);
Â  };

Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="space-y-4 p-4">
Â  Â  Â  Â  <Skeleton className="h-24 w-full" />
Â  Â  Â  Â  <Skeleton className="h-64 w-full" />
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (error) {
Â  Â  return (
Â  Â  Â  <div className="p-4">
Â  Â  Â  Â  <Alert variant="destructive">
Â  Â  Â  Â  Â  <AlertCircle className="h-4 w-4" />
Â  Â  Â  Â  Â  <AlertDescription>{error}</AlertDescription>
Â  Â  Â  Â  </Alert>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!restaurant) {
Â  Â  return (
Â  Â  Â  <div className="p-4">
Â  Â  Â  Â  <Alert>
Â  Â  Â  Â  Â  <AlertDescription>No restaurant profile was found.</AlertDescription>
Â  Â  Â  Â  </Alert>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return <RestaurantProfile restaurant={restaurant} onUpdate={handleUpdateProfile} />;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\tables\add\page.tsx -----

// // src/app/dashboard/tables/add/page.tsx

// 'use client';
// import { useEffect, useState } from 'react';
// import { useRouter } from 'next/navigation';
// import { generateQR } from '@/lib/api/generateQR';
// import { supabase } from '@/lib/supabase/client';
// import { Skeleton } from '@/components/ui/skeleton';
// import { Loader2 } from 'lucide-react';
// import { Restaurant } from '@/types/restaurant'; // Using a shared type

// export default function AddTablePage() {
//   const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
//   const router = useRouter();
//   const [loading, setLoading] = useState<boolean>(true);
//   const [restaurant, setRestaurant] = useState<Restaurant | null>(null);
//   // FIX: Table identifier is a string, not just a number
//   const [tableIdentifier, setTableIdentifier] = useState<string>('');
//   const [generatedUrl, setGeneratedUrl] = useState<string | null>(null);

//   useEffect(() => {
//     const fetchRestaurant = async () => {
//       const { data: { user } } = await supabase.auth.getUser();
//       if (!user) {
//         setLoading(false);
//         // Optionally, redirect to login
//         router.push('/login');
//         return;
//       }

//       const { data, error } = await supabase
//         .from('restaurants')
//         .select('*')
//         .eq('user_id', user.id)
//         .single();

//       if (data) {
//         setRestaurant(data);
//       } else {
//         console.error('Error fetching restaurant data:', error);
//       }
//       setLoading(false);
//     };
//     fetchRestaurant();
//   }, [router]);

//   // FIX: Make the handler async and use state directly
//   const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
//     e.preventDefault();
//     if (!restaurant || !tableIdentifier.trim()) {
//         alert("Restaurant data is missing or table name is empty.");
//         return;
//     }

//     setIsSubmitting(true);
//     setGeneratedUrl(null);

//     try {
//       // The API route calls the edge function to do all the work
//       const qrUrl = await generateQR(restaurant.id, tableIdentifier);
//       setGeneratedUrl(qrUrl);
//       alert(`Successfully created table "${tableIdentifier}"!`);
//       // You can now download the QR or navigate away
//       router.push('/dashboard/tables');
//     } catch (error: any) {
//       console.error(error);
//       alert(`Failed to create table: ${error.message}`);
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   const handleDownloadQR = () => {
//     if (!generatedUrl) return;
//     const link = document.createElement("a");
//     link.href = generatedUrl;
//     link.download = `table-${tableIdentifier.replace(/\s+/g, '-')}.png`;
//     link.click();
//   };

//   if (loading) return <Skeleton className="h-64 w-full" />;
//   if (!restaurant) return <p className="text-red-600">No restaurant profile found.</p>;

//   return (
//     <div className="p-4 sm:p-8">
//       <div className="max-w-lg mx-auto">
//         <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
//           <button
//             onClick={() => router.back()}
//             className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 mr-4"
//             aria-label="Go back"
//           >
//             <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
//             </svg>
//           </button>
//           <div>
//             <h1 className="text-3xl font-bold text-gray-800">Add New Table</h1>
//             <p className="text-gray-600 mt-1">Create a new table and generate its QR code.</p>
//           </div>
//         </div>

//         <form onSubmit={handleSubmit} className="bg-white p-8 rounded-2xl shadow-md space-y-6">
//           <div>
//             <label htmlFor="tableIdentifier" className="block text-lg font-semibold text-gray-700 mb-2">
//               Table Name or Number
//             </label>
//             <input
//               id="tableIdentifier"
//               type="text"
//               name="tableIdentifier"
//               value={tableIdentifier}
//               onChange={(e) => setTableIdentifier(e.target.value)}
//               className="w-full text-lg p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
//               placeholder="e.g., Patio Table 4 or 12"
//               required
//             />
//           </div>
//           <div className="flex justify-end gap-4 pt-4 border-t border-gray-200">
//             <button
//               type="button"
//               onClick={() => router.back()}
//               className="px-6 py-3 border-2 border-gray-300 rounded-xl text-gray-700 font-semibold hover:bg-gray-100"
//             >
//               Cancel
//             </button>
//             <button
//               type="submit"
//               disabled={isSubmitting}
//               className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold px-6 py-3 rounded-xl disabled:opacity-50 flex items-center justify-center"
//             >
//               {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
//               {isSubmitting ? 'Saving...' : 'Save Table'}
//             </button>
//           </div>
//         </form>

//         {generatedUrl && (
//           <div className="mt-8 bg-white p-6 rounded-2xl shadow-md text-center">
//             <h3 className="text-lg font-semibold mb-4">QR Code Generated!</h3>
//             <img src={generatedUrl} alt="Generated QR Code" className="mx-auto h-40 w-40" />
//             <button
//               onClick={handleDownloadQR}
//               className="mt-4 w-full bg-green-600 text-white font-bold py-3 rounded-lg hover:bg-green-700"
//             >
//               Download QR
//             </button>
//           </div>
//         )}
//       </div>
//     </div>
//   );
// }
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
// import { useTables } from '@/lib/hooks/useTables';
import { generateQR } from '@/lib/api/generateQR';
import {supabase} from '@/lib/supabase/client'
import { Skeleton } from '@/components/ui/skeleton';
type Restaurant = {
  id: string;
  owner_name: string;
  restaurant_name: string;
  email: string;
  phone: string;
  address: string;
  upi_id: string;
  logo_url: string | null;
  qr_url: string;
  created_at: Date | null;
  user_id: string;
};

export default function AddTablePage() {
  const [isSubmitting,setIsSubmitting] =useState<boolean>();
  const router = useRouter();
  const [loading,setLoading] = useState<boolean>(true);
  const [restaurant,setRestaurant] = useState<Restaurant | null>(null);
  const [tableNumber, setTableNumber] = useState<number>();
  const [url, setUrl] = useState<string>();
  
  useEffect(()=>{
      const fetchRestaurant = async() => {
        //getting the details of the current user form the supabase
        const {data:{user},error:authError} = await supabase.auth.getUser();
        if(authError || !user){
          setLoading(false)
          return
        }
        console.log("user is below"); 
        console.log(user)
        //getting the details of the restaurant using the user_id fetched above.
    const { data, error } = await supabase
      .from('restaurants') 
      .select('*')
      .eq('user_id', user.id)
      .single();
          if(error){
            console.log('error in fetching the restaurants data')
          }else{
            setRestaurant(data);
            setLoading(false);
            console.log(data);
          }
        }
        fetchRestaurant()
      },[]) 


    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      const form = e.currentTarget; 
      const formData = new FormData(form);
      const tableNumberRaw = formData.get('tableNumber') as string;
      console.log(tableNumberRaw);
      const tableNumber = Number(tableNumberRaw);
      console.log(`table number is ${tableNumber}`)
      setTableNumber(tableNumber);

        const restaurantId = restaurant?.id;
        console.log(restaurantId);
    
        const createTable = async (restaurantId:string,tableNumber:number)=>{
        const qrUrl = await generateQR(restaurantId, tableNumber);
        console.log(qrUrl);
        setUrl(qrUrl);
        const { data, error } = await supabase.rpc("create_table_with_qr", {
        restaurant_uuid: restaurantId,
        table_num: tableNumber,
        qr_url: qrUrl,
    });
    if (error) throw error;
    console.log("Table created:", data);
      }
      restaurantId && createTable(restaurantId,tableNumber);
    };

const handleDownloadQR = (url: string) => {
  const link = document.createElement("a");
  link.href = url;
  link.download = `table-${tableNumber}.png`;
  link.click();
};

  
    if(loading) return <Skeleton className="h-32 w-full" />
    // if (!restaurant) return <p className="text-black-500  ">No restaurant profile found.</p>
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-4 sm:p-8 flex items-center justify-center">
      <div className="max-w-lg w-full">
        
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex items-center">
            {/* This is the blue back button */}
            <button
              onClick={() => router.back()}
              className="p-2 rounded-lg bg-indigo-500 text-white hover:bg-indigo-600 transition-colors mr-4"
              aria-label="Go back"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-3xl font-bold text-gray-800">Add New Table</h1>
              <p className="text-gray-600 mt-1">Create a new table and generate its QR code.</p>
            </div>
        </div>

        <form onSubmit={handleSubmit} className="bg-white p-8 rounded-2xl shadow-md space-y-6">
          <div>
            <label htmlFor="name" className="block text-lg font-semibold text-gray-700 mb-2">
              Table Name
            </label>
            <input
  id="tableNumber"
  type="text"
  name="tableNumber"
  value={tableNumber ?? ""}
  onChange={(e) => setTableNumber(Number(e.target.value))}
  className="w-full text-lg p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
  placeholder="e.g., Patio Table 4"
  required
/>

          </div>
          <div className="flex justify-end gap-4 pt-4 border-t border-gray-200">
              <button 
                type="button" 
                onClick={() => router.back()} 
                className="px-6 py-3 border-2 border-gray-300 rounded-xl text-gray-700 font-semibold hover:bg-gray-100 hover:border-gray-400 transition-all"
              >
                  Cancel
              </button>
              <button 
                
                type="submit" 
                disabled={isSubmitting} 
                className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
              >
                  {isSubmitting ? 'Saving...' : 'Save Table'}
              </button>
          </div>
        </form>
        <button
                onClick={()=>url && handleDownloadQR(url)}
              >
                Download QR
              </button>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\tables\[id]\edit\page.tsx -----

// src/app/dashboard/tables/[id]/edit/page.tsx
'use client';

import { useState, useEffect, FormEvent } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { supabase } from '@/lib/supabase/client';
import { Loader2 } from 'lucide-react';
import { toast } from 'sonner';

interface Table {
    id: string;
    table_number: string;
}

export default function EditTablePage() {
    const router = useRouter();
    const params = useParams();
    const tableId = params.id as string;

    const [table, setTable] = useState<Table | null>(null);
    const [tableNumber, setTableNumber] = useState('');
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        if (!tableId) return;

        const fetchTable = async () => {
            setLoading(true);
            const { data, error } = await supabase
                .from('tables')
                .select('id, table_number')
                .eq('id', tableId)
                .single();

            if (error || !data) {
                toast.error('Could not find the specified table.');
                router.push('/dashboard/tables');
            } else {
                setTable(data as Table);
                setTableNumber(data.table_number);
            }
            setLoading(false);
        };

        fetchTable();
    }, [tableId, router]);

    const handleSubmit = async (e: FormEvent) => {
        e.preventDefault();
        if (!tableNumber.trim()) {
            toast.error("Table name cannot be empty.");
            return;
        }
        setIsSubmitting(true);
        try {
            const { error } = await supabase
                .from('tables')
                .update({ table_number: tableNumber })
                .eq('id', tableId);

            if (error) throw error;

            toast.success('Table updated successfully!');
            router.push('/dashboard/tables');
            router.refresh(); // Tell Next.js to refresh server components
        } catch (error: any) {
            toast.error(`Update failed: ${error.message}`);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center h-full p-8">
                <Loader2 className="h-12 w-12 animate-spin text-indigo-500" />
            </div>
        );
    }
    
    if (!table) return null;

    return (
        <div className="p-4 sm:p-8">
            <div className="max-w-lg mx-auto">
                <div className="bg-white rounded-2xl shadow-md p-6 mb-8">
                     <h1 className="text-3xl font-bold text-gray-800">Edit Table</h1>
                     <p className="text-gray-600 mt-1">Update the name or number for this table.</p>
                </div>

                <form onSubmit={handleSubmit} className="bg-white p-8 rounded-2xl shadow-md space-y-6">
                    <div>
                        <label htmlFor="tableIdentifier" className="block text-lg font-semibold text-gray-700 mb-2">
                            Table Name or Number
                        </label>
                        <input
                            id="tableIdentifier"
                            type="text"
                            value={tableNumber}
                            onChange={(e) => setTableNumber(e.target.value)}
                            className="w-full text-lg p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
                            placeholder="e.g., Patio Table 4 or 12"
                            required
                        />
                    </div>
                    <div className="flex justify-end gap-4 pt-4 border-t border-gray-200">
                        <button
                            type="button"
                            onClick={() => router.back()}
                            className="px-6 py-3 border-2 border-gray-300 rounded-xl text-gray-700 font-semibold hover:bg-gray-100"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            disabled={isSubmitting}
                            className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold px-6 py-3 rounded-xl disabled:opacity-50 flex items-center justify-center"
                        >
                            {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                            {isSubmitting ? 'Saving...' : 'Save Changes'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\tables\page.tsx -----

'use client';

import Link from 'next/link';
import { useTables } from '@/lib/hooks/useTables';
import QrCodeDisplay from '@/components/tables/QrCodeDisplay';
import { Plus, Trash2, Edit } from 'lucide-react';

export default function TablesPage() {
  const { tables, loading, deleteTable } = useTables();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="w-12 h-12 border-4 border-indigo-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white rounded-2xl shadow-md p-6 mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Table Management</h1>
            <p className="text-gray-600 mt-1">Add, view, and manage your restaurant's tables and QR codes.</p>
          </div>
          <Link 
            href="/dashboard/tables/add" 
            className="flex items-center gap-2 bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold px-6 py-3 rounded-xl hover:from-indigo-600 hover:to-blue-600 transition-all shadow-md hover:shadow-lg"
          >
            <Plus size={20} />
            Add New Table
          </Link>
        </div>
        
        {tables.length === 0 ? (
          <div className="text-center bg-white p-12 rounded-2xl shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              <h2 className="mt-4 text-2xl font-semibold text-gray-800">No tables found</h2>
              <p className="text-gray-500 mt-2">Get started by adding your first table to generate a QR code.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {tables.map(table => (
              <div key={table.id} className="bg-white p-6 rounded-2xl shadow-md flex flex-col justify-between transition-all hover:shadow-xl hover:-translate-y-1">
                <h2 className="text-xl font-bold text-center text-gray-800 mb-4">{table.table_number}</h2>
                {table.qr_code_url && table.qr_code_url !== 'generating...' ? (
                  <QrCodeDisplay url={table.qr_code_url} tableName={table.table_number} />
                ) : (
                  <div className="flex items-center justify-center h-40 text-gray-500">
                    <div className="w-6 h-6 border-2 border-gray-300 border-t-transparent rounded-full animate-spin"></div>
                  </div>
                )}
                 <div className="flex justify-between items-center mt-4 pt-4 border-t">
                    <Link href={`/dashboard/tables/${table.id}/edit`} className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium transition-colors">
                        <Edit size={14} />
                        Edit
                    </Link>
                    <button onClick={() => deleteTable(table.id)} className="flex items-center gap-2 text-red-500 hover:text-red-700 font-medium transition-colors">
                        <Trash2 size={14} />
                        Delete
                    </button>
                 </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\test\page.tsx -----

// src/app/dashboard/test/page.tsx

import { createServerClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';

export default async function TestPage() {
  const cookieStore = cookies();
  const supabase = createServerClient(); // FIXED: Removed await

  const {
    data: { user },
  } = await supabase.auth.getUser();

  let tablesData = null;
  let tablesError = null;

  if (user) {
    const { data, error } = await supabase
      .from('tables')
      .select('*')
      .limit(5);
    tablesData = data;
    tablesError = error;
  }

  return (
    <div className="p-8 font-sans">
      <h1 className="text-2xl font-bold mb-4">Server-Side Authentication Test</h1>
      <div className="bg-gray-100 p-4 rounded-lg space-y-2">
        <h2 className="font-semibold text-lg">User Status:</h2>
        {user ? (
          <pre className="bg-green-100 text-green-800 p-2 rounded text-sm overflow-x-auto">
            {JSON.stringify(user, null, 2)}
          </pre>
        ) : (
          <p className="text-red-600 font-medium">No user session found on the server.</p>
        )}
      </div>
      <div className="bg-gray-100 p-4 rounded-lg space-y-2 mt-4">
        <h2 className="font-semibold text-lg">Tables Data Fetch:</h2>
        {tablesError ? (
          <pre className="bg-red-100 text-red-800 p-2 rounded text-sm overflow-x-auto">
            Error fetching tables: {tablesError.message}
          </pre>
        ) : (
          <pre className="bg-blue-100 text-blue-800 p-2 rounded text-sm overflow-x-auto">
            {tablesData ? JSON.stringify(tablesData, null, 2) : 'No data or no user to fetch for.'}
          </pre>
        )}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\layout.tsx -----

 'use client';
import React, { useState } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import {
  Home,
  UtensilsCrossed,
  SquareKanban,
  LogOut,
  ListOrdered,
} from 'lucide-react';
import { logout } from '@/lib/auth/logout';
import { DashboardNavCards } from '@/components/DashboardNavCards';

function NavItem({
  href,
  label,
  icon: Icon,
}: {
  href: string;
  label: string;
  icon: React.ComponentType<{ size?: number }>;
}) {
  const pathname = usePathname();
  const isActive = pathname.startsWith(href);

  return (
    <Link
      href={href}
      aria-current={isActive ? 'page' : undefined}
      className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-all text-lg font-medium ${
        isActive
          ? 'bg-indigo-600 text-white shadow-md'
          : 'text-gray-600 hover:bg-gray-100'
      }`}
    >
      <Icon size={24} />
      {label}
    </Link>
  );
}

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);


  const navItems = [
    { href: '/dashboard', label: 'Home', icon: Home },
    { href: '/dashboard/menu', label: 'Menu', icon: UtensilsCrossed },
    { href: '/dashboard/tables', label: 'Tables', icon: SquareKanban },
    { href: '/dashboard/orders', label: 'Orders', icon: ListOrdered }, // âœ… Orders added
  ];

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <DashboardNavCards />
      {/* Sidebar
      <aside className="w-64 bg-white shadow-md flex flex-col">
        <div className="p-6 text-2xl font-bold text-indigo-600 border-b">
          QuickBite QR
        </div>
        <nav className="flex-1 p-4 space-y-2">
          {navItems.map((item) => (
            <NavItem key={item.href} {...item} />
          ))}
        </nav>
        <div className="p-4 border-t">
          <button
            onClick={handleLogout}
            disabled={loading}
            aria-label="Logout"
            className="flex items-center gap-3 w-full px-4 py-3 rounded-lg text-lg font-medium text-red-500 hover:bg-red-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <LogOut size={24} />
            {loading ? 'Logging out...' : 'Log Out'}
          </button>
        </div>
      </aside> */}

      {/* Main Content Area */}
      <main className="flex-1 p-4 py-0 overflow-auto">{children}</main>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\page.tsx -----

"use client";

import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import Image from "next/image";
import LiveOrdersPanel from "@/components/LiveOrdersPanel";

export default function DashboardPage() {
  const [isOffline, setIsOffline] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error] = useState<string | null>(null);

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 800);

    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    setIsOffline(!navigator.onLine);

    return () => {
      clearTimeout(timer);
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/30">
      {/* Hero / Banner Section */}
      <div className="relative overflow-hidden rounded-xl mb-8">
        <div className="absolute inset-0 z-0">
          <Image
            src="/restaurant-interior.jpg"
            alt="Restaurant Interior"
            fill
            className="object-cover opacity-20"
            priority
          />
        </div>
        <div className="absolute inset-0 bg-gradient-to-r from-blue-900/80 via-purple-900/60 to-indigo-900/40 z-10"></div>
        <div className="relative z-20 p-10 text-white">
          <h1 className="text-3xl font-bold">
            Welcome to QuickBite QR Dashboard
          </h1>
          <p className="mt-2 text-lg opacity-80">
            Manage your restaurant tables, menu, and live orders in one place.
          </p>
        </div>
      </div>

      {/* Offline Banner */}
      {isOffline && (
        <motion.div
          className="bg-red-500 text-white text-center py-2 font-medium"
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
        >
          âš ï¸ You are offline. Some features may not be available.
        </motion.div>
      )}

      {/* Main Dashboard Content */}
      <main className="flex-1 px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12">
        <div className="max-w-[2000px] mx-auto space-y-8">
          {loading ? (
            <div className="bg-white p-6 rounded-xl shadow-md text-center">
              <p className="animate-pulse text-gray-500">
                Loading dashboard...
              </p>
            </div>
          ) : error ? (
            <div className="bg-red-100 text-red-600 p-4 rounded-lg">
              Failed to load dashboard: {error}
            </div>
          ) : (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <LiveOrdersPanel />
            </motion.div>
          )}
        </div>
      </main>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\dashboard\providers.tsx -----

"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/sonner"; // âœ… keep only one
import { TooltipProvider } from "@/components/ui/tooltip";

const queryClient = new QueryClient();

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        {children}
        <Toaster position="top-right" richColors closeButton />
      </TooltipProvider>
    </QueryClientProvider>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\login\page.tsx -----

'use client'
import { useState, useEffect } from 'react'
import { loginWithEmail } from '@/lib/auth/login'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import dynamic from 'next/dynamic'
import { motion } from 'framer-motion'

// Lazy load icon
const Loader2 = dynamic(() => import('lucide-react').then(m => m.Loader2))

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isOffline, setIsOffline] = useState(false)
  const router = useRouter()

  useEffect(() => {
    const handleOnline = () => setIsOffline(false)
    const handleOffline = () => setIsOffline(true)

    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)

    setIsOffline(!navigator.onLine)

    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [])

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    if (isOffline) return

    setError(null)
    setIsSubmitting(true)

    const { error } = await loginWithEmail(email, password)
    if (error) {
      setError(error.message)
      setIsSubmitting(false)
    } else {
      router.push('/dashboard')
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-4 sm:p-8 flex items-center justify-center">
      <motion.div
        className="max-w-md w-full"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <div className="bg-white rounded-2xl shadow-md p-8">
          <h1 className="text-3xl font-bold text-gray-800 text-center">Welcome Back!</h1>
          <p className="text-gray-600 mt-2 text-center">Log in to manage your restaurant.</p>

          {isOffline && (
            <p className="mt-3 text-center text-sm text-red-600 font-medium bg-red-100 p-2 rounded-lg">
              Youâ€™re offline. Please reconnect to continue.
            </p>
          )}

          <form onSubmit={handleLogin} className="mt-8 space-y-6">
            <input
              className="w-full p-3 border-2 rounded-lg text-gray-900"
              placeholder="Email"
              type="email"
              value={email}
              onChange={e => setEmail(e.target.value)}
              required
              disabled={isOffline}
            />

            <input
              className="w-full p-3 border-2 rounded-lg text-gray-900"
              placeholder="Password"
              type="password"
              value={password}
              onChange={e => setPassword(e.target.value)}
              required
              disabled={isOffline}
            />

            {error && (
              <motion.p
                className="text-red-500 text-center"
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
              >
                {error}
              </motion.p>
            )}

            <button
              type="submit"
              disabled={isSubmitting || isOffline}
              className="w-full bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold p-3 rounded-lg flex items-center justify-center disabled:opacity-50"
            >
              {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
              {isSubmitting ? 'Logging In...' : 'Log In'}
            </button>

            <p className="text-center text-gray-600">
              Don&apos;t have an account?{' '}
              <Link href="/signup" className="font-semibold text-indigo-600 hover:underline">
                Sign Up
              </Link>
            </p>
          </form>
        </div>
      </motion.div>
    </div>
  )
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\signup\page.tsx -----

'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { signUpWithRestaurant, SignUpData } from '@/lib/auth/signup';
import dynamic from 'next/dynamic';
import { motion } from 'framer-motion';

// Lazy load loader icon
const Loader2 = dynamic(() => import('lucide-react').then(m => m.Loader2));

export default function SignUpPage() {
  const [formData, setFormData] = useState<SignUpData>({
    email: '',
    password: '',
    owner_name: '',
    restaurant_name: '',
    phone: '',
    address: '',
    upi_id: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [isOffline, setIsOffline] = useState(false);

  // Detect offline/online
  useEffect(() => {
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    setIsOffline(!navigator.onLine);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isOffline) return;

    setError(null);
    setIsSubmitting(true);

    try {
      await signUpWithRestaurant(formData);
      setSuccess(true);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 p-4 sm:p-8 flex items-center justify-center">
      <motion.div
        className="max-w-2xl w-full"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <div className="bg-white rounded-2xl shadow-md p-8">
          <h1 className="text-3xl font-bold text-gray-800 text-center">Create Your Account</h1>
          <p className="text-gray-600 mt-2 text-center">
            Set up your restaurant profile to get started.
          </p>

          {isOffline && (
            <p className="mt-3 text-center text-sm text-red-600 font-medium bg-red-100 p-2 rounded-lg">
              Youâ€™re offline. Please reconnect to continue.
            </p>
          )}

          {success ? (
            <motion.div
              className="text-center py-12"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
            >
              <h2 className="text-2xl font-semibold text-green-600">
                Registration Successful!
              </h2>
              <p className="mt-2 text-gray-700">
                Please check your email to confirm your account before logging in.
              </p>
              <Link
                href="/login"
                className="mt-6 inline-block bg-indigo-600 text-white font-semibold px-6 py-3 rounded-lg"
              >
                Go to Login
              </Link>
            </motion.div>
          ) : (
            <form onSubmit={handleSubmit} className="mt-8 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <input name="owner_name" type="text" placeholder="Owner's Name" value={formData.owner_name} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
                <input name="restaurant_name" type="text" placeholder="Restaurant Name" value={formData.restaurant_name} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
                <input name="email" type="email" placeholder="Email Address" value={formData.email} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
                <input name="password" type="password" placeholder="Password" value={formData.password} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
                <input name="phone" type="tel" placeholder="Phone Number" value={formData.phone} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
                <input name="address" type="text" placeholder="Address" value={formData.address} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
              </div>
              <input name="upi_id" type="text" placeholder="UPI ID (for payments)" value={formData.upi_id} onChange={handleChange} required className="w-full p-3 border-2 rounded-lg text-gray-900" disabled={isOffline}/>
              
              {error && (
                <motion.p
                  className="text-red-500 text-center"
                  initial={{ opacity: 0, y: -5 }}
                  animate={{ opacity: 1, y: 0 }}
                >
                  {error}
                </motion.p>
              )}

              <button
                type="submit"
                disabled={isSubmitting || isOffline}
                className="w-full bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold p-3 rounded-lg flex items-center justify-center disabled:opacity-50"
              >
                {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                {isSubmitting ? 'Registering...' : 'Create Account'}
              </button>

              <p className="text-center text-gray-600">
                Already have an account?{' '}
                <Link href="/login" className="font-semibold text-indigo-600 hover:underline">
                  Log In
                </Link>
              </p>
            </form>
          )}
        </div>
      </motion.div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\simple-test\page.tsx -----

export default function SimpleTestPage() {
  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">Simple Test Page</h1>
      <p>This is a simple test page to check if Next.js is working.</p>
      <div className="mt-4 p-4 bg-blue-100 rounded">
        <p>If you can see this, the basic setup is working!</p>
      </div>
    </div>
  );
}


----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\test\page.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';

export default function TestPage() {
  const [orders, setOrders] = useState<any[]>([]);
  const [restaurants, setRestaurants] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchOrders() {
      try {
        setLoading(true);
        
        // Test 1: Get all orders
        const { data: allOrders, error: allError } = await supabase
          .from('orders')
          .select('*')
          .limit(10);

        if (allError) {
          setError(`Error fetching all orders: ${allError.message}`);
          return;
        }

        console.log('All orders:', allOrders);
        setOrders(allOrders || []);

        // Test 2: Get specific order by track_code
        const { data: specificOrder, error: specificError } = await supabase
          .from('orders')
          .select(`
            id, track_code, status, estimated_time, created_at,
            restaurant:restaurants (restaurant_name, slug),
            table:tables (table_number)
          `)
          .eq('track_code', 'upmi0jl0');

        if (specificError) {
          console.error('Error fetching specific order:', specificError);
        } else {
          console.log('Specific order for upmi0jl0:', specificOrder);
        }

        // Test 3: Get all restaurants
        const { data: restaurants, error: restaurantsError } = await supabase
          .from('restaurants')
          .select('id, restaurant_name, slug');

        if (restaurantsError) {
          console.error('Error fetching restaurants:', restaurantsError);
        } else {
          console.log('All restaurants:', restaurants);
          setRestaurants(restaurants || []);
        }

      } catch (err) {
        setError(`Unexpected error: ${err}`);
      } finally {
        setLoading(false);
      }
    }

    fetchOrders();
  }, []);

  if (loading) {
    return <div className="p-6">Loading...</div>;
  }

  if (error) {
    return <div className="p-6 text-red-600">Error: {error}</div>;
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Database Test</h1>
      
      <h2 className="text-xl font-semibold mb-2">Recent Orders:</h2>
      <div className="space-y-2">
        {orders.map((order) => (
          <div key={order.id} className="border p-3 rounded">
            <p><strong>ID:</strong> {order.id}</p>
            <p><strong>Track Code:</strong> {order.track_code}</p>
            <p><strong>Status:</strong> {order.status}</p>
            <p><strong>Restaurant ID:</strong> {order.restaurant_id}</p>
            <p><strong>Created:</strong> {new Date(order.created_at).toLocaleString()}</p>
          </div>
        ))}
      </div>

      <h2 className="text-xl font-semibold mb-2 mt-6">Restaurants:</h2>
      <div className="space-y-2">
        {restaurants.map((restaurant) => (
          <div key={restaurant.id} className="border p-3 rounded">
            <p><strong>ID:</strong> {restaurant.id}</p>
            <p><strong>Name:</strong> {restaurant.restaurant_name}</p>
            <p><strong>Slug:</strong> {restaurant.slug}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\layout.tsx -----

// src/app/layout.tsx
import type { Metadata, Viewport } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

import AuthListener from "@/components/AuthListener";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Quick Bite QR - Restaurant Management",
  description: "Restaurant management and QR code generation app",
  manifest: "/manifest.json",
  appleWebApp: {
    capable: true,
    statusBarStyle: "default",
    title: "Quick Bite QR",
  },
  formatDetection: {
    telephone: false,
  },
};

export const viewport: Viewport = {
  themeColor: "#000000",
  width: "device-width",
  initialScale: 1,
  maximumScale: 1,
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        {/* Global client-side hooks/components */}
        <AuthListener />

        {/* Main app pages */}
        {children}
      </body>
    </html>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\app\page.tsx -----

// src/app/page.jsx

"use client";

import { motion } from "framer-motion";
import { QrCode, Smartphone, Clock, Users, ArrowRight, Star } from "lucide-react";
import Link from "next/link";

export default function Home() {
  const fadeInUp = {
    initial: { opacity: 0, y: 60 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.6 }
  };

  const staggerContainer = {
    animate: {
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const features = [
    {
      icon: <QrCode className="w-8 h-8" />,
      title: "Instant QR Generation",
      description: "Create beautiful QR codes for your menu in seconds"
    },
    {
      icon: <Smartphone className="w-8 h-8" />,
      title: "Mobile-First Design",
      description: "Optimized for all devices with seamless user experience"
    },
    {
      icon: <Clock className="w-8 h-8" />,
      title: "Real-time Updates",
      description: "Update your menu instantly, changes appear immediately"
    },
    {
      icon: <Users className="w-8 h-8" />,
      title: "Customer Analytics",
      description: "Track orders and understand customer preferences"
    }
  ];

  // Floating particles animation
  const FloatingParticle = ({ delay, duration, x }: { delay: number; duration: number; x: number }) => (
    <motion.div
      className="absolute w-2 h-2 bg-blue-400 rounded-full opacity-60"
      animate={{
        y: [0, -100, 0],
        x: [0, x, 0],
        opacity: [0.6, 0.2, 0.6],
      }}
      transition={{
        duration: duration,
        repeat: Infinity,
        delay: delay,
        ease: "easeInOut"
      }}
    />
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 relative overflow-hidden">
      {/* Floating Particles */}
      <div className="absolute inset-0 pointer-events-none">
        <FloatingParticle delay={0} duration={8} x={20} />
        <FloatingParticle delay={2} duration={10} x={-30} />
        <FloatingParticle delay={4} duration={12} x={40} />
        <FloatingParticle delay={6} duration={9} x={-50} />
        <FloatingParticle delay={1} duration={11} x={60} />
        <FloatingParticle delay={3} duration={7} x={-70} />
      </div>

      {/* Navigation */}
      <nav className="fixed top-0 w-full z-50 bg-white/80 backdrop-blur-md border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="flex items-center space-x-2"
            >
              <motion.div 
                className="w-8 h-8 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center"
                whileHover={{ rotate: 360 }}
                transition={{ duration: 0.6 }}
              >
                <QrCode className="w-5 h-5 text-white" />
              </motion.div>
              <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                QuickBiteQR
              </span>
            </motion.div>
            <div className="hidden md:flex items-center space-x-8">
              <Link href="/login" className="text-slate-600 hover:text-blue-600 transition-colors">
                Login
              </Link>
              <Link href="/signup" className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                Get Started
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="pt-32 pb-20 px-4 sm:px-6 lg:px-8 relative">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial="initial"
            animate="animate"
            variants={staggerContainer}
            className="text-center relative z-10"
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.8 }}
              className="mb-8"
            >
              <div className="inline-flex items-center space-x-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium">
                <Star className="w-4 h-4 fill-current" />
                <span>Trusted by 10,000+ restaurants worldwide</span>
              </div>
            </motion.div>

            <motion.h1
              variants={fadeInUp}
              className="text-5xl md:text-7xl font-bold text-slate-900 mb-6"
            >
              Transform Your
              <span className="block bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent animate-gradient-shift">
                Restaurant Menu
              </span>
              Into Digital Magic
            </motion.h1>
            
            <motion.p
              variants={fadeInUp}
              className="text-xl text-slate-600 mb-8 max-w-3xl mx-auto"
            >
              Create stunning QR codes for your menu, track orders in real-time, and delight your customers with a modern dining experience.
            </motion.p>

            <motion.div
              variants={fadeInUp}
              className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-12"
            >
              <Link href="/signup">
                <motion.button
                  whileHover={{ scale: 1.05, y: -2 }}
                  whileTap={{ scale: 0.95 }}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-8 py-4 rounded-xl text-lg font-semibold hover:shadow-xl transition-all duration-300 flex items-center space-x-2 animate-pulse-glow"
                >
                  <span>Start Free Trial</span>
                  <ArrowRight className="w-5 h-5" />
                </motion.button>
              </Link>
              <Link href="/login">
                <motion.button
                  whileHover={{ scale: 1.05, y: -2 }}
                  whileTap={{ scale: 0.95 }}
                  className="border-2 border-slate-300 text-slate-700 px-8 py-4 rounded-xl text-lg font-semibold hover:border-blue-600 hover:text-blue-600 transition-all duration-300"
                >
                  View Demo
                </motion.button>
              </Link>
            </motion.div>

            {/* Hero Stats */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.8, duration: 0.6 }}
              className="grid grid-cols-3 gap-8 max-w-2xl mx-auto"
            >
              {[
                { number: "5min", label: "Setup Time" },
                { number: "24/7", label: "Support" },
                { number: "Free", label: "Forever Plan" }
              ].map((stat, index) => (
                <div key={index} className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{stat.number}</div>
                  <div className="text-sm text-slate-600">{stat.label}</div>
                </div>
              ))}
            </motion.div>
          </motion.div>
        </div>

        {/* Decorative Elements */}
        <motion.div
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1, duration: 0.8 }}
          className="absolute top-20 right-10 w-32 h-32 bg-gradient-to-r from-blue-400 to-indigo-400 rounded-full opacity-20 blur-3xl"
        />
        <motion.div
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1.2, duration: 0.8 }}
          className="absolute bottom-20 left-10 w-40 h-40 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full opacity-20 blur-3xl"
        />
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-white relative">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl font-bold text-slate-900 mb-4">
              Everything You Need to Succeed
            </h2>
            <p className="text-xl text-slate-600 max-w-2xl mx-auto">
              Powerful features designed to streamline your restaurant operations and enhance customer experience
            </p>
          </motion.div>

          <motion.div
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
            variants={staggerContainer}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8"
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                whileHover={{ y: -10, scale: 1.02 }}
                className="bg-gradient-to-br from-slate-50 to-white p-8 rounded-2xl border border-slate-200 hover:shadow-xl transition-all duration-300 group"
              >
                <motion.div 
                  className="w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-xl flex items-center justify-center text-white mb-6 group-hover:scale-110 transition-transform duration-300"
                  whileHover={{ rotate: 5 }}
                >
                  {feature.icon}
                </motion.div>
                <h3 className="text-xl font-semibold text-slate-900 mb-3">
                  {feature.title}
                </h3>
                <p className="text-slate-600">
                  {feature.description}
                </p>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-indigo-600 relative overflow-hidden">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="max-w-7xl mx-auto relative z-10">
          <motion.div
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
            variants={staggerContainer}
            className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center"
          >
            {[
              { number: "10K+", label: "Restaurants Served" },
              { number: "1M+", label: "QR Codes Generated" },
              { number: "99.9%", label: "Uptime Guarantee" }
            ].map((stat, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                className="text-white"
                whileHover={{ scale: 1.05 }}
              >
                <div className="text-5xl font-bold mb-2">{stat.number}</div>
                <div className="text-blue-100 text-lg">{stat.label}</div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-slate-50">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 40 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-4xl font-bold text-slate-900 mb-6">
              Ready to Transform Your Restaurant?
            </h2>
            <p className="text-xl text-slate-600 mb-8">
              Join thousands of restaurants already using QuickBiteQR to modernize their operations
            </p>
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link href="/signup">
                <button className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-10 py-4 rounded-xl text-xl font-semibold hover:shadow-2xl transition-all duration-300">
                  Get Started Today
                </button>
              </Link>
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-slate-900 text-white py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center space-x-2 mb-4 md:mb-0">
              <motion.div 
                className="w-8 h-8 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg flex items-center justify-center"
                whileHover={{ rotate: 360 }}
                transition={{ duration: 0.6 }}
              >
                <QrCode className="w-5 h-5 text-white" />
              </motion.div>
              <span className="text-xl font-bold">QuickBiteQR</span>
            </div>
            <div className="text-slate-400">
              Â© 2024 QuickBiteQR. All rights reserved.
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\charts\OrdersChart.tsx -----

"use client";

import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  BarChart,
  Bar,
} from "recharts";

type ChartData = {
  name: string;
  orders?: number;
  revenue?: number;
};

export default function OrdersChart({ data }: { data: ChartData[] }) {
  return (
    <div className="w-full h-80"> {/* ðŸ‘ˆ FIX: Parent height */}
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Line type="monotone" dataKey="orders" stroke="#6366f1" strokeWidth={2} />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

export function RevenueChart({ data }: { data: ChartData[] }) {
  return (
    <div className="w-full h-80"> {/* ðŸ‘ˆ FIX: Parent height */}
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="revenue" fill="#22c55e" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\DeleteConfirmation.tsx -----

// src/components/menu/DeleteConfirmation.tsx
interface DeleteConfirmationProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  itemName: string;
}

export default function DeleteConfirmation({
  isOpen,
  onClose,
  onConfirm,
  itemName
}: DeleteConfirmationProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-2xl p-6 max-w-md w-full">
        <div className="text-center mb-4">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </div>
        </div>
        <h3 className="text-lg font-semibold text-gray-800 text-center mb-2">Confirm Deletion</h3>
        <p className="text-gray-600 text-center mb-6">
          Are you sure you want to delete &quot;{itemName}&quot;? This action cannot be undone.
        </p>
        <div className="flex justify-center space-x-4">
          <button
            onClick={onClose}
            className="px-5 py-2 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-100 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="px-5 py-2 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\ImageUpload.tsx -----

'use client';

import { useState, useCallback } from 'react';
import Image from "next/image";
import { useDropzone } from "react-dropzone";
import { useUploadThing } from "@/lib/uploadthing";
import { compressImage } from '@/lib/utils/image-compressor'; // 1. Import the new function
import { X, UploadCloud, Loader2, AlertTriangle } from "lucide-react";

interface ImageUploadProps {
  onChange: (url?: string) => void;
  value?: string;
}

export default function ImageUpload({ onChange, value }: ImageUploadProps) {
  const [preview, setPreview] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);

  const { startUpload } = useUploadThing(
    "menuItemImage",
    {
      onClientUploadComplete: (res:{url:string}[]) => {
        setIsUploading(false);
        setUploadError(null);
        onChange(res?.[0].url);
        setPreview(null);
      },
      onUploadError: (error: Error) => {
        setIsUploading(false);
        setPreview(null);
        setUploadError("Upload failed. Please try again.");
        console.error("Upload failed:", error);
      },
    }
  );

  // 2. Simplify the onDrop handler
  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    setUploadError(null);
    if (acceptedFiles.length > 0) {
      const file = acceptedFiles[0];
      
      setPreview(URL.createObjectURL(file));
      setIsUploading(true);

      try {
        // Use the utility function to compress the image
        const compressedFile = await compressImage(file);
        
        // Upload the compressed file
        await startUpload([compressedFile]);

      } catch (error: any) {
        setUploadError(error.message || 'Compression failed.');
        setIsUploading(false);
        setPreview(null);
      }
    }
  }, [startUpload]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { 'image/*': ['.jpeg', '.jpg', '.png'] },
    multiple: false,
  });

  // The rest of the component's JSX remains unchanged...
  if (value) {
    return (
      <div className="relative h-48 w-full md:w-96">
        <Image
          fill
          src={value}
          alt="Uploaded Image"
          className="rounded-lg object-cover"
        />
        <button
          onClick={() => onChange()}
          className="bg-red-500 text-white p-1 rounded-full absolute -top-2 -right-2 shadow-sm"
          type="button"
        >
          <X className="h-4 w-4" />
        </button>
      </div>
    );
  }

  if (isUploading || preview) {
    return (
      <div className="relative h-48 w-full md:w-96">
        {preview && (
          <Image
            fill
            src={preview}
            alt="Image Preview"
            className="rounded-lg object-cover"
            onLoad={() => {
              if (preview) URL.revokeObjectURL(preview);
            }}
          />
        )}
        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded-lg">
          <Loader2 className="h-8 w-8 text-white animate-spin" />
        </div>
      </div>
    );
  }

  return (
    <div
      {...getRootProps()}
      className={`
        w-full md:w-96 h-48 border-2 border-dashed rounded-lg flex items-center justify-center text-center cursor-pointer
        ${isDragActive ? 'border-indigo-600 bg-indigo-50' : 'border-gray-300'}
        ${uploadError ? 'border-red-500 bg-red-50' : ''}
      `}
    >
      <input {...getInputProps()} />
      <div className="text-gray-500">
        {uploadError ? (
          <div className="text-red-600">
            <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
            <p className="text-sm font-semibold">{uploadError}</p>
          </div>
        ) : (
          <>
            <UploadCloud className="h-8 w-8 mx-auto mb-2" />
            <p className="text-sm">{isDragActive ? 'Drop the image here' : 'Click or drag to upload'}</p>
          </>
        )}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\MenuItemCard.tsx -----

import Image from 'next/image';
import Link from 'next/link';
import { MenuItem } from '@/types/menu'; // Ensure this path is correct

interface MenuItemCardProps {
  item: MenuItem;
  onEdit: string;
  onDelete: () => void;
}

// Helper to format price
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(price);
};

export default function MenuItemCard({ item, onEdit, onDelete }: MenuItemCardProps) {
  return (
    <div className="bg-white rounded-2xl shadow-md overflow-hidden transition-all hover:shadow-xl hover:-translate-y-1 flex flex-col">
      {/* Image Section */}
      <div className="relative h-40 w-full bg-gray-100">
        {item.photo_url ? (
          <Image
            src={item.photo_url}
            alt={item.name}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-300 group-hover:scale-105"
          />
        ) : (
          // Placeholder for items without an image
          <div className="flex items-center justify-center h-full">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
        )}
      </div>

      {/* Content Section */}
      <div className="p-4 flex-grow">
        <h3 className="text-lg font-bold text-gray-800 truncate">{item.name}</h3>
        <p className="text-sm text-gray-600 mt-1 h-10 overflow-hidden">{item.description}</p>
        <p className="text-xl font-bold text-indigo-600 mt-3">{formatPrice(item.price)}</p>
      </div>

      {/* Actions Section */}
      <div className="p-3 bg-gray-50 border-t flex justify-end gap-2">
        <Link href={onEdit} className="px-4 py-1.5 rounded-md text-sm font-semibold text-gray-700 bg-white border border-gray-300 hover:bg-gray-100 transition-colors">
          Edit
        </Link>
        <button
          onClick={onDelete}
          className="px-4 py-1.5 rounded-md text-sm font-semibold text-white bg-red-500 hover:bg-red-600 transition-colors"
        >
          Delete
        </button>
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\menu\MenuItemForm.tsx -----

'use client';

import { useState, useEffect } from 'react';
import { MenuItem } from '@/types/menu';
import ImageUpload from './ImageUpload';

interface MenuItemFormProps {
  initialData?: MenuItem;
  onSubmit: (data: Omit<MenuItem, 'id' | 'restaurant_id' | 'created_at'>) => void;
  isSubmitting: boolean;
  onCancel: () => void;
}

export default function MenuItemForm({
  initialData,
  onSubmit,
  isSubmitting,
  onCancel
}: MenuItemFormProps) {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    photo_url: '',
    available: true,
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (initialData) {
      setFormData({
        name: initialData.name,
        description: initialData.description,
        price: String(initialData.price),
        photo_url: initialData.photo_url || '',
        available: initialData.available ?? true,
      });
    }
  }, [initialData]);
  
  const validate = () => {
    const newErrors: { [key: string]: string } = {};
    if (!formData.name.trim()) newErrors.name = 'Name is required.';
    if (!formData.description.trim()) newErrors.description = 'Description is required.';
    if (!formData.price) newErrors.price = 'Price is required.';
    const priceValue = parseFloat(formData.price);
    if (isNaN(priceValue) || priceValue <= 0) {
      newErrors.price = 'Please enter a valid, positive price.';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'checkbox') {
      const { checked } = e.target as HTMLInputElement;
      setFormData(prev => ({ ...prev, [name]: checked }));
      return;
    }
    
    if (name === 'price') {
      const numericValue = value.replace(/[^0-9.]/g, '');
      const decimalCount = (numericValue.match(/\./g) || []).length;
      const sanitizedValue = decimalCount > 1 ? numericValue.substring(0, numericValue.lastIndexOf('.')) : numericValue;
      setFormData(prev => ({ ...prev, [name]: sanitizedValue }));
      return;
    }
    
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validate()) {
      onSubmit({
        ...formData,
        price: parseFloat(formData.price),
      });
    }
  };

  return (
    <div className="bg-white rounded-2xl shadow-md overflow-hidden">
      <form onSubmit={handleSubmit} className="p-6 md:p-8 space-y-6">
        {/* Image Upload */}
        <div className="flex flex-col items-center">
          <label className="w-full text-lg font-semibold text-gray-800 mb-2">Item Image</label>
          <ImageUpload
            value={formData.photo_url}
            onChange={(url) => setFormData(prev => ({ ...prev, photo_url: url || '' }))}
          />
        </div>
        
        {/* Name */}
        <div>
          <label htmlFor="name" className="block text-lg font-semibold text-gray-800 mb-2">Name *</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="w-full p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
          />
          {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
        </div>

        {/* Description */}
        <div>
          <label htmlFor="description" className="block text-lg font-semibold text-gray-800 mb-2">Description *</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            rows={4}
            className="w-full p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
          />
          {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Price */}
          <div>
            <label htmlFor="price" className="block text-lg font-semibold text-gray-800 mb-2">Price ($) *</label>
            <input
              type="text"
              id="price"
              name="price"
              value={formData.price}
              onChange={handleChange}
              className="w-full p-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-900 transition-all"
              placeholder="0.00"
              inputMode="decimal"
            />
            {errors.price && <p className="text-red-500 text-sm mt-1">{errors.price}</p>}
          </div>
        </div>
            
        {/* Available Toggle */}
        <div className="flex items-center justify-between bg-gray-50 p-4 rounded-xl border-2 border-gray-200">
          <label htmlFor="available" className="text-lg font-semibold text-gray-800">Item Available</label>
          <label className="relative inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              id="available"
              name="available"
              checked={formData.available}
              onChange={handleChange}
              className="sr-only peer"
            />
            <div className="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-indigo-300 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600"></div>
          </label>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
          <button
            type="button"
            onClick={onCancel}
            className="px-6 py-3 border-2 border-gray-300 rounded-xl font-semibold text-gray-700 hover:bg-gray-100 transition-all"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-6 py-3 bg-gradient-to-r from-indigo-500 to-blue-500 text-white font-semibold rounded-xl hover:from-indigo-600 hover:to-blue-600 disabled:opacity-50 transition-all shadow-md hover:shadow-lg"
          >
            {isSubmitting ? 'Saving...' : 'Save Item'}
          </button>
        </div>
      </form>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\orders\ETA.tsx -----

'use client';

import React, { useMemo } from 'react';
import type { CustomerOrderStatus } from './OrderStatusTimeline';

export default function ETA({
  currentStatus,
  etaMinutes,
}: {
  currentStatus: CustomerOrderStatus;
  etaMinutes?: number | null; // This type accepts number, null, or undefined
}) {
  const derivedMinutes = useMemo(() => {
    // This check correctly handles both null and undefined values.
    if (typeof etaMinutes === 'number') return etaMinutes;
    
    // Simple fallback heuristics
    if (currentStatus === 'Pending') return 20;
    if (currentStatus === 'Confirmed') return 18;
    if (currentStatus === 'Preparing') return 10;
    if (currentStatus === 'Ready') return 2;
    return 0;
  }, [etaMinutes, currentStatus]);

  if (currentStatus === 'Complete' || currentStatus === 'Cancelled') {
    return (
      <p className="text-lg font-semibold text-gray-500">
        N/A
      </p>
    );
  }

  return (
    <p className="text-lg font-semibold text-gray-900">
      ~ {derivedMinutes} min
    </p>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\orders\OrderStatusTimeline.tsx -----

'use client';

import React from 'react';
import { CheckCircle2, Circle } from 'lucide-react';

export type CustomerOrderStatus = 'Pending' | 'Confirmed' | 'Preparing' | 'Ready' | 'Complete' | 'Cancelled';

const STEPS: { key: CustomerOrderStatus; label: string }[] = [
  { key: 'Pending',   label: 'Payment confirmation' },
  { key: 'Confirmed', label: 'Order received' },
  { key: 'Preparing', label: 'Being cooked' },
  { key: 'Ready',     label: 'Ready to serve' },
  { key: 'Complete',  label: 'Completed' },
];

function indexOfStatus(s: CustomerOrderStatus) {
  const i = STEPS.findIndex((x) => x.key === s);
  return i < 0 ? 0 : i;
}

export default function OrderStatusTimeline({ currentStatus }: { currentStatus: CustomerOrderStatus }) {
  const currentIdx = indexOfStatus(currentStatus);

  return (
    <div className="bg-white rounded-xl shadow p-5">
      <ol className="relative border-s-2 border-gray-200 ps-6">
        {STEPS.map((step, idx) => {
          const done = idx <= currentIdx && currentStatus !== 'Cancelled';
          const active = idx === currentIdx;

          return (
            <li key={step.key} className="mb-8 ms-6">
              <span className="absolute -start-3 flex h-6 w-6 items-center justify-center rounded-full bg-white">
                {done ? <CheckCircle2 className="h-6 w-6" /> : <Circle className="h-6 w-6" />}
              </span>
              <h3 className={`font-semibold ${active ? 'text-gray-900' : 'text-gray-700'}`}>{step.label}</h3>
              <p className="mt-1 text-sm text-gray-500">{step.key}</p>
            </li>
          );
        })}
        {currentStatus === 'Cancelled' && (
          <li className="mb-2 ms-6">
            <span className="absolute -start-3 h-6 w-6 rounded-full bg-white" />
            <h3 className="font-semibold text-red-600">Order Cancelled</h3>
            <p className="mt-1 text-sm text-gray-500">Please contact staff if this seems incorrect.</p>
          </li>
        )}
      </ol>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\orders\StatusBadge.tsx -----

'use client';

import React from 'react';
import type { CustomerOrderStatus } from './OrderStatusTimeline';

export default function StatusBadge({ status }: { status: CustomerOrderStatus }) {
  const color =
    status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
    status === 'Confirmed' ? 'bg-blue-100 text-blue-800' :
    status === 'Preparing' ? 'bg-orange-100 text-orange-800' :
    status === 'Ready' ? 'bg-green-100 text-green-800' :
    status === 'Complete' ? 'bg-emerald-100 text-emerald-800' :
    'bg-red-100 text-red-700';

  return (
    <span className={`inline-flex items-center px-3 py-1 text-sm font-medium rounded-full ${color}`}>
      {status}
    </span>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\tables\QrCodeDisplay.tsx -----

'use client';

import Image from 'next/image';

interface QrCodeDisplayProps {
  url: string;
  tableName: string;
}

export default function QrCodeDisplay({ url, tableName }: QrCodeDisplayProps) {
  const downloadQRCode = () => {
    const link = document.createElement('a');
    link.href = url;
    // FIXED: Corrected template literal syntax for the filename
    link.setAttribute('download', `${tableName.replace(/\s+/g, '-')}-qr-code.png`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="flex flex-col items-center gap-4 p-4 border rounded-lg bg-gray-50">
      <div className="relative h-32 w-32">
        <Image
          src={url}
          // FIXED: Corrected template literal syntax for the alt text
          alt={`QR Code for ${tableName}`}
          layout="fill"
          objectFit="contain"
        />
      </div>
      <button
        onClick={downloadQRCode}
        className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 w-full font-semibold transition-colors"
      >
        Download
      </button>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\alert.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\avatar.tsx -----

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\badge.tsx -----

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\button.tsx -----

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\calendar.tsx -----

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => <ChevronLeft className="h-4 w-4" />,
        IconRight: () => <ChevronRight className="h-4 w-4" />,
      } as any}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\card.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\input.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\label.tsx -----

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\popover.tsx -----

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\separator.tsx -----

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\skeleton.tsx -----

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\sonner.tsx -----

import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\tabs.tsx -----

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\textarea.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\toast.tsx -----

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\toaster.tsx -----

import { useToast } from "@/lib/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ui\tooltip.tsx -----

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\AuthListener.tsx -----

'use client';

import { useEffect } from 'react';
import { supabase } from '@/lib/supabase/client';

export default function AuthListener() {
  useEffect(() => {
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      // âœ… Send session to Next.js API so it sets cookies
      await fetch('/api/auth', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include', // important for cookies
        body: JSON.stringify({ event, session }),
      });
    });

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  return null;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\DashboardNavCards.tsx -----

// src->components->DashboardNavCards.tsx - "use client";

import React, { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import {
  Utensils,
  Clock,
  List,
  Table as TableIcon,
  LogOut,
} from "lucide-react";
import { logout } from "@/lib/auth/logout";

export function DashboardNavCards() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);

  const handleLogout = async () => {
    try {
      setLoading(true);
      await logout(); 
      router.push("/login"); 
    } catch (err) {
      console.error("Logout failed:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-64 bg-white/90 backdrop-blur-md rounded-2xl border border-gray-200 shadow-lg p-4 flex flex-col gap-4">
      {/* Home / Brand Card */}
      <Link
        href="/dashboard"
        className="group relative flex items-center gap-4 overflow-hidden bg-gradient-to-br from-indigo-50 to-indigo-100 rounded-xl border border-indigo-200 shadow hover:shadow-lg transition-all duration-300 p-4"
      >
        <div className="p-3 rounded-lg bg-gradient-to-br from-indigo-600 to-indigo-500 text-white shadow-md">
          <TableIcon className="w-6 h-6" />
        </div>
        <div>
          <div className="text-slate-900 font-bold text-lg tracking-wide">
            QuickBite QR
          </div>
          <div className="text-slate-600 text-sm">Dashboard Home</div>
        </div>
      </Link>

      {/* Menus */}
      <Link
        href="/dashboard/menu"
        className="group relative flex items-center gap-4 overflow-hidden bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl border border-purple-100 shadow hover:shadow-lg transition-all duration-300 p-4"
      >
        <div className="p-3 rounded-lg bg-gradient-to-br from-purple-600 to-purple-500 text-white shadow-md">
          <Utensils className="w-5 h-5" />
        </div>
        <div>
          <div className="text-slate-800 font-semibold text-base">Menu</div>
          <div className="text-slate-600 text-xs">Collections & sets</div>
        </div>
      </Link>

      {/* Tables */}
      <Link
        href="/dashboard/tables"
        className="group relative flex items-center gap-4 overflow-hidden bg-gradient-to-br from-emerald-50 to-emerald-100 rounded-xl border border-emerald-100 shadow hover:shadow-lg transition-all duration-300 p-4"
      >
        <div className="p-3 rounded-lg bg-gradient-to-br from-emerald-600 to-emerald-500 text-white shadow-md">
          <List className="w-5 h-5" />
        </div>
        <div>
          <div className="text-slate-800 font-semibold text-base">Tables</div>
          <div className="text-slate-600 text-xs">Table Number & QR</div>
        </div>
      </Link>

      {/* Orders */}
      <Link
        href="/dashboard/orders"
        className="group relative flex items-center gap-4 overflow-hidden bg-gradient-to-br from-slate-50 to-slate-100 rounded-xl border border-slate-200 shadow hover:shadow-lg transition-all duration-300 p-4"
      >
        <div className="p-3 rounded-lg bg-gradient-to-br from-slate-800 to-slate-700 text-white shadow-md">
          <Clock className="w-5 h-5" />
        </div>
        <div>
          <div className="text-slate-800 font-semibold text-base">Orders</div>
          <div className="text-slate-600 text-xs">Orders data</div>
        </div>
      </Link>

      {/* Logout */}
      <button
        onClick={handleLogout}
        disabled={loading}
        className="group relative flex items-center gap-4 overflow-hidden bg-gradient-to-br from-red-50 to-red-100 rounded-xl border border-red-200 shadow hover:shadow-lg transition-all duration-300 p-4 text-left disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <div className="p-3 rounded-lg bg-gradient-to-br from-red-600 to-red-500 text-white shadow-md">
          <LogOut className="w-5 h-5" />
        </div>
        <div>
          <div className="text-slate-800 font-semibold text-base">
            {loading ? "Logging out..." : "Logout"}
          </div>
          <div className="text-slate-600 text-xs">End your session</div>
        </div>
      </button>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\FormattedDate.tsx -----

'use client';

import { useState, useEffect } from 'react';

type FormattedDateProps = {
  dateString: string;
};

export default function FormattedDate({ dateString }: FormattedDateProps) {
  // State to track if the component has mounted on the client
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    // This effect runs only on the client, after the initial render
    setIsMounted(true);
  }, []);

  // On the server, and during the first client render before the effect runs,
  // we return null or a placeholder to avoid a mismatch.
  if (!isMounted) {
    return null; // Or <Skeleton className="h-5 w-32" />
  }

  // Once mounted, we can safely use the browser's `toLocaleString`
  return <>{new Date(dateString).toLocaleString()}</>;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\LiveOrderNotification.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Bell } from 'lucide-react';
import { supabase } from '@/lib/supabase/client';
import { notifyLocal } from '@/lib/utils/notifications';

interface Notification {
  id: number;
  message: string;
  created_at: string;
  is_read: boolean;
}

export default function LiveOrderNotification() {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    // âœ… Fetch existing unread notifications
    const fetchNotifications = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('is_read', false)
        .order('created_at', { ascending: false });

      if (!error && data && mounted) {
        setNotifications(data);
      }
      setLoading(false);
    };

    fetchNotifications();

    // âœ… Realtime subscription for new notifications
    const channel = supabase
      .channel('notifications-channel')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'notifications' },
        (payload) => {
          const newNotif = payload.new as Notification;
          if (!mounted) return;

          setNotifications((prev) => [newNotif, ...prev]);

          // Fire a local notification in the browser
          notifyLocal('ðŸ”” New Order Update!', newNotif.message);
        }
      )
      .subscribe();

    return () => {
      mounted = false;
      supabase.removeChannel(channel);
    };
  }, []);

  return (
    <div className="bg-white shadow-md rounded-xl p-4">
      <div className="flex items-center gap-2 mb-3">
        <Bell className="h-5 w-5 text-indigo-600" />
        <h2 className="font-semibold text-gray-800">Notifications</h2>
      </div>

      {loading ? (
        <p className="text-sm text-gray-500 animate-pulse">Loading...</p>
      ) : notifications.length === 0 ? (
        <p className="text-sm text-gray-500">No new notifications</p>
      ) : (
        <ul className="space-y-2">
          {notifications.map((n) => (
            <motion.li
              key={n.id}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              className="p-3 bg-indigo-50 rounded-lg text-sm text-gray-800"
            >
              {n.message}
              <span className="ml-2 text-xs text-gray-500">
                {new Date(n.created_at).toLocaleTimeString()}
              </span>
            </motion.li>
          ))}
        </ul>
      )}
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\LiveOrdersComponent.tsx -----

'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { RefreshCw, Clock, ChefHat, CheckCircle, XCircle } from 'lucide-react';
import Link from 'next/link';
import { OrderItem, OrderItemStatus } from '@/app/dashboard/orders/LiveOrders';
import { setOrderStatus } from '@/lib/api/orders';

interface LiveOrdersComponentProps {
  fetchLiveOrders: () => Promise<void>;
  refreshing: boolean;
  liveOrders: OrderItem[] | null;
  filteredOrders: OrderItem[] | null;
  activeStatus: OrderItemStatus | 'All';
  setActiveStatus: (status: OrderItemStatus | 'All') => void;
  formatDate: (dateString: string) => string;
  getTotalPrice: (orders: OrderItem[] | null) => number;
  errorMsg?: string | null;
}

const ETA_PRESETS = [10, 15, 20, 25, 30];

const LiveOrdersComponent: React.FC<LiveOrdersComponentProps> = ({
  fetchLiveOrders,
  refreshing,
  liveOrders,
  filteredOrders,
  activeStatus,
  setActiveStatus,
  formatDate,
  getTotalPrice,
  errorMsg,
}) => {
  const [updatingId, setUpdatingId] = useState<string | null>(null);
  const [etaChoice, setEtaChoice] = useState<Record<string, number>>({});

  const handleUpdate = async (orderId: string, status: OrderItemStatus, eta?: number | null) => {
    try {
      setUpdatingId(orderId);
      await setOrderStatus(orderId, status as any, eta ?? null);
      await fetchLiveOrders();
    } catch (e: any) {
      console.error('[update status]', e);
      alert(e?.message || 'Failed to update status');
    } finally {
      setUpdatingId(null);
    }
  };

  const getStatusIcon = (status: OrderItemStatus | null) => {
    switch (status) {
      case 'Pending': return <Clock className="h-4 w-4" />;
      case 'Confirmed': return <CheckCircle className="h-4 w-4" />;
      case 'Preparing': return <ChefHat className="h-4 w-4" />;
      case 'Ready': return <CheckCircle className="h-4 w-4" />;
      case 'Cancelled': return <XCircle className="h-4 w-4" />;
      default: return <Clock className="h-4 w-4" />;
    }
  };

  const getStatusVariant = (status: OrderItemStatus | null) => {
    switch (status) {
      case 'Cancelled': return 'destructive';
      case 'Confirmed':
      case 'Preparing':
      case 'Ready': return 'default';
      case 'Pending':
      default: return 'secondary';
    }
  };

  return (
    <div className="container mx-auto px-4 py-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-4">
        <div>
          <h1 className="text-2xl font-bold">Live Orders</h1>
          <p className="text-muted-foreground">Manage active orders in real-time</p>
        </div>
        <Button onClick={fetchLiveOrders} disabled={refreshing} variant="outline" className="flex items-center gap-2">
          <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />
          Refresh
        </Button>
      </div>

      {errorMsg && (
        <div className="mb-4 rounded border border-destructive bg-destructive/10 px-3 py-2 text-sm text-destructive">
          {errorMsg}
        </div>
      )}

      {/* Summary */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card><CardHeader><CardTitle>Total Orders</CardTitle></CardHeader><CardContent>{liveOrders?.length || 0}</CardContent></Card>
        <Card><CardHeader><CardTitle>Pending</CardTitle></CardHeader><CardContent>{liveOrders?.filter(o=>o.status==='Pending').length || 0}</CardContent></Card>
        <Card><CardHeader><CardTitle>Total Value</CardTitle></CardHeader><CardContent>${getTotalPrice(liveOrders).toFixed(2)}</CardContent></Card>
      </div>

      {/* Tabs */}
      <Tabs value={activeStatus} onValueChange={(v)=>setActiveStatus(v as OrderItemStatus|'All')}>
        <TabsList className="mb-4 grid grid-cols-5">
          <TabsTrigger value="All">All</TabsTrigger>
          <TabsTrigger value="Pending">Pending</TabsTrigger>
          <TabsTrigger value="Confirmed">Confirmed</TabsTrigger>
          <TabsTrigger value="Preparing">Preparing</TabsTrigger>
          <TabsTrigger value="Ready">Ready</TabsTrigger>
        </TabsList>

        <div>
          {filteredOrders && filteredOrders.length > 0 ? (
            <div className="space-y-4">
              {filteredOrders.map((order) => {
                const isUpdating = updatingId === order.order.id;
                const eta = etaChoice[order.order.id] ?? 15;
                return (
                  <Card key={order.id}>
                    <CardHeader>
                      <div className="flex justify-between items-center">
                        <div>
                          {/* âœ… Show both Internal Short ID + Tracking Code */}
                          <CardTitle>
                            #{order.order.id.slice(-6)} â€¢ 
                            <Link
                              href={`/customer-end-pages/${order.order.restaurant.name.toLowerCase().replace(/\s+/g, '-')}/orders/${order.order.track_code}`}
                              className="text-blue-600 hover:underline ml-1"
                              target="_blank"
                            >
                              Code: {order.order.track_code}
                            </Link>
                            {order.order.table_number && ` â€¢ Table ${order.order.table_number}`}
                          </CardTitle>
                          <CardDescription>
                            {order.order.restaurant.name} â€¢ {formatDate(order.created_at)}
                          </CardDescription>
                        </div>
                        <Badge variant={getStatusVariant(order.status)} className="flex items-center gap-1">
                          {getStatusIcon(order.status)} {order.status}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-semibold">{order.menu_item?.name}</h3>
                          <p className="text-sm text-muted-foreground">Qty: {order.quantity}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold">${(order.price * order.quantity).toFixed(2)}</p>
                          <p className="text-xs text-muted-foreground">${order.price.toFixed(2)} each</p>
                        </div>
                      </div>

                      {/* Actions */}
                      <div className="flex flex-wrap gap-2">
                        <Button
                          size="sm"
                          disabled={isUpdating || order.status !== 'Pending'}
                          onClick={() => handleUpdate(order.order.id, 'Confirmed')}
                        >
                          {isUpdating ? 'Updating...' : 'Confirm'}
                        </Button>

                        <div className="flex items-center gap-2">
                          <select
                            className="border rounded px-2 py-1 text-sm"
                            value={eta}
                            onChange={(e) => setEtaChoice((prev) => ({ ...prev, [order.order.id]: Number(e.target.value) }))}
                            disabled={isUpdating}
                          >
                            {ETA_PRESETS.map((m) => (
                              <option key={m} value={m}>{m} min</option>
                            ))}
                          </select>
                          <Button
                            size="sm"
                            disabled={isUpdating || (order.status !== 'Pending' && order.status !== 'Confirmed')}
                            onClick={() => handleUpdate(order.order.id, 'Preparing', eta)}
                          >
                            {isUpdating ? 'Updating...' : `Preparing (${eta}m)`}
                          </Button>
                        </div>

                        <Button
                          size="sm"
                          disabled={isUpdating || order.status !== 'Preparing'}
                          onClick={() => handleUpdate(order.order.id, 'Ready')}
                        >
                          {isUpdating ? 'Updating...' : 'Ready'}
                        </Button>

                        <Button
                          size="sm"
                          variant="destructive"
                          disabled={isUpdating || order.status === 'Ready'}
                          onClick={() => handleUpdate(order.order.id, 'Cancelled')}
                        >
                          {isUpdating ? 'Updating...' : 'Cancel'}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="bg-muted rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <Clock className="h-8 w-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium mb-2">No orders found</h3>
              <p className="text-muted-foreground">
                {activeStatus === 'All'
                  ? "You don't have any active orders at the moment."
                  : `You don't have any orders with status "${activeStatus}".`}
              </p>
            </div>
          )}
        </div>
      </Tabs>
    </div>
  );
};

export default LiveOrdersComponent;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\LiveOrdersPanel.tsx -----

"use client";

import { useEffect, useMemo, useState } from "react";
import { createClient } from "@supabase/supabase-js";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Bell, X } from "lucide-react";

interface Props {
  dateRange?: any;
}

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

type Order = {
  id: string;
  table_id: number | string;
  status: "Preparing" | "Ready" | "Served" | string;
  total_amount: number | string;
  created_at: string;
  estimated_time: number | string | null;
};

function getStatusColor(status: string) {
  switch (status) {
    case "Preparing":
      return "bg-yellow-100 text-yellow-800 border-yellow-200";
    case "Ready":
      return "bg-green-100 text-green-800 border-green-200";
    case "Served":
      return "bg-blue-100 text-blue-800 border-blue-200";
    default:
      return "bg-gray-100 text-gray-800 border-gray-200";
  }
}

export default function LiveOrdersPanel({ dateRange }: Props) {
  const [liveOrders, setLiveOrders] = useState<Order[]>([]);
  const [newOrderCount, setNewOrderCount] = useState(0);
  const [isPulsing, setIsPulsing] = useState(false);

  useEffect(() => {
    async function fetchOrders() {
      const { data, error } = await supabase
        .from("orders")
        .select("id, table_id, status, total_amount, created_at, estimated_time")
        .order("created_at", { ascending: false })
        .limit(12);

      if (!error && data) setLiveOrders(data as Order[]);
    }

    fetchOrders();

    const channel = supabase
      .channel("orders-insert")
      .on(
        "postgres_changes",
        { event: "INSERT", schema: "public", table: "orders" },
        (payload) => {
          setLiveOrders((prev) => [payload.new as Order, ...prev].slice(0, 12));
          setNewOrderCount((c) => c + 1);
          setIsPulsing(true);
          setTimeout(() => setIsPulsing(false), 3000);
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const totals = useMemo(() => {
    const totalValue = liveOrders.reduce((s, o) => s + Number(o.total_amount || 0), 0);
    const readyCount = liveOrders.filter((o) => o.status === "Ready").length;
    return { totalValue, readyCount };
  }, [liveOrders]);

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div
                className={`p-2 rounded-full bg-blue-600 text-white transition-all duration-300 ${
                  isPulsing ? "animate-pulse" : ""
                }`}
              >
                <Bell className="w-5 h-5" />
              </div>
              <div>
                <CardTitle className="text-xl font-bold text-slate-800">Live Orders</CardTitle>
                <p className="text-slate-600 text-sm">Real-time order tracking</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{liveOrders.length}</div>
                <div className="text-xs text-slate-600">Active Orders</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{totals.readyCount}</div>
                <div className="text-xs text-slate-600">Ready to Serve</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">â‚¹{totals.totalValue.toFixed(2)}</div>
                <div className="text-xs text-slate-600">Total Value</div>
              </div>
            </div>
          </div>
        </CardHeader>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {liveOrders.map((order) => (
          <Card key={order.id} className="hover:shadow-lg transition-all duration-300">
            <CardHeader className="pb-3 flex items-center justify-between">
              <span className="text-sm font-medium text-slate-600">#{order.id}</span>
              <Badge variant="outline" className={getStatusColor(order.status)}>
                {order.status}
              </Badge>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between text-sm">
                <span>Table:</span>
                <span className="font-medium">{order.table_id}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Amount:</span>
                <span className="font-medium text-green-600">â‚¹{Number(order.total_amount).toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Time:</span>
                <span className="font-medium text-blue-600">
                  {new Date(order.created_at).toLocaleTimeString()}
                </span>
              </div>
              {order.estimated_time && (
                <div className="flex justify-between text-sm">
                  <span>ETA:</span>
                  <span className="font-medium text-purple-600">{order.estimated_time} min</span>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\OfflineIndicator.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { WifiOff } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

export default function OfflineIndicator() {
  const [isOffline, setIsOffline] = useState(false);

  useEffect(() => {
    const checkOnlineStatus = () => {
      setIsOffline(!navigator.onLine);
    };

    // Check initial status
    checkOnlineStatus();

    // Listen for online/offline events
    window.addEventListener('online', checkOnlineStatus);
    window.addEventListener('offline', checkOnlineStatus);

    return () => {
      window.removeEventListener('online', checkOnlineStatus);
      window.removeEventListener('offline', checkOnlineStatus);
    };
  }, []);

  if (!isOffline) {
    return null;
  }

  return (
    <Alert className="fixed top-0 left-0 right-0 z-50 bg-yellow-50 border-yellow-200 text-yellow-800">
      <WifiOff className="h-4 w-4" />
      <AlertDescription>
        You&apos;re currently offline. Some features may not be available.
      </AlertDescription>
    </Alert>
  );
} 

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\OfflineStatusBar.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { Wifi, WifiOff, RefreshCw, Clock, CheckCircle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { offlineSync } from '@/lib/offline/offlineSync';

export default function OfflineStatusBar() {
  const [isOnline, setIsOnline] = useState(true);
  const [pendingActionsCount, setPendingActionsCount] = useState(0);
  const [isSyncing, setIsSyncing] = useState(false);

  useEffect(() => {
    const checkOnlineStatus = () => {
      setIsOnline(navigator.onLine);
    };

    // Check initial status
    checkOnlineStatus();

    // Listen for online/offline events
    window.addEventListener('online', checkOnlineStatus);
    window.addEventListener('offline', checkOnlineStatus);

    // Check pending actions count
    const checkPendingActions = async () => {
      try {
        const count = await offlineSync.getPendingActionsCount();
        setPendingActionsCount(count);
      } catch (error) {
        console.error('Failed to check pending actions:', error);
      }
    };

    checkPendingActions();

    // Set up interval to check pending actions
    const interval = setInterval(checkPendingActions, 30000); // Check every 30 seconds

    return () => {
      window.removeEventListener('online', checkOnlineStatus);
      window.removeEventListener('offline', checkOnlineStatus);
      clearInterval(interval);
    };
  }, []);

  const handleSyncNow = async () => {
    if (isOnline && pendingActionsCount > 0) {
      setIsSyncing(true);
      try {
        const result = await offlineSync.syncPendingActions();
        console.log('Manual sync result:', result);
        
        // Update pending actions count
        const newCount = await offlineSync.getPendingActionsCount();
        setPendingActionsCount(newCount);
        
        // Show success message
        if (result.syncedActions > 0) {
          // You could use a toast notification here
          console.log(`Successfully synced ${result.syncedActions} actions`);
        }
      } catch (error) {
        console.error('Manual sync failed:', error);
      } finally {
        setIsSyncing(false);
      }
    }
  };

  // Don't show anything if online and no pending actions
  if (isOnline && pendingActionsCount === 0) {
    return null;
  }

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-40">
      <div className="flex items-center justify-between max-w-7xl mx-auto">
        <div className="flex items-center gap-3">
          {/* Online/Offline Status */}
          <div className="flex items-center gap-2">
            {isOnline ? (
              <Wifi className="h-4 w-4 text-green-600" />
            ) : (
              <WifiOff className="h-4 w-4 text-red-600" />
            )}
            <span className="text-sm font-medium">
              {isOnline ? 'Online' : 'Offline'}
            </span>
          </div>

          {/* Pending Actions Indicator */}
          {pendingActionsCount > 0 && (
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 text-yellow-600" />
              <Badge variant="secondary" className="text-xs">
                {pendingActionsCount} pending action{pendingActionsCount !== 1 ? 's' : ''}
              </Badge>
            </div>
          )}
        </div>

        {/* Sync Button */}
        {isOnline && pendingActionsCount > 0 && (
          <Button
            onClick={handleSyncNow}
            disabled={isSyncing}
            size="sm"
            variant="outline"
            className="flex items-center gap-2"
          >
            {isSyncing ? (
              <RefreshCw className="h-4 w-4 animate-spin" />
            ) : (
              <CheckCircle className="h-4 w-4" />
            )}
            {isSyncing ? 'Syncing...' : 'Sync Now'}
          </Button>
        )}
      </div>
    </div>
  );
} 

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\RecentOrders.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase/client';
import { formatDate } from '@/lib/utils';
import StatusBadge from './orders/StatusBadge';
import type { CustomerOrderStatus } from './orders/OrderStatusTimeline';

type Order = {
  id: string;
  track_code: string;
  created_at: string;
  status: CustomerOrderStatus;
};

export default function RecentOrders() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;

    // Fetch latest orders
    const fetchOrders = async () => {
      setLoading(true);
      const { data, error } = await supabase
        .from('orders')
        .select('id, track_code, created_at, status')
        .order('created_at', { ascending: false })
        .limit(10);

      if (!error && data && mounted) {
        setOrders(data as Order[]);
      }
      setLoading(false);
    };

    fetchOrders();

    // Subscribe to realtime updates
    const channel = supabase
      .channel('realtime-orders')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'orders' },
        () => fetchOrders()
      )
      .subscribe();

    return () => {
      mounted = false;
      supabase.removeChannel(channel);
    };
  }, []);

  return (
    <div className="bg-white rounded-xl shadow p-6">
      <h2 className="text-xl font-semibold mb-4">Recent Orders</h2>

      {loading ? (
        <p className="text-gray-500 text-sm animate-pulse">Loading ordersâ€¦</p>
      ) : orders.length === 0 ? (
        <p className="text-gray-500 text-sm">No recent orders yet.</p>
      ) : (
        <ul className="divide-y divide-gray-200">
          {orders.map((order) => (
            <li
              key={order.id}
              className="py-3 flex justify-between items-center"
            >
              <span className="text-sm text-gray-600">
                #{order.track_code} â€“ {formatDate(order.created_at)}
              </span>
              <StatusBadge status={order.status} />
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\RestaurantProfile.tsx -----

'use client';
import React, { useState } from 'react';
import { MapPin, Phone, Mail, User, Calendar, QrCode, CreditCard, Edit, Save, X, Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Restaurant, ValidationErrors, RestaurantProfileProps } from '@/lib/types/types';
import {formatDate, getInitials}  from '@/lib/types/utils';


const RestaurantProfile: React.FC<RestaurantProfileProps> = ({ restaurant, onUpdate }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [notification, setNotification] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  const [formData, setFormData] = useState({
    owner_name: restaurant.owner_name,
    restaurant_name: restaurant.restaurant_name,
    email: restaurant.email,
    phone: restaurant.phone,
    address: restaurant.address,
    upi_id: restaurant.upi_id,
    logo_url: restaurant.logo_url || "",
  });

  const [errors, setErrors] = useState<ValidationErrors>({});

  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };
  const validatePhone = (phone: string): boolean => {
    const phoneRegex = /^\+?[1-9]\d{9,14}$/;
    return phoneRegex.test(phone);
  };
  const validateUpiId = (upiId: string): boolean => {
    const upiRegex = /^[\w.-]+@[\w.-]+$/;
    return upiRegex.test(upiId);
  };
  const validateUrl = (url: string): boolean => {
    if (!url) return true;
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };
  const validateForm = (): boolean => {
    const newErrors: ValidationErrors = {};
    if (formData.owner_name.length < 2) {
      newErrors.owner_name = "Owner name must be at least 2 characters";
    }
    if (formData.restaurant_name.length < 2) {
      newErrors.restaurant_name = "Restaurant name must be at least 2 characters";
    }
    if (!validateEmail(formData.email)) {
      newErrors.email = "Invalid email address";
    }
    if (!validatePhone(formData.phone)) {
      newErrors.phone = "Invalid phone number";
    }
    if (formData.address.length < 10) {
      newErrors.address = "Address must be at least 10 characters";
    }
    if (!validateUpiId(formData.upi_id)) {
      newErrors.upi_id = "Invalid UPI ID format";
    }
    if (formData.logo_url && !validateUrl(formData.logo_url)) {
      newErrors.logo_url = "Invalid logo URL";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const showNotification = (type: 'success' | 'error', message: string) => {
    setNotification({ type, message });
    setTimeout(() => setNotification(null), 5000);
  };
  const handleEdit = () => {
    setIsEditing(true);
    setFormData({
      owner_name: restaurant.owner_name,
      restaurant_name: restaurant.restaurant_name,
      email: restaurant.email,
      phone: restaurant.phone,
      address: restaurant.address,
      upi_id: restaurant.upi_id,
      logo_url: restaurant.logo_url || "",
    });
    setErrors({});
    setNotification(null);
  };
  const handleCancel = () => {
    setIsEditing(false);
    setFormData({
      owner_name: restaurant.owner_name,
      restaurant_name: restaurant.restaurant_name,
      email: restaurant.email,
      phone: restaurant.phone,
      address: restaurant.address,
      upi_id: restaurant.upi_id,
      logo_url: restaurant.logo_url || "",
    });
    setErrors({});
    setNotification(null);
  };
  const handleInputChange = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      showNotification('error', 'Please fix the validation errors before submitting.');
      return;
    }
    if (!onUpdate) return;

    setIsLoading(true);
    try {
      const qr_url = formData.upi_id !== restaurant.upi_id
         ? `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=upi://pay?pa=${encodeURIComponent(formData.upi_id)}&pn=${encodeURIComponent(formData.restaurant_name)}`
        : restaurant.qr_url;
      await onUpdate({
        ...formData,
        qr_url,
        logo_url: formData.logo_url || null,
      });
      setIsEditing(false);
      showNotification('success', 'Your restaurant profile has been successfully updated.');
    } catch (error) {
      showNotification('error', 'There was an error updating your profile. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50 p-4 sm:p-6">
      <div className="mx-auto max-w-6xl space-y-6">
        {notification && (
          <Alert className={notification.type === 'success' ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>
            {notification.type === 'success' ? (
              <CheckCircle className="h-4 w-4 text-green-600" />
            ) : (
              <AlertCircle className="h-4 w-4 text-red-600" />
            )}
            <AlertDescription className={notification.type === 'success' ? 'text-green-800' : 'text-red-800'}>
              {notification.message}
            </AlertDescription>
          </Alert>
        )}
        <Card className="overflow-hidden border-0 shadow-xl">
          <div className="bg-gradient-to-r from-orange-500 to-red-500 p-6 text-white">
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <Avatar className="h-20 w-20 border-4 border-white shadow-lg">
                  <AvatarImage src={restaurant.logo_url || ""} alt={restaurant.restaurant_name} />
                  <AvatarFallback className="text-orange-500 text-lg font-bold">
                    {getInitials(restaurant.restaurant_name)}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">{restaurant.restaurant_name}</h1>
                  <p className="text-orange-100 text-lg">Owner: {restaurant.owner_name}</p>
                  <Badge variant="secondary" className="mt-2">
                    <Calendar className="mr-1 h-3 w-3" />
                    Since {formatDate(restaurant.created_at)}
                  </Badge>
                </div>
              </div>
              <Button
                variant="secondary"
                size="sm"
                onClick={isEditing ? handleCancel : handleEdit}
                className="bg-white/20 hover:bg-white/30 border-0"
                disabled={isLoading}
              >
                {isEditing ? (
                  <>
                    <X className="mr-2 h-4 w-4" />
                    Cancel
                  </>
                ) : (
                  <>
                    <Edit className="mr-2 h-4 w-4" />
                    Edit Profile
                  </>
                )}
              </Button>
            </div>
          </div>
        </Card>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5 text-orange-500" />
                  Restaurant Information
                </CardTitle>
                <CardDescription>
                  {isEditing ? "Update your restaurant details below" : "Your current restaurant information"}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isEditing ? (
                  <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Restaurant Name</label>
                        <Input
                          placeholder="Enter restaurant name"
                          value={formData.restaurant_name}
                          onChange={(e) => handleInputChange('restaurant_name', e.target.value)}
                          className={errors.restaurant_name ? 'border-red-500' : ''}
                        />
                        {errors.restaurant_name && (
                          <p className="text-sm text-red-500">{errors.restaurant_name}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Owner Name</label>
                        <Input
                          placeholder="Enter owner name"
                          value={formData.owner_name}
                          onChange={(e) => handleInputChange('owner_name', e.target.value)}
                          className={errors.owner_name ? 'border-red-500' : ''}
                        />
                        {errors.owner_name && (
                          <p className="text-sm text-red-500">{errors.owner_name}</p>
                        )}
                      </div>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Email Address</label>
                        <Input
                          type="email"
                          placeholder="Enter email address"
                          value={formData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          className={errors.email ? 'border-red-500' : ''}
                        />
                        {errors.email && (
                          <p className="text-sm text-red-500">{errors.email}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Phone Number</label>
                        <Input
                          placeholder="Enter phone number"
                          value={formData.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          className={errors.phone ? 'border-red-500' : ''}
                        />
                        {errors.phone && (
                          <p className="text-sm text-red-500">{errors.phone}</p>
                        )}
                      </div>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Restaurant Address</label>
                      <Textarea
                         placeholder="Enter complete restaurant address"
                         className={`resize-none ${errors.address ? 'border-red-500' : ''}`}
                        value={formData.address}
                        onChange={(e) => handleInputChange('address', e.target.value)}
                      />
                      {errors.address && (
                        <p className="text-sm text-red-500">{errors.address}</p>
                      )}
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium">UPI ID</label>
                        <Input
                          placeholder="yourname@paytm"
                          value={formData.upi_id}
                          onChange={(e) => handleInputChange('upi_id', e.target.value)}
                          className={errors.upi_id ? 'border-red-500' : ''}
                        />
                        {errors.upi_id && (
                          <p className="text-sm text-red-500">{errors.upi_id}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Logo URL (Optional)</label>
                        <Input
                          placeholder="https://example.com/logo.png"
                          value={formData.logo_url}
                          onChange={(e) => handleInputChange('logo_url', e.target.value)}
                          className={errors.logo_url ? 'border-red-500' : ''}
                        />
                        {errors.logo_url && (
                          <p className="text-sm text-red-500">{errors.logo_url}</p>
                        )}
                      </div>
                    </div>
                    <Separator />
                    <div className="flex justify-end gap-3">
                      <Button
                        type="button"
                        variant="outline"
                        onClick={handleCancel}
                        disabled={isLoading}
                      >
                        Cancel
                      </Button>
                      <Button
                         type="submit"
                         disabled={isLoading}
                         className="bg-orange-500 hover:bg-orange-600"
                      >
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          <>
                            <Save className="mr-2 h-4 w-4" />
                            Save Changes
                          </>
                        )}
                      </Button>
                    </div>
                  </form>
                ) : (
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <User className="h-4 w-4" />
                          Owner Name
                        </div>
                        <p className="font-medium">{restaurant.owner_name}</p>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Phone className="h-4 w-4" />
                          Phone
                        </div>
                        <p className="font-medium">
                          <a href={`tel:${restaurant.phone}`} className="hover:text-orange-500 transition-colors">
                            {restaurant.phone}
                          </a>
                        </p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <Mail className="h-4 w-4" />
                        Email Address
                      </div>
                      <p className="font-medium">
                        <a href={`mailto:${restaurant.email}`} className="hover:text-orange-500 transition-colors">
                          {restaurant.email}
                        </a>
                      </p>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <MapPin className="h-4 w-4" />
                        Restaurant Address
                      </div>
                      <p className="font-medium leading-relaxed">{restaurant.address}</p>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <CreditCard className="h-4 w-4" />
                        UPI ID
                      </div>
                      <Badge variant="outline" className="font-mono">
                        {restaurant.upi_id}
                      </Badge>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
          <div className="space-y-6">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <QrCode className="h-5 w-5 text-orange-500" />
                  Payment QR Code
                </CardTitle>
                <CardDescription>
                  Customers can scan this QR to pay via UPI
                </CardDescription>
              </CardHeader>
              <CardContent className="text-center">
                <div className="inline-block p-4 bg-gray-50 rounded-lg">
                  <img
                     src={restaurant.qr_url}
                     alt="Payment QR Code"
                     className="w-40 h-40 mx-auto"
                  />
                </div>
                <div className="mt-4 space-y-2">
                  <Badge variant="outline" className="font-mono text-xs">
                    {restaurant.upi_id}
                  </Badge>
                  <p className="text-sm text-muted-foreground">
                    UPI Payment Gateway
                  </p>
                </div>
              </CardContent>
            </Card>
            <Card className="shadow-lg bg-gradient-to-br from-orange-500 to-red-500 text-white border-0">
              <CardHeader>
                <CardTitle>Restaurant ID</CardTitle>
                <CardDescription className="text-orange-100">
                  Unique identifier for your restaurant
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <Badge variant="secondary" className="font-mono text-xs break-all bg-white/20 hover:bg-white/30">
                    {restaurant.id}
                  </Badge>
                  <div className="text-center pt-2">
                    <div className="text-lg font-bold">{restaurant.restaurant_name}</div>
                    <div className="text-orange-100 text-sm">Digital Profile</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};
export default RestaurantProfile;

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\components\ServiceWorkerRegistration.tsx -----

'use client';

import { useEffect, useState } from 'react';
import { Bell, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

export default function ServiceWorkerRegistration() {
  const [canShowNotificationPrompt, setCanShowNotificationPrompt] = useState(false);

  useEffect(() => {
    // --- Service Worker Registration (notifications only) ---
    const registerServiceWorker = async () => {
      if ('serviceWorker' in navigator) {
        try {
          const registration = await navigator.serviceWorker.register('/sw.js');
          console.log('Service Worker registered successfully:', registration);
        } catch (error) {
          console.error('Service Worker registration failed:', error);
        }
      }
    };
    registerServiceWorker();

    // --- Notification Permission Check ---
    if ('Notification' in window && Notification.permission === 'default') {
      setCanShowNotificationPrompt(true);
    }
  }, []);

  const requestNotificationPermission = async () => {
    if ('Notification' in window) {
      const permission = await Notification.requestPermission();
      if (permission === 'granted') {
        console.log('Notification permission granted.');
      } else {
        console.log('Notification permission denied.');
      }
      setCanShowNotificationPrompt(false);
    }
  };

  return (
    <>
      {/* Notification Permission Card */}
      {canShowNotificationPrompt && (
        <Card className="fixed bottom-4 right-4 w-80 z-50 shadow-lg animate-in fade-in">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Enable Notifications
            </CardTitle>
            <CardDescription>
              Stay updated with new orders and status changes.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex gap-2">
            <Button onClick={requestNotificationPermission} className="flex-1">
              Enable
            </Button>
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCanShowNotificationPrompt(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </CardContent>
        </Card>
      )}
    </>
  );
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\generateQR.ts -----

// src/lib/api/generateQR.ts
export const generateQR = async (restaurantId: string, tableNumber: number) => {
Â  const res = await fetch("/api/create-table", {
Â  Â  method: "POST",
Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  body: JSON.stringify({ restaurantId, tableNumber }),
Â  });

Â  if (!res.ok) {
    const errorBody = await res.json();
    const errorText = errorBody.error || 'Unknown error';
    console.error("API call to create-table failed:", res.status, errorText);
    throw new Error(`Failed to generate QR: ${errorText}`);
  }

Â  const { url } = await res.json();
Â  return url;
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\menu.ts -----

import { MenuItem } from "@/types/menu";

export type NewMenuItem = Omit<MenuItem, "id" | "created_at" | "updated_at">;

export async function getMenuItems(): Promise<MenuItem[]> {
  const res = await fetch("/api/menus");
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export async function getMenuItem(id: number): Promise<MenuItem> {
  const res = await fetch(`/api/menu/${id}`);
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export async function addMenuItem(item: NewMenuItem): Promise<MenuItem> {
  const res = await fetch("/api/menu", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(item),
  });
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export async function updateMenuItem(
  id: number,
  updates: Partial<MenuItem>
): Promise<MenuItem> {
  const res = await fetch(`/api/menu/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(updates),
  });
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export async function deleteMenuItem(id: number): Promise<void> {
  const res = await fetch(`/api/menu/${id}`, { method: "DELETE" });
  if (!res.ok) throw new Error(await res.text());
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\menus.ts -----

// src/lib/api/menus.ts
export type Menu = {
Â  id: number;
Â  name: string;
Â  description: string | null;
Â  category: 'Main Menu' | 'Special Menu' | 'Seasonal Menu' | 'Bar Menu';
Â  status: 'Active' | 'Inactive' | 'Draft';
Â  image: string | null;
Â  item_count?: number; // Optional, from a DB view or join
Â  avg_price?: number; // Optional
};

export async function getMenus(): Promise<Menu[]> {
Â  const res = await fetch('/api/menus');
Â  if (!res.ok) {
Â  Â  throw new Error('Failed to fetch menus');
Â  }
Â  return res.json();
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\orders.ts -----

// src/lib/api/orders.ts
import { supabase } from '@/lib/supabase/client';
import { CartItem } from '@/app/customer-end-pages/store/cartStore';

export type OrderStatus = 'pending' | 'confirmed' | 'preparing' | 'ready' | 'complete' | 'cancelled';
export type CustomerOrderStatus = 'Pending' | 'Confirmed' | 'Preparing' | 'Ready' | 'Complete' | 'Cancelled';

const toDbStatus = (s: CustomerOrderStatus | OrderStatus): OrderStatus => {
  const map: Record<string, OrderStatus> = {
    Pending: 'pending', Confirmed: 'confirmed', Preparing: 'preparing',
    Ready: 'ready', Complete: 'complete', Cancelled: 'cancelled',
    pending: 'pending', confirmed: 'confirmed', preparing: 'preparing',
    ready: 'ready', complete: 'complete', cancelled: 'cancelled'
  };
  return map[s] ?? 'pending';
};

export type OrderRow = {
  id: string;
  restaurant_id: string;
  track_code: string;
  table_id: number | null;
  total_amount: number;
  status: OrderStatus;
  created_at: string;
  estimated_time: number | null;
  status_updated_at?: string | null;
};

/**
 * Create an order + items
 */
export const submitOrder = async (
  cartItems: CartItem[],
  restaurantId: string,
  tableId: number,
  totalAmount: number
) => {
  // 1) create order
  const { data: orderData, error: orderError } = await supabase
    .from('orders')
    .insert({
      restaurant_id: restaurantId,
      table_id: tableId,
      total_amount: totalAmount,
      status: 'pending'
    })
    .select('id, track_code, restaurant_id')
    .single();

  if (orderError || !orderData?.id) {
    console.error('Error creating order:', orderError);
    throw new Error('Could not create the order.');
  }

  const orderId = orderData.id;
  const trackCode = orderData.track_code;

  // 2) add items
  const itemsToInsert = cartItems.map((item) => ({
    order_id: orderId,
    menu_item: item.id,
    quantity: item.quantity,
    price: item.price
  }));
  const { error: itemsError } = await supabase.from('order_items').insert(itemsToInsert);
  if (itemsError) {
    console.error('Error inserting order items:', itemsError);
    throw new Error('Could not save the items for the order.');
  }

  // 3) fetch restaurant slug
  const { data: r } = await supabase
    .from('restaurants')
    .select('slug')
    .eq('id', restaurantId)
    .single();

  const slug = r?.slug ?? '';

  return { success: true, orderId, trackCode, restaurantSlug: slug };
};

/**
 * Fetch a single order by ID
 */
export const getOrderById = async (orderId: string): Promise<OrderRow | null> => {
  const { data, error } = await supabase
    .from('orders')
    .select('id, restaurant_id, track_code, table_id, total_amount, status, created_at, estimated_time, status_updated_at')
    .eq('id', orderId)
    .single();

  if (error) {
    console.error('getOrderById error:', error);
    return null;
  }
  return data as unknown as OrderRow;
};

/**
 * Update order status (+ optional ETA), also trigger push
 */
export const setOrderStatus = async (
  orderId: string,
  status: CustomerOrderStatus | OrderStatus,
  etaMinutes?: number | null,
  note?: string
) => {
  const dbStatus = toDbStatus(status);

  // update order
  const { data: updated, error } = await supabase
    .from('orders')
    .update({ status: dbStatus, estimated_time: etaMinutes ?? null })
    .eq('id', orderId)
    .select('*')
    .single();

  if (error) {
    console.error('setOrderStatus error:', error);
    throw error;
  }

  // fetch slug for URL
  let restaurantSlug = '';
  if (updated?.restaurant_id) {
    const { data: r } = await supabase
      .from('restaurants')
      .select('slug')
      .eq('id', updated.restaurant_id)
      .single();
    restaurantSlug = r?.slug ?? '';
  }

  // trigger push
  try {
    await fetch('/api/push/notify', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId,
        title: `Order ${titleFor(dbStatus)}`,
        body: typeof etaMinutes === 'number' ? `ETA: ${etaMinutes} min` : undefined,
        url: `/customer-end-pages/${restaurantSlug}/orders/${updated.track_code ?? ''}`
      })
    });
  } catch (err) {
    console.warn('[push notify] failed:', err);
  }

  return updated as OrderRow;
};

/** Convenience: update ETA only */
export const setOrderEta = async (orderId: string, etaMinutes: number | null) => {
  const current = await getOrderById(orderId);
  const status = current?.status ?? 'pending';
  await setOrderStatus(orderId, status, etaMinutes);
  return true;
};

const titleFor = (s: OrderStatus) =>
  ({ pending: 'Pending', confirmed: 'Confirmed', preparing: 'Preparing', ready: 'Ready', complete: 'Complete', cancelled: 'Cancelled' }[s]);

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\profile.ts -----

// src/lib/api/profile.ts
import { Restaurant } from "@/types/restaurant";

export const updateProfile = async (updates: Partial<Restaurant>): Promise<Restaurant> => {
Â  const response = await fetch('/api/profile', {
Â  Â  method: 'PUT',
Â  Â  headers: {
Â  Â  Â  'Content-Type': 'application/json',
Â  Â  },
Â  Â  body: JSON.stringify(updates),
Â  });

Â  if (!response.ok) {
Â  Â  const errorData = await response.json();
Â  Â  throw new Error(errorData.error || 'Failed to update profile.');
Â  }

Â  return response.json();
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\public.ts -----

import { supabase } from "@/lib/supabase/client";
import { MenuItem } from "@/types/menu";
import { Restaurant } from "@/types/restaurant";

/**
 * Fetch basic restaurant details by slug
 */
export async function getRestaurantBySlug(
  slug: string
): Promise<{ id: string; restaurant_name: string; slug: string } | null> {
  const { data, error } = await supabase
    .from("restaurants")
    .select("id, restaurant_name, slug")
    .eq("slug", slug)
    // FIX: Use .maybeSingle() to prevent errors if multiple rows are found
    .maybeSingle();

  if (error) {
    console.error("Error fetching restaurant by slug:", error.message);
    return null;
  }

  return data;
}

/**
 * Get all details for the cart and page header.
 */
export async function getRestaurantDetails(slug: string): Promise<Restaurant | null> {
    const { data, error } = await supabase
        .from('restaurants')
        .select('*') // Select all details
        .eq('slug', slug)
        // FIX: Use .maybeSingle() here as well for consistency and safety
        .maybeSingle();

    if (error) {
        console.error("Error fetching full restaurant details:", error.message);
        return null;
    }
    return data;
}


/**
 * Fetch available menu items for a restaurant by slug
 */
export async function getPublicMenuItems(slug: string): Promise<MenuItem[]> {
  const restaurant = await getRestaurantBySlug(slug);
  if (!restaurant) return [];

  const { data, error } = await supabase
    .from("menu_items")
    .select("*")
    .eq("restaurant_id", restaurant.id)
    .eq("available", true);

  if (error) {
    console.error("Error fetching public menu items:", error.message);
    return [];
  }

  return data || [];
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\restaurants.ts -----

import { supabase } from '@/lib/supabase/client';

/**
 * Fetches the restaurant record for the currently logged-in user.
 * @returns A promise that resolves to an object with the restaurant's id and slug, or null if not found.
 */
export const getMyRestaurant = async (): Promise<{ id: string; slug: string } | null> => {
  // 1. Get the current user's session
  const { data: { session } } = await supabase.auth.getSession();
  if (!session?.user) {
    console.error("No user session found.");
    return null;
  }

  // 2. Use the user's ID to find their restaurant and select both id and slug
  const { data, error } = await supabase
    .from('restaurants')
    .select('id, slug') // Fetch both the id and the new slug column
    .eq('user_id', session.user.id)
    .single(); // We expect only one restaurant per user

  if (error) {
    console.error('Error fetching restaurant:', error.message);
    return null;
  }

  return data;
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\api\tables.ts -----

export interface Table {
  id: number;
  restaurant_id: string;
  table_number: string;
  qr_code_url: string;
  created_at: string;
}

export async function getTables(): Promise<Table[]> {
  const res = await fetch("/api/tables");
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export async function addTable(
  restaurantSlug: string,
  tableNumber: string
): Promise<Table> {
  const res = await fetch("/api/tables", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ restaurant_slug: restaurantSlug, table_number: tableNumber }),
  });
  if (!res.ok) throw new Error(await res.text());
  return res.json();
}

export async function deleteTable(id: number): Promise<void> {
  const res = await fetch("/api/tables", {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ id }),
  });
  if (!res.ok) throw new Error(await res.text());
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\login.ts -----

import { supabase } from '../supabase/client';

export const loginWithEmail = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      console.error('Login failed:', error.message);

      // Map Supabase errors to user-friendly messages
      if (error.message.toLowerCase().includes('invalid login')) {
        return { data: null, error: 'Invalid email or password. Please try again.' };
      }

      if (error.message.toLowerCase().includes('email')) {
        return { data: null, error: 'Email not found. Please sign up first.' };
      }

      return { data: null, error: 'Login failed. Please try again later.' };
    }

    return { data, error: null };
  } catch (err: any) {
    console.error('Unexpected login error:', err);
    return { data: null, error: 'An unexpected error occurred. Please try again.' };
  }
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\logout.ts -----

import { supabase } from '../supabase/client';

/**
 * Logs the user out of Supabase and clears session.
 */
export const logout = async () => {
  const { error } = await supabase.auth.signOut();

  if (error) {
    console.error('Logout failed:', error.message);
    return { success: false, error: error.message };
  }

  return { success: true };
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\magiclink.ts -----

import { supabase } from '../supabase/client';

/**
 * Sends a magic link login email.
 * If the user doesnâ€™t exist, Supabase will create one automatically
 * (since we enabled `shouldCreateUser: true`).
 */
export const sendMagicLink = async (email: string) => {
  try {
    const { data, error } = await supabase.auth.signInWithOtp({
      email,
      options: {
        shouldCreateUser: true,
        emailRedirectTo: `${window.location.origin}/dashboard`,
      },
    });

    if (error) {
      console.error('Magic link error:', error.message);

      // Map Supabase errors to user-friendly messages
      if (error.message.toLowerCase().includes('invalid')) {
        return { data: null, error: 'Please enter a valid email address.' };
      }

      if (error.message.toLowerCase().includes('rate limit')) {
        return { data: null, error: 'Too many requests. Please wait a moment before trying again.' };
      }

      return { data: null, error: 'Failed to send login link. Please try again later.' };
    }

    return { data, error: null };
  } catch (err: any) {
    console.error('Unexpected magic link error:', err);
    return { data: null, error: 'An unexpected error occurred. Please try again.' };
  }
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\queries.ts -----

import { createServerClient } from '@supabase/ssr';

/**
 * Get details of the restaurant for the current authenticated user.
 */
export async function getRestaurantDetails(cookies: any) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    { cookies }
  );

  const {
    data: { user },
    error: authError,
  } = await supabase.auth.getUser();

  if (authError) {
    console.error('Auth error:', authError.message);
    return null;
  }
  if (!user) return null;

  // FIX âœ… : Match restaurant by user_id (not restaurant.id)
  const { data: restaurant, error } = await supabase
    .from('restaurants')
    .select('*')
    .eq('user_id', user.id)
    .maybeSingle();

  if (error) {
    console.error('Error fetching restaurant:', error.message);
    return null;
  }

  return restaurant;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\session.ts -----

import { supabase } from '../supabase/client'

export const getSession = async () => {
  const { data, error } = await supabase.auth.getSession()
  return { session: data?.session, error }
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\auth\signup.ts -----

import { supabase } from '../supabase/client';

export interface SignUpData {
  email: string;
  password: string;
  owner_name: string;
  restaurant_name: string;
  phone: string;
  address: string;
  upi_id: string;
}

/**
 * Signs up a new user. The restaurant profile is created automatically by a database trigger.
 * @param formData The user and restaurant details.
 */
export const signUpWithRestaurant = async (formData: SignUpData) => {
  try {
    const { data, error } = await supabase.auth.signUp({
      email: formData.email,
      password: formData.password,
      options: {
        data: {
          owner_name: formData.owner_name,
          restaurant_name: formData.restaurant_name,
          phone: formData.phone,
          address: formData.address,
          upi_id: formData.upi_id,
        },
      },
    });

    if (error) {
      console.error('Signup failed:', error.message);

      // Provide more user-friendly errors
      if (error.message.includes('duplicate')) {
        throw new Error('This email is already registered. Please log in instead.');
      }

      if (error.message.includes('password')) {
        throw new Error('Your password is too weak. Please choose a stronger one.');
      }

      throw new Error('Signup failed. Please check your details and try again.');
    }

    return data?.user ?? null;
  } catch (err: any) {
    // Ensure we never leak raw error text
    throw new Error(err.message || 'Unexpected error during signup.');
  }
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\use-toast.ts -----

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}



let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
}

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useMenuItems.ts -----

'use client';

import { useState, useEffect, useCallback } from 'react';
import * as menuApi from '@/lib/api/menu';

export function useMenuItems() {
  const [menuItems, setMenuItems] = useState<menuApi.MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchMenuItems = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await menuApi.getMenuItems();
      setMenuItems(data);
    } catch {
      setError('Could not load menu. Please try refreshing the page.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchMenuItems();
  }, [fetchMenuItems]);

  /**
   * Adds a new menu item for a specific restaurant.
   * @param newItemData The data from the form (name, price, etc.).
   * @param restaurantId The UUID of the restaurant this item belongs to.
   */
  const addMenuItem = async (newItemData: Omit<menuApi.NewMenuItem, 'restaurant_id'>, restaurantId: string) => {
    try {
      // Combine the form data with the restaurant ID to create a complete object
      const completeItemData = { ...newItemData, restaurant_id: restaurantId };
      const newItem = await menuApi.addMenuItem(completeItemData);
      setMenuItems(prev => [...prev, newItem]);
    } catch (err) {
      console.error("Failed to add item:", err);
      throw err; // Re-throw the error for the page to handle
    }
  };

  const updateMenuItem = async (id: number, updatedItemData: Partial<menuApi.MenuItem>) => {
    try {
      const updatedItem = await menuApi.updateMenuItem(id, updatedItemData);
      setMenuItems(prev => prev.map(item => (item.id === id ? updatedItem : item)));
    } catch (err) {
      console.error("Failed to update item:", err);
      throw err;
    }
  };

  const deleteMenuItem = async (id: number) => {
    try {
      await menuApi.deleteMenuItem(id);
      setMenuItems(prev => prev.filter(item => item.id !== id));
    } catch (err) {
      console.error("Failed to delete item:", err);
    }
  };

  return { menuItems, loading, error, addMenuItem, updateMenuItem, deleteMenuItem };
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useMenus.ts -----

// src/lib/hooks/useMenus.ts
'use client';
import { useState, useEffect, useCallback } from 'react';
import { getMenus, Menu } from '@/lib/api/menus';

export function useMenus() {
Â  const [menus, setMenus] = useState<Menu[]>([]);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState<string | null>(null);

Â  const fetchMenus = useCallback(async () => {
Â  Â  try {
Â  Â  Â  setLoading(true);
Â  Â  Â  const data = await getMenus();
Â  Â  Â  setMenus(data);
Â  Â  } catch (err: any) {
Â  Â  Â  setError(err.message);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, []);

Â  useEffect(() => {
Â  Â  fetchMenus();
Â  }, [fetchMenus]);

Â  return { menus, loading, error, refetch: fetchMenus };
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useMyRestaurant.ts -----

// src/lib/hooks/useMyRestaurant.ts
'use client';

import { useState, useEffect } from 'react';
import { getMyRestaurant } from '@/lib/api/restaurants';

type RestaurantInfo = {
Â  id: string;
Â  slug: string;
} | null;

export function useMyRestaurant() {
Â  const [restaurant, setRestaurant] = useState<RestaurantInfo>(null);
Â  const [loading, setLoading] = useState(true);

Â  useEffect(() => {
Â  Â  const fetchRestaurant = async () => {
Â  Â  Â  setLoading(true);
Â  Â  Â  const data = await getMyRestaurant();
Â  Â  Â  setRestaurant(data);
Â  Â  Â  setLoading(false);
Â  Â  };
Â  Â  fetchRestaurant();
Â  }, []);

Â  return { restaurant, loading };
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useOffline.ts -----

import { useState, useEffect } from 'react';
import { offlineSync } from '@/lib/offline/offlineSync';
import { offlineStorage } from '@/lib/offline/offlineStorage';

export interface OfflineStatus {
  isOnline: boolean;
  pendingActionsCount: number;
  isSyncing: boolean;
}

export interface OfflineActions {
  queueAction: (type: string, data: any) => Promise<string>;
  syncNow: () => Promise<void>;
  getPendingActions: () => Promise<any[]>;
  clearPendingActions: () => Promise<void>;
}

export function useOffline(): OfflineStatus & OfflineActions {
  const [isOnline, setIsOnline] = useState(true);
  const [pendingActionsCount, setPendingActionsCount] = useState(0);
  const [isSyncing, setIsSyncing] = useState(false);

  useEffect(() => {
    const checkOnlineStatus = () => {
      setIsOnline(navigator.onLine);
    };

    // Check initial status
    checkOnlineStatus();

    // Listen for online/offline events
    window.addEventListener('online', checkOnlineStatus);
    window.addEventListener('offline', checkOnlineStatus);

    // Check pending actions count
    const checkPendingActions = async () => {
      try {
        const count = await offlineSync.getPendingActionsCount();
        setPendingActionsCount(count);
      } catch (error) {
        console.error('Failed to check pending actions:', error);
      }
    };

    checkPendingActions();

    // Set up interval to check pending actions
    const interval = setInterval(checkPendingActions, 30000); // Check every 30 seconds

    return () => {
      window.removeEventListener('online', checkOnlineStatus);
      window.removeEventListener('offline', checkOnlineStatus);
      clearInterval(interval);
    };
  }, []);

  const queueAction = async (type: string, data: any): Promise<string> => {
    try {
      const id = await offlineSync.queueAction({ type, data, retryCount: 0 });
      // Update pending actions count
      setPendingActionsCount(prev => prev + 1);
      return id;
    } catch (error) {
      console.error('Failed to queue action:', error);
      throw error;
    }
  };

  const syncNow = async (): Promise<void> => {
    if (isOnline && pendingActionsCount > 0) {
      setIsSyncing(true);
      try {
        const result = await offlineSync.syncPendingActions();
        console.log('Manual sync result:', result);
        
        // Update pending actions count
        const newCount = await offlineSync.getPendingActionsCount();
        setPendingActionsCount(newCount);
        
        return result;
      } catch (error) {
        console.error('Manual sync failed:', error);
        throw error;
      } finally {
        setIsSyncing(false);
      }
    }
  };

  const getPendingActions = async (): Promise<any[]> => {
    try {
      return await offlineSync.getPendingActions();
    } catch (error) {
      console.error('Failed to get pending actions:', error);
      return [];
    }
  };

  const clearPendingActions = async (): Promise<void> => {
    try {
      await offlineSync.clearAllPendingActions();
      setPendingActionsCount(0);
    } catch (error) {
      console.error('Failed to clear pending actions:', error);
      throw error;
    }
  };

  return {
    isOnline,
    pendingActionsCount,
    isSyncing,
    queueAction,
    syncNow,
    getPendingActions,
    clearPendingActions,
  };
}

// Hook for caching data
export function useOfflineCache<T>(key: string, ttl: number = 24 * 60 * 60 * 1000) {
  const [cachedData, setCachedData] = useState<T | null>(null);
  const [isLoading] = useState(false);

  const getCachedData = async (): Promise<T | null> => {
    try {
      return await offlineStorage.getCachedData(key);
    } catch (error) {
      console.error('Failed to get cached data:', error);
      return null;
    }
  };

  const setCachedData = async (data: T): Promise<void> => {
    try {
      await offlineStorage.setCachedData(key, data, ttl);
    } catch (error) {
      console.error('Failed to set cached data:', error);
    }
  };

  const removeCachedData = async (): Promise<void> => {
    try {
      await offlineStorage.removeCachedData(key);
    } catch (error) {
      console.error('Failed to remove cached data:', error);
    }
  };

  return {
    cachedData,
    isLoading,
    getCachedData,
    setCachedData,
    removeCachedData,
  };
}

// Hook for offline-first data fetching
export function useOfflineFirst<T>(
  key: string,
  fetchFunction: () => Promise<T>,
  ttl: number = 24 * 60 * 60 * 1000
) {
  const [data, setData] = useState<T | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { getCachedData, setCachedData } = useOfflineCache<T>(key, ttl);

  const fetchData = async (forceRefresh = false) => {
    setIsLoading(true);
    setError(null);

    try {
      // Try to get cached data first (unless forcing refresh)
      if (!forceRefresh) {
        const cached = await getCachedData();
        if (cached) {
          setData(cached);
          setIsLoading(false);
          return;
        }
      }

      // Fetch fresh data
      const freshData = await fetchFunction();
      setData(freshData);
      
      // Cache the fresh data
      await setCachedData(freshData);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch data';
      setError(errorMessage);
      
      // If fetch failed, try to get cached data as fallback
      if (!forceRefresh) {
        const cached = await getCachedData();
        if (cached) {
          setData(cached);
          setError(null);
        }
      }
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [key]);

  return {
    data,
    isLoading,
    error,
    refetch: () => fetchData(true),
    refresh: () => fetchData(false),
  };
} 

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useProtectedRoute.ts -----

'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { getSession } from '@/lib/auth/session';

/**
 * Redirects to /login if user is not authenticated.
 */
export const useProtectedRoute = () => {
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      const { session } = await getSession();

      if (!session) {
        router.replace('/login');
      } else {
        setLoading(false);
      }
    };

    checkAuth();
  }, [router]);

  return { loading };
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\hooks\useTables.ts -----

'use client';

import { useCallback, useEffect, useState } from 'react';

interface Table {
  id: number;
  table_number: string;
  qr_code_url?: string | null;
  created_at?: string;
}

export function useTables() {
  const [tables, setTables] = useState<Table[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchTables = useCallback(async () => {
  setLoading(true);
  setError(null);

  try {
    const res = await fetch('/api/tables', {
      method: 'GET',
      credentials: 'include',
    });

    if (!res.ok) {
      let errText: any = {};
      try {
        errText = await res.json();
      } catch {
        // response not JSON, leave errText as {}
      }
      throw new Error(errText.error || `Failed to fetch tables: ${res.statusText}`);
    }

    const data = await res.json();
    setTables(data);
  } catch (err: any) {
    console.error(err);
    setError(err.message || 'Failed to fetch tables');
  } finally {
    setLoading(false);
  }
}, []);

  useEffect(() => {
    fetchTables();
  }, [fetchTables]);

  const deleteTable = async (id: number) => {
    const originalTables = [...tables];
    setTables(prevTables => prevTables.filter(table => table.id !== id));

    try {
      const res = await fetch(`/api/tables/${id}`, {
        method: 'DELETE',
        credentials: 'include', // Also required here
      });
      if (!res.ok) {
        setTables(originalTables);
        throw new Error('Failed to delete table');
      }
    } catch (err) {
      setTables(originalTables);
      setError('Could not delete the table. Please try again.');
      console.error(err);
      throw err;
    }
  };

  return { tables, loading, error, refetch: fetchTables, deleteTable };
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\offline\offlineStorage.ts -----

// src/lib/offline/offlineStorage.ts

export interface PendingAction {
  id: string;
  type: 'create_order' | 'update_menu' | 'delete_menu_item' | 'update_profile';
  data: any;
  timestamp: number;
  retryCount: number;
}

export interface CachedData {
  key: string;
  data: any;
  timestamp: number;
  expiresAt: number;
}

class OfflineStorage {
  private dbName = 'QuickBiteOfflineDB';
  private version = 1;
  private db: IDBDatabase | null = null;
  private initPromise: Promise<void> | null = null;

  private init(): Promise<void> {
    if (typeof window === 'undefined' || !window.indexedDB) {
      return Promise.resolve();
    }
    if (!this.initPromise) {
      this.initPromise = new Promise((resolve, reject) => {
        const request = indexedDB.open(this.dbName, this.version);

        request.onerror = () => {
          console.error("IndexedDB error:", request.error);
          reject(request.error);
        };

        request.onsuccess = () => {
          this.db = request.result;
          resolve();
        };

        request.onupgradeneeded = (event) => {
          const db = (event.target as IDBOpenDBRequest).result;

          if (!db.objectStoreNames.contains('pendingActions')) {
            const pendingStore = db.createObjectStore('pendingActions', { keyPath: 'id' });
            pendingStore.createIndex('type', 'type', { unique: false });
            pendingStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
          if (!db.objectStoreNames.contains('cachedData')) {
            const cacheStore = db.createObjectStore('cachedData', { keyPath: 'key' });
            cacheStore.createIndex('expiresAt', 'expiresAt', { unique: false });
          }
        };
      });
    }
    return this.initPromise;
  }

  private async getStore(
    storeName: 'pendingActions' | 'cachedData',
    mode: IDBTransactionMode
  ): Promise<IDBObjectStore | null> {
    await this.init();
    if (!this.db) return null;
    return this.db.transaction(storeName, mode).objectStore(storeName);
  }

  async addPendingAction(
    action: Omit<PendingAction, 'id' | 'timestamp'>
  ): Promise<string> {
    const store = await this.getStore('pendingActions', 'readwrite');
    if (!store) throw new Error("Database not available in this environment.");

    const id = crypto.randomUUID();
    const pendingAction: PendingAction = { ...action, id, timestamp: Date.now() };

    return new Promise((resolve, reject) => {
      const request = store.add(pendingAction);
      request.onsuccess = () => resolve(id);
      request.onerror = () => reject(request.error);
    });
  }

  async getPendingActions(): Promise<PendingAction[]> {
    const store = await this.getStore('pendingActions', 'readonly');
    if (!store) return [];
    return new Promise((resolve, reject) => {
      const request = store.getAll();
      request.onsuccess = () => resolve(request.result || []);
      request.onerror = () => reject(request.error);
    });
  }

  async removePendingAction(id: string): Promise<void> {
    const store = await this.getStore('pendingActions', 'readwrite');
    if (!store) throw new Error("Database not available.");
    return new Promise((resolve, reject) => {
      const request = store.delete(id);
      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async updatePendingActionRetryCount(id: string, retryCount: number): Promise<void> {
    const store = await this.getStore('pendingActions', 'readwrite');
    if (!store) throw new Error("Database not available.");
    const action = await new Promise<PendingAction | undefined>((resolve, reject) => {
      const request = store.get(id);
      request.onsuccess = () => resolve(request.result as PendingAction);
      request.onerror = () => reject(request.error);
    });
    if (action) {
      action.retryCount = retryCount;
      await new Promise<void>((resolve, reject) => {
        const req = store.put(action);
        req.onsuccess = () => resolve();
        req.onerror = () => reject(req.error);
      });
    }
  }
}

export const offlineStorage = new OfflineStorage();

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\offline\offlineSync.ts -----

// src/lib/offline/offlineSync.ts
import { offlineStorage, PendingAction } from './offlineStorage';

export interface SyncResult {
  success: boolean;
  syncedActions: number;
  failedActions: number;
  errors: string[];
}

export class OfflineSync {
  private isSyncing = false;

  async queueAction(action: Omit<PendingAction, 'id' | 'timestamp'>): Promise<string> {
    return await offlineStorage.addPendingAction(action);
  }

  async syncPendingActions(): Promise<SyncResult> {
    if (this.isSyncing) {
      return { success: false, syncedActions: 0, failedActions: 0, errors: ['Sync already running'] };
    }

    this.isSyncing = true;
    const result: SyncResult = { success: true, syncedActions: 0, failedActions: 0, errors: [] };

    try {
      const pendingActions = await offlineStorage.getPendingActions();
      for (const action of pendingActions) {
        try {
          await this.processAction(action);
          await offlineStorage.removePendingAction(action.id);
          result.syncedActions++;
        } catch (err: any) {
          result.failedActions++;
          const msg = err?.message || String(err);
          result.errors.push(`Failed to sync ${action.type}: ${msg}`);
          const retry = action.retryCount + 1;
          if (retry >= 3) {
            await offlineStorage.removePendingAction(action.id);
          } else {
            await offlineStorage.updatePendingActionRetryCount(action.id, retry);
          }
        }
      }
    } finally {
      this.isSyncing = false;
    }

    return result;
  }

  private async processAction(action: PendingAction) {
    switch (action.type) {
      case 'create_order': return this.syncCreateOrder(action.data);
      case 'update_menu': return this.syncUpdateMenu(action.data);
      case 'delete_menu_item': return this.syncDeleteMenuItem(action.data);
      case 'update_profile': return this.syncUpdateProfile(action.data);
      default: throw new Error(`Unknown action type: ${action.type}`);
    }
  }

  private async syncCreateOrder(data: any) {
    const res = await fetch('/api/orders', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
    if (!res.ok) throw new Error(await res.text());
  }

  private async syncUpdateMenu(data: any) {
    const res = await fetch(`/api/menu/${data.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
    if (!res.ok) throw new Error(await res.text());
  }

  private async syncDeleteMenuItem(data: any) {
    const res = await fetch(`/api/menu/${data.id}`, { method: 'DELETE' });
    if (!res.ok) throw new Error(await res.text());
  }

  private async syncUpdateProfile(data: any) {
    const res = await fetch('/api/profile', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
    if (!res.ok) throw new Error(await res.text());
  }

  async hasPendingActions() {
    return (await offlineStorage.getPendingActions()).length > 0;
  }

  async getPendingActionsCount() {
    return (await offlineStorage.getPendingActions()).length;
  }

  async clearAllPendingActions() {
    const actions = await offlineStorage.getPendingActions();
    for (const a of actions) await offlineStorage.removePendingAction(a.id);
  }
}

export const offlineSync = new OfflineSync();

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\supabase\client.ts -----

import { createBrowserClient } from "@supabase/ssr";

export const supabase = createBrowserClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\supabase\server.ts -----

// src/lib/supabase/server.ts
import { createServerClient as createSupabaseServerClient, type CookieOptions } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createServerClient() {
  const cookieStore = await cookies() // âœ… must await

  return createSupabaseServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options })
          } catch {
            // Safe to ignore if you have middleware refreshing sessions
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value: '', ...options })
          } catch {
            // Safe to ignore if you have middleware refreshing sessions
          }
        },
      },
    }
  )
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\utils\image-compressor.ts -----

// src/lib/utils/image-compressor.ts

import imageCompression from 'browser-image-compression';

/**
 * Compresses an image file in the browser.
 * @param file The image file to compress.
 * @returns A promise that resolves with the compressed file.
 */
export const compressImage = async (file: File): Promise<File> => {
  const options = {
    maxSizeMB: 1,          // Max file size in MB
    maxWidthOrHeight: 1024,  // Max width or height
    useWebWorker: true,    // Use web worker for better performance
  };

  try {
    console.log(`Original file size: ${(file.size / 1024 / 1024).toFixed(2)} MB`);
    
    const compressedFile = await imageCompression(file, options);
    
    console.log(`Compressed file size: ${(compressedFile.size / 1024 / 1024).toFixed(2)} MB`);
    
    return compressedFile;
  } catch (error) {
    console.error('Image compression failed:', error);
    // Re-throw the error to be handled by the calling function
    throw new Error('Could not compress the selected image.');
  }
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\utils\notifications.ts -----

// Local (in-tab) fallback notifications
export function notifyLocal(title: string, body?: string) {
  if (typeof window === 'undefined' || !('Notification' in window)) return;
  if (Notification.permission === 'granted') {
    try { new Notification(title, { body }); } catch {}
  }
}

async function ensurePermission() {
  if (typeof window === 'undefined' || !('Notification' in window)) return false;
  if (Notification.permission === 'granted') return true;
  if (Notification.permission === 'denied') return false;
  const res = await Notification.requestPermission();
  return res === 'granted';
}

export async function registerPushForOrder(orderId: string) {
  if (typeof window === 'undefined') return;
  const ok = await ensurePermission();
  if (!ok) return;

  if (!('serviceWorker' in navigator) || !('PushManager' in window)) return;

  // Register SW once (no-op if already registered)
  let reg = await navigator.serviceWorker.getRegistration();
  if (!reg) {
    try { reg = await navigator.serviceWorker.register('/sw.js'); } catch { return; }
  }

  const vapidPubKey = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY;
  if (!vapidPubKey) return;

  const existing = await reg.pushManager.getSubscription();
  if (existing) {
    await saveSubscription(existing, orderId);
    return;
  }

  const sub = await reg.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(vapidPubKey)
  });

  await saveSubscription(sub, orderId);
}

function urlBase64ToUint8Array(base64String: string) {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
  const rawData = atob(base64);
  const outputArray = new Uint8Array(rawData.length);
  for (let i = 0; i < rawData.length; ++i) outputArray[i] = rawData.charCodeAt(i);
  return outputArray;
}

async function saveSubscription(subscription: PushSubscription, orderId: string) {
  const body = JSON.stringify({ orderId, subscription });
  await fetch('/api/push/subscribe', {
    method: 'POST', headers: { 'Content-Type': 'application/json' }, body
  });
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\uploadthing.ts -----

// src/lib/uploadthing.ts

import { generateReactHelpers } from "@uploadthing/react";
import type { OurFileRouter } from "@/app/api/uploadthing/core";

export const { useUploadThing, uploadFiles } = generateReactHelpers<OurFileRouter>();

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\lib\utils.ts -----

// src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString("en-IN", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

export const getInitials = (name: string): string => {
  if (!name) return '';
  return name
    .split(" ")
    .map((word) => word.charAt(0))
    .join("")
    .toUpperCase()
    .slice(0, 2);
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\types\menu.ts -----

export type MenuCategory = 'starters' | 'mains' | 'desserts' | 'drinks';

export interface MenuItem {
  id: number;
  restaurant_id: string;
  name: string;
  description: string;
  price: number;
  category?: MenuCategory;
  photo_url?: string;
  available: boolean;
  created_at?: string;
  updated_at?: string;
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\types\restaurant.ts -----

export interface Restaurant {
  id: string
  restaurant_name: string
  slug: string
  user_id: string
  created_at: string
  updated_at?: string
  description?: string
  address?: string
  phone?: string
  email?: string
  website?: string
  logo_url?: string
  banner_url?: string
  is_active?: boolean
  upi_id?: string
  qr_url?: string
  owner_name?: string
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\types\supabase.ts -----

// src/types/supabase.ts

// This file is intended to hold TypeScript types generated from your Supabase schema.
// You can generate these types by running the following command in your terminal:
// npx supabase gen types typescript --project-id YOUR_PROJECT_ID > src/types/supabase.ts
//
// Replace YOUR_PROJECT_ID with your actual Supabase project ID.
// This ensures that your application's types are always in sync with your database schema.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  // This would be populated by the generation script
}

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\src\middleware.ts -----

import { createServerClient, type CookieOptions } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

// This is the definitive, correct version for Next.js Middleware.
export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value;
        },
        set(name: string, value: string, options: CookieOptions) {
          request.cookies.set({ name, value, ...options });
          response = NextResponse.next({ request: { headers: request.headers } });
          response.cookies.set({ name, value, ...options });
        },
        remove(name: string, options: CookieOptions) {
          request.cookies.set({ name, value: '', ...options });
          response = NextResponse.next({ request: { headers: request.headers } });
          response.cookies.set({ name, value: '', ...options });
        },
      },
    }
  );

  // This crucial line refreshes the user's session cookie if it's expired.
  await supabase.auth.getUser();

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};

----- D:\01--PROJECTS--APPROTECH\Quick_Bite_Qr\next.config.ts -----

/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'uploadthing.com',
      },
      {
        protocol: 'https',
        hostname: 'utfs.io',
      },
    ],
    // This is the part that fixes the preview
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    unoptimized: true, // Add this line
  },
  // PWA and offline support configuration
  async headers() {
    return [
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=0, must-revalidate',
          },
          {
            key: 'Service-Worker-Allowed',
            value: '/',
          },
        ],
      },
      {
        source: '/manifest.json',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=0, must-revalidate',
          },
        ],
      },
    ];
  },
};

module.exports = nextConfig;
